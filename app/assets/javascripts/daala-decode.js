// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 400000000;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(157331);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,13,0,0,0,12,0,0,0,11,0,0,0,10,0,0,0,9,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,6,0,0,0,4,0,0,0,2,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,26,0,0,0,24,0,0,0,13,0,0,0,12,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,12,0,0,0,11,0,0,0,10,0,0,0,12,0,0,0,11,0,0,0,9,0,0,0,7,0,0,0,2,0,0,0,9,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,7,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,10,0,0,0,9,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,10,0,0,0,19,0,0,0,17,0,0,0,9,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,13,0,0,0,17,0,0,0,10,0,0,0,6,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,9,0,0,0,10,0,0,0,7,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,11,140,123,53,132,216,63,109,1,190,149,156,252,227,63,83,141,38,37,8,244,199,191,156,244,184,116,250,249,208,191,71,167,1,255,119,214,213,63,97,41,239,169,202,239,220,63,19,54,79,25,81,79,203,63,44,113,240,142,40,74,201,63,90,205,126,218,125,99,230,63,2,109,95,143,147,107,205,191,43,255,27,154,183,241,241,63,209,238,9,159,0,177,234,191,216,5,68,126,148,189,218,63,91,193,197,48,33,6,218,191,89,39,38,227,158,104,246,191,181,188,42,130,247,160,220,63,46,191,41,88,37,108,226,63,190,210,229,59,90,38,214,191,108,198,23,38,54,105,192,63,251,106,180,145,9,205,197,63,56,56,165,144,251,66,218,191,17,117,27,74,141,82,230,63,151,59,255,100,168,251,222,191,98,108,146,183,101,241,219,63,237,17,72,104,211,136,225,191,72,101,146,129,180,247,211,63,63,164,200,40,121,140,226,191,28,89,116,203,8,19,216,191,27,154,255,21,181,63,241,63,204,163,183,20,137,159,231,191,254,83,44,81,140,96,197,63,88,13,160,138,151,197,197,191,122,176,127,135,4,225,238,63,88,65,107,20,23,49,214,191,16,191,25,36,48,60,248,63,199,178,159,67,187,27,245,63,108,86,130,97,91,25,241,191,200,108,76,26,33,167,225,63,35,81,78,221,51,0,215,191,36,123,36,103,185,245,231,191,226,3,251,16,6,113,209,191,104,67,114,174,45,218,221,63,97,5,174,197,189,112,154,191,151,243,167,62,168,62,185,63,174,96,39,253,237,24,198,191,134,157,188,12,82,111,176,191,242,13,157,138,14,18,184,191,200,241,46,25,116,142,192,63,174,122,130,168,152,23,185,63,97,251,23,22,93,57,197,191,62,47,9,164,114,49,192,191,64,96,189,130,177,78,200,63,149,147,229,69,83,230,184,191,125,33,115,137,73,113,181,191,208,23,127,149,129,247,168,63,56,138,178,21,181,22,192,63,201,177,55,187,198,151,222,191,164,62,86,81,125,104,205,191,126,154,113,6,12,30,195,191,62,185,0,29,148,152,173,63,12,144,220,48,159,230,198,191,18,255,251,134,53,34,136,63,130,187,169,146,7,225,189,191,20,129,104,58,105,168,192,191,81,181,128,125,197,92,192,191,28,202,132,159,13,74,161,191,160,39,63,78,15,41,196,191,29,181,243,70,182,194,192,191,5,210,194,87,133,207,170,63,224,121,151,125,181,212,178,63,125,249,235,149,30,189,195,191,64,42,57,15,232,191,195,63,7,69,99,87,208,18,165,63,5,111,6,116,30,123,167,63,231,93,124,43,247,149,174,191,151,249,152,30,6,41,196,191,119,185,101,145,252,250,194,63,200,213,53,28,85,238,158,63,156,144,147,139,12,12,167,191,69,154,23,10,104,25,196,191,105,7,58,171,74,246,196,191,56,223,167,104,177,225,180,191,181,39,243,14,124,237,180,63,106,253,4,8,47,11,194,63,159,62,143,87,155,167,196,191,151,86,151,24,40,177,202,63,130,128,171,51,190,4,191,63,231,143,49,26,59,28,225,191,170,43,54,31,86,174,225,191,182,197,251,209,212,59,167,63,201,226,51,67,210,41,175,63,168,37,209,158,250,205,197,191,70,220,164,79,109,112,192,191,238,207,54,126,56,134,191,63,183,41,251,89,57,68,213,191,31,126,149,60,209,138,209,191,172,24,246,83,139,187,205,63,85,169,69,28,115,62,217,63,131,101,250,225,110,40,206,63,251,233,63,3,68,15,147,63,167,218,132,128,120,112,162,191,181,18,189,193,169,185,171,63,246,143,242,90,203,238,175,191,141,124,117,24,118,172,206,191,145,20,205,19,16,38,204,63,89,27,179,7,0,74,162,191,176,33,25,139,92,118,143,63,42,58,10,128,43,192,203,191,207,102,125,24,131,28,177,191,142,244,127,0,85,124,197,63,242,206,172,36,16,219,183,63,217,175,15,139,116,193,184,191,24,214,10,94,46,59,177,63,9,118,39,251,248,78,192,191,125,211,80,159,47,91,176,191,188,253,70,91,149,139,178,191,29,65,234,242,17,41,180,63,68,193,234,242,16,142,186,191,27,255,251,202,158,89,187,191,178,242,207,226,169,210,163,191,192,101,215,61,31,60,192,191,25,172,146,152,189,29,189,191,73,2,180,199,113,62,148,191,211,82,28,220,55,104,174,63,192,234,131,229,237,96,169,191,239,83,133,16,1,171,192,191,28,12,184,228,44,23,193,63,96,180,23,78,167,72,166,63,242,93,235,165,100,237,168,191,12,19,211,25,107,72,161,191,82,2,158,207,113,253,166,63,70,188,43,219,91,93,193,191,190,236,103,85,2,133,192,63,97,187,74,151,80,137,152,63,206,111,196,77,192,219,165,191,110,139,16,204,70,75,163,63,34,56,12,156,28,79,193,191,180,152,202,40,216,203,193,191,140,57,217,28,106,244,165,63,122,22,233,182,210,81,176,191,188,47,149,117,125,170,211,191,173,211,152,9,170,84,205,191,50,81,205,244,51,200,174,191,249,184,248,155,134,192,205,191,105,38,154,8,34,53,190,63,117,27,204,123,191,84,146,191,89,224,64,126,215,142,132,63,90,229,251,213,172,75,171,191,82,92,8,87,1,53,189,191,238,199,206,131,95,78,194,63,157,29,25,130,198,169,130,191,248,188,197,247,147,15,168,63,142,158,207,9,46,72,188,191,216,25,27,42,58,55,194,191,239,94,119,182,14,195,179,63,121,36,61,130,133,68,177,191,202,142,232,69,3,245,175,63,218,222,200,251,21,237,161,63,187,78,151,151,126,131,176,191,236,127,29,104,239,33,167,191,107,100,44,88,87,175,173,63,130,67,159,149,146,63,171,63,106,249,73,35,100,201,166,63,162,107,237,103,250,169,166,63,33,79,72,125,167,106,163,191,107,51,97,160,246,203,181,191,90,172,10,133,92,170,175,191,255,105,155,146,50,11,190,63,34,177,79,200,225,43,197,63,162,179,134,252,11,35,161,191,234,215,149,62,13,223,196,191,140,121,80,103,28,71,202,191,225,221,206,58,135,227,178,191,247,164,239,233,115,77,139,63,154,50,247,193,117,76,139,191,75,185,172,195,162,81,168,191,62,126,136,127,171,43,183,63,126,156,208,110,113,161,180,191,163,57,182,162,148,1,164,63,11,97,209,14,1,129,180,191,202,231,98,33,6,59,174,191,41,175,218,67,27,26,182,63,24,28,200,191,245,60,192,191,221,32,223,216,30,117,174,191,61,190,119,153,172,174,154,63,84,208,60,90,56,23,149,63,60,8,7,41,76,252,149,63,23,221,86,179,14,133,152,63,252,137,210,55,123,44,151,63,147,115,10,233,33,8,167,63,53,70,77,202,95,33,154,63,36,111,70,45,112,40,152,191,99,97,204,86,195,147,159,63,53,198,24,95,180,143,166,191,18,187,93,237,179,147,155,63,107,118,1,63,143,4,156,191,200,42,109,226,247,127,156,63,184,145,195,222,229,159,159,63,130,207,248,147,31,182,161,63,60,146,32,252,13,140,163,63,56,76,12,41,12,249,152,191,117,235,128,37,150,137,163,191,127,233,18,57,251,56,181,63,155,159,158,146,237,86,177,63,142,92,56,199,60,26,202,191,223,247,213,67,234,60,196,191,161,254,91,61,156,26,161,191,143,102,42,111,198,88,148,63,58,122,81,34,184,150,177,63,140,226,75,77,193,242,162,191,157,154,196,131,121,19,198,191,239,10,99,75,132,87,181,191,196,236,110,226,227,226,167,191,179,73,76,255,211,211,168,191,46,239,222,181,32,53,154,63,112,88,41,230,10,51,167,63,235,21,39,243,3,252,166,63,196,225,240,54,16,166,173,63,188,11,234,135,0,147,198,191,55,92,165,124,4,189,200,63,201,130,73,29,128,193,172,63,209,94,181,146,12,5,164,191,232,90,105,153,240,46,191,191,5,172,67,58,211,17,197,63,28,125,223,158,69,135,168,63,103,17,174,58,80,43,169,191,224,41,38,186,249,172,169,63,208,88,124,64,242,94,151,63,137,0,127,28,111,156,156,63,36,51,95,77,130,23,147,191,155,223,44,123,130,85,162,63,103,201,75,185,143,179,159,63,118,0,121,116,183,95,164,63,111,182,85,121,146,171,169,191,119,165,182,102,17,87,201,191,17,226,245,61,48,180,99,63,55,10,206,24,84,92,197,63,212,153,236,52,202,58,162,63,24,115,144,101,253,56,160,191,60,3,246,122,53,147,196,191,48,168,195,99,94,92,192,63,27,172,158,56,97,184,162,191,245,90,47,107,134,33,167,63,49,218,87,21,69,82,175,63,63,127,169,130,22,40,154,63,0,36,100,106,140,14,158,63,39,181,166,164,132,253,154,63,232,250,116,165,16,220,154,63,76,120,210,61,40,239,200,191,32,76,179,217,20,223,199,191,203,153,24,244,49,97,194,191,247,18,68,161,24,174,197,191,33,54,104,104,23,142,158,191,144,1,172,210,236,21,166,63,56,79,116,231,210,145,157,63,151,224,30,75,145,228,162,63,54,26,198,180,183,83,242,191,124,254,105,196,239,26,219,191,133,127,94,72,166,3,223,63,168,65,239,84,65,235,219,191,23,152,86,241,73,210,219,63,104,238,185,1,189,218,238,191,227,16,205,239,242,3,234,63,68,124,97,176,80,13,212,63,77,22,82,49,178,27,240,63,124,90,234,112,171,109,207,191,0,222,250,100,247,87,203,63,119,222,211,138,64,195,209,63,62,42,16,213,246,81,210,63,96,148,209,58,154,241,194,63,84,136,214,214,7,251,224,63,125,86,168,64,158,59,213,191,180,160,228,45,146,108,238,63,17,152,196,205,152,18,211,63,224,52,162,244,57,241,178,191,138,230,211,17,49,211,206,63,96,10,107,157,103,32,194,63,30,63,199,43,230,249,189,191,28,150,25,160,188,177,206,191,156,153,112,227,191,171,213,191,105,228,43,227,55,149,206,63,226,154,157,255,119,134,216,63,140,147,228,190,139,71,213,191,67,36,250,50,132,158,207,63,127,79,67,250,130,208,225,63,56,221,199,81,139,112,248,63,163,42,17,246,88,136,220,63,189,141,56,119,201,204,217,191,253,103,168,72,69,204,215,63,131,140,161,97,170,243,189,63,78,196,105,157,31,208,210,191,230,83,247,240,111,56,248,63,106,200,83,232,179,70,193,63,67,19,148,229,197,198,213,63,58,248,227,129,233,180,212,63,254,43,69,199,11,179,210,191,8,154,156,116,199,119,224,191,27,171,235,26,114,207,223,191,176,239,34,125,106,113,208,191,226,229,151,94,77,68,185,191,217,71,14,48,1,117,163,63,40,87,7,253,135,245,196,63,58,106,35,223,47,182,176,191,255,45,95,101,126,117,190,63,151,75,48,168,220,216,188,63,246,160,228,99,41,239,204,191,108,93,111,99,240,173,196,63,79,155,20,223,190,193,212,191,131,54,245,41,35,161,146,63,70,116,1,91,215,109,200,191,51,234,62,161,8,199,188,191,174,136,34,28,164,65,220,63,200,61,128,46,114,252,181,63,209,25,62,50,15,123,191,63,77,244,79,2,74,224,147,191,244,101,119,129,219,21,188,191,84,125,168,38,211,50,151,63,32,109,240,50,54,71,192,191,164,146,218,239,162,52,208,191,207,251,86,38,234,65,191,191,53,125,73,74,195,187,193,63,106,215,209,114,206,62,147,191,134,82,223,36,226,65,186,191,124,166,130,195,152,51,211,63,8,2,30,156,206,167,148,63,171,91,40,105,153,229,193,63,141,41,170,149,174,177,204,63,65,44,92,235,98,179,170,63,38,224,160,198,166,126,177,63,35,248,192,43,72,124,191,191,116,40,224,141,108,252,178,63,167,156,152,213,81,99,191,63,34,0,220,56,125,236,163,191,16,234,242,219,178,184,196,63,237,212,3,111,200,14,183,191,136,167,86,33,95,254,189,63,52,136,29,147,0,171,179,191,28,252,151,101,50,11,207,191,156,110,252,14,239,107,176,191,171,255,250,88,222,228,171,191,105,151,6,24,60,108,192,63,67,124,246,174,201,153,181,63,207,99,94,42,138,56,188,191,246,189,49,27,26,236,203,191,68,78,242,31,115,93,197,63,140,243,217,169,87,108,156,191,242,225,75,253,232,159,185,191,204,240,103,165,23,157,166,63,210,217,114,109,160,179,187,63,239,231,205,199,157,250,189,191,180,27,239,9,97,179,177,191,121,61,66,31,95,101,181,191,213,54,169,35,126,52,185,191,197,133,98,171,204,131,178,63,244,66,252,60,228,14,205,63,202,103,45,55,212,34,171,63,135,140,208,141,124,217,182,191,80,34,245,73,202,24,115,191,203,156,133,153,68,215,208,191,70,227,177,57,76,14,115,63,84,170,122,118,208,227,193,191,8,252,23,126,49,175,188,191,216,153,201,46,167,19,209,63,205,237,49,149,106,141,151,63,204,26,6,239,210,43,200,191,13,192,231,75,137,132,166,63,185,136,212,4,212,104,193,191,254,163,163,249,101,188,199,191,136,98,122,133,220,170,203,191,252,0,218,50,139,181,228,63,186,167,25,1,198,46,207,63,201,94,220,117,141,194,226,191,100,70,132,240,49,34,225,191,161,145,154,235,214,120,210,191,8,86,227,136,221,190,235,63,130,237,43,25,115,38,159,63,208,152,95,200,82,155,159,191,166,170,18,26,250,155,150,63,108,15,52,66,122,136,189,191,50,157,104,198,46,148,160,191,11,130,181,255,116,114,198,63,148,156,216,131,192,234,167,191,7,12,53,181,186,16,167,63,96,129,156,111,79,28,190,63,48,140,209,182,6,143,161,63,144,59,226,255,40,80,148,191,53,168,187,145,60,18,170,63,133,243,10,85,254,206,172,191,100,137,198,70,0,49,150,191,237,170,80,139,189,241,149,63,17,198,220,233,72,23,168,191,36,33,125,172,89,170,160,63,55,118,147,160,181,76,174,191,201,240,111,85,224,200,167,63,110,161,106,59,80,111,180,191,49,243,148,7,246,9,164,191,242,62,12,82,27,0,170,63,4,31,70,251,99,185,165,191,32,191,39,58,240,90,182,63,121,228,106,113,159,163,165,63,155,178,34,89,127,111,186,191,244,249,168,255,146,137,162,191,230,171,244,183,185,226,202,63,184,105,79,190,36,171,192,191,73,232,90,226,126,75,176,63,149,13,24,34,218,248,198,191,99,37,252,150,150,140,194,191,63,157,194,171,89,38,139,63,212,215,162,138,227,229,201,191,252,13,221,10,238,120,192,191,85,5,108,7,226,90,180,63,174,236,160,132,62,185,197,191,179,2,13,164,56,89,192,63,96,203,35,107,234,229,182,63,135,165,72,94,35,5,173,191,13,240,217,4,142,177,228,191,236,222,138,184,246,14,161,63,110,98,129,172,34,187,134,63,214,179,22,96,63,98,134,191,9,145,185,156,169,98,169,191,198,193,56,252,163,167,160,63,214,163,247,244,48,213,179,191,9,215,103,117,182,81,192,63,49,120,72,1,168,233,147,191,15,131,98,171,5,93,195,63,170,232,229,188,224,106,193,191,124,12,109,215,98,117,176,63,64,240,161,61,3,193,195,191,173,98,58,40,226,108,179,191,96,94,77,254,191,121,192,63,217,48,189,181,28,144,188,63,73,214,106,159,202,90,195,191,16,101,46,25,29,97,169,191,90,199,200,169,118,131,201,63,92,8,236,62,198,26,180,63,170,7,152,228,63,214,155,191,10,227,98,210,249,2,195,63,158,191,22,104,245,233,209,191,157,196,9,209,28,155,148,63,132,101,125,75,77,66,194,191,151,198,197,87,24,148,218,191,251,188,58,137,115,177,167,191,88,68,171,94,63,238,177,63,13,217,60,173,225,176,172,63,43,14,166,233,65,152,162,63,214,70,136,117,117,109,162,63,236,30,23,189,221,146,190,191,14,199,207,225,226,2,162,63,91,150,225,243,119,7,149,191,55,225,110,20,229,133,177,63,222,173,53,206,39,30,192,191,52,220,255,182,46,0,160,63,82,251,62,53,12,155,179,191,10,121,147,86,74,28,203,63,114,233,36,100,163,92,173,191,164,134,231,188,94,242,206,63,191,218,223,144,83,80,181,191,113,10,139,210,155,142,188,63,240,100,0,42,231,81,216,191,129,44,28,153,240,221,193,63,173,61,14,86,4,81,195,63,243,154,149,125,67,108,168,191,122,84,153,243,159,144,151,191,130,21,236,164,146,220,179,63,5,61,89,150,192,35,165,63,68,110,159,220,19,196,176,191,149,238,245,44,218,195,152,63,129,142,152,49,91,17,182,191,108,26,217,175,124,112,180,191,55,247,43,218,106,68,168,191,108,194,161,35,90,153,190,63,50,24,174,129,91,26,181,191,162,82,31,181,65,157,195,63,150,201,195,144,207,12,193,191,196,145,163,19,156,12,189,63,129,176,224,151,122,42,193,191,83,240,104,164,169,168,157,191,8,217,197,161,185,118,196,191,153,245,4,60,160,184,212,63,48,102,168,85,154,31,205,63,234,239,52,128,67,107,161,191,210,216,69,242,109,222,169,63,42,42,0,236,74,183,177,191,42,201,67,166,125,132,180,191,89,216,154,172,177,88,169,63,62,128,187,205,12,254,158,63,85,70,1,215,116,175,192,191,4,237,225,35,137,219,182,63,150,79,224,84,42,47,112,191,179,192,146,13,160,117,177,63,243,11,96,86,189,8,192,191,137,41,210,82,28,170,183,191,207,130,69,195,47,113,184,63,35,32,17,27,139,92,215,191,135,175,227,127,241,126,114,63,133,108,162,214,232,44,187,191,29,166,245,233,69,236,193,63,157,89,226,80,155,12,160,63,145,62,187,9,138,76,170,191,197,35,158,222,6,5,162,191,156,161,213,51,48,156,176,63,11,89,138,18,80,97,155,63,156,134,190,115,107,245,189,191,235,2,228,87,174,135,173,191,193,37,36,182,197,133,179,63,135,67,193,245,82,155,157,63,1,33,188,218,118,238,203,191,199,69,45,221,139,1,216,191,167,242,22,59,142,118,180,191,214,223,89,6,142,36,192,191,98,160,13,153,151,179,151,63,100,222,51,76,196,41,168,191,254,23,113,220,238,52,207,63,170,185,167,126,23,37,231,63,134,41,241,106,33,104,230,191,140,118,82,167,3,218,207,191,35,5,42,71,2,55,220,191,173,95,198,247,52,58,217,63,61,193,150,100,165,157,233,63,185,197,49,251,77,72,235,63,50,163,213,25,239,113,233,191,16,142,134,119,97,253,226,63,115,80,116,50,244,113,241,63,238,11,35,157,87,135,236,63,28,86,121,65,82,3,233,63,83,184,205,66,53,57,193,63,125,70,190,215,80,41,219,63,105,122,189,96,22,74,228,63,102,196,183,96,47,51,230,63,171,174,169,205,242,59,212,63,193,159,122,239,90,119,242,63,220,237,197,154,137,42,242,63,2,233,224,25,116,115,224,63,153,229,88,29,117,113,219,191,247,98,30,221,232,124,248,63,81,125,122,3,80,19,231,191,32,32,27,12,82,89,222,191,174,162,227,10,165,59,232,63,250,165,226,98,10,206,205,191,14,118,233,198,193,120,212,63,192,83,109,163,76,63,200,63,75,16,9,50,184,143,162,191,122,38,71,18,31,28,222,191,122,104,71,54,150,167,184,63,28,48,66,161,51,36,211,191,247,166,3,128,233,134,231,191,64,36,83,240,139,68,207,191,248,71,211,212,249,32,146,191,142,213,124,243,103,63,196,63,169,78,7,170,240,204,148,63,192,106,35,4,152,167,199,191,24,15,186,208,252,245,206,191,205,176,236,44,255,109,202,191,175,98,251,52,219,93,204,191,193,26,193,231,84,158,183,191,80,231,2,194,231,246,200,191,155,219,140,2,27,144,198,191,238,238,22,55,237,241,188,63,172,19,46,172,210,67,199,191,151,164,213,13,40,167,202,63,110,219,77,206,109,150,178,63,193,63,9,205,101,151,184,191,191,129,243,150,66,86,202,191,83,190,44,84,73,209,199,63,54,133,117,156,100,27,200,191,227,223,152,90,204,253,200,191,63,105,34,22,160,208,191,191,160,134,67,141,122,108,193,63,232,97,154,136,62,59,209,191,129,253,158,78,116,139,204,63,123,80,78,120,131,242,202,63,32,175,10,238,193,147,213,191,9,206,180,3,107,240,227,191,216,207,228,1,43,171,231,191,138,185,108,50,152,232,237,191,191,55,187,89,76,181,214,63,59,5,240,124,146,135,226,191,71,235,71,146,37,229,215,191,53,169,23,248,46,101,208,63,247,133,63,122,175,185,208,191,223,244,117,62,228,217,214,191,90,2,104,217,199,150,219,63,65,40,220,78,136,198,226,191,240,232,56,26,82,216,167,191,130,104,100,29,220,224,178,191,167,27,172,203,100,64,189,191,181,113,80,79,199,146,201,63,143,146,158,216,182,237,200,191,230,142,249,158,7,211,179,191,220,123,177,138,245,206,170,191,38,86,219,16,117,150,165,63,47,152,196,220,7,92,195,191,165,250,208,118,205,98,196,191,207,233,111,56,245,4,202,63,197,89,137,148,120,15,212,191,174,142,52,227,173,139,196,191,168,188,91,213,116,49,181,63,82,155,47,3,41,183,192,191,239,41,250,118,66,199,191,63,17,48,178,0,106,101,180,63,151,132,21,54,57,214,190,191,68,15,1,74,60,24,197,191,35,82,162,233,99,96,176,191,162,245,128,16,113,31,168,63,23,118,190,190,40,3,196,191,216,11,159,150,245,64,192,191,176,153,159,201,35,113,180,63,233,223,26,100,163,204,193,191,3,71,230,209,43,11,197,63,241,48,98,51,67,76,172,63,214,238,69,93,44,95,171,191,128,50,88,252,190,11,198,191,221,124,17,39,1,226,194,63,178,233,150,107,62,146,195,191,27,127,228,38,95,5,197,191,79,66,203,148,75,139,162,191,53,180,212,88,162,144,178,191,100,215,114,190,116,242,176,63,132,241,83,167,22,96,211,191,6,171,43,25,39,107,207,191,117,214,125,173,68,174,185,63,201,3,188,30,248,205,215,191,23,67,79,136,78,182,198,63,152,103,101,253,239,106,178,191,135,217,243,212,127,44,193,191,195,168,248,203,242,241,194,63,50,128,77,49,249,109,195,191,106,221,180,182,1,194,196,63,143,244,0,249,44,113,173,191,56,179,198,78,148,88,160,63,101,194,221,7,127,9,206,63,253,206,26,185,94,41,181,191,118,130,208,65,11,58,165,63,183,147,175,163,238,90,202,191,123,69,133,184,118,142,196,63,208,67,39,35,155,251,163,191,182,174,1,192,83,129,192,191,42,139,171,171,228,104,209,63,2,180,141,240,84,100,170,191,223,120,106,60,111,46,181,63,141,128,222,84,143,95,171,63,158,84,51,124,215,81,167,191,253,171,185,156,191,89,197,63,99,12,185,122,91,187,173,63,184,118,237,76,241,45,180,63,210,234,192,65,126,239,181,63,85,129,92,254,177,57,187,191,83,167,236,100,197,86,178,191,211,105,79,88,97,230,199,191,147,149,27,230,146,121,197,63,232,61,98,159,22,237,141,191,228,165,166,39,242,105,181,191,56,206,168,43,65,100,193,63,130,170,68,198,181,156,201,191,125,234,54,228,179,80,211,191,130,77,36,156,63,26,175,63,210,52,140,134,158,229,180,191,152,182,76,131,99,40,192,63,40,185,16,21,245,28,192,191,103,202,12,207,114,185,189,63,146,202,249,99,133,162,196,63,26,52,115,251,188,135,186,63,57,62,112,197,78,80,191,63,75,195,55,12,154,222,173,191,216,211,219,5,137,92,190,191,65,130,19,108,140,197,191,191,43,75,101,218,140,117,197,191,99,173,113,59,71,153,196,191,199,23,86,190,165,67,196,63,89,182,158,13,147,35,164,191,244,221,12,59,199,97,168,191,118,105,78,9,94,160,167,63,57,123,172,44,39,178,178,63,137,196,79,133,150,152,177,191,30,3,221,200,198,43,170,191,72,150,55,241,26,193,181,191,186,132,19,37,103,240,163,63,113,65,126,252,249,239,159,63,4,157,0,54,160,239,187,191,131,229,201,9,126,29,179,191,250,216,24,23,156,73,193,63,213,109,86,109,43,102,193,63,72,107,99,120,43,96,172,63,87,6,37,25,184,150,178,191,220,192,109,75,203,176,164,63,113,184,139,63,107,200,179,63,99,231,64,87,132,73,166,63,199,161,242,61,37,78,173,191,109,168,97,131,162,210,198,63,183,122,131,159,215,44,183,63,147,225,61,212,154,58,208,191,245,184,34,197,41,51,203,191,205,69,53,45,242,38,167,191,52,174,15,244,25,166,180,191,45,212,115,130,111,89,195,63,200,29,71,49,27,255,176,191,29,244,18,118,11,180,196,63,158,117,207,186,176,36,186,191,4,80,107,104,238,14,189,191,233,156,6,113,121,134,171,63,102,81,118,123,131,59,209,191,196,1,185,155,244,2,192,63,102,65,34,204,29,26,171,63,148,118,19,238,229,197,172,63,197,43,5,97,2,218,176,63,57,93,128,39,96,180,177,191,103,106,100,103,178,107,188,191,34,181,81,190,74,7,195,63,62,96,175,117,0,7,174,191,135,131,3,239,250,158,169,191,172,0,120,254,217,115,185,63,218,152,245,134,241,59,175,191,151,156,225,46,200,26,175,63,69,235,172,244,244,5,193,191,113,156,237,215,48,144,178,63,140,228,194,25,86,126,175,191,248,145,29,239,234,102,187,191,187,19,192,31,171,51,166,191,42,19,132,49,161,231,179,63,75,138,24,141,22,31,187,63,19,2,183,65,22,54,202,191,175,188,43,241,206,190,205,63,5,137,243,60,176,48,181,63,105,182,21,111,14,39,187,63,104,12,81,177,185,190,191,191,25,251,133,37,169,60,183,191,89,247,144,58,95,242,206,63,61,53,43,62,127,147,180,191,38,106,144,180,143,112,177,63,95,167,33,234,157,59,184,191,85,81,163,141,228,51,184,63,186,33,173,245,188,43,163,63,72,245,60,56,235,45,176,191,48,7,112,239,92,4,187,63,17,75,161,251,168,202,185,191,36,160,107,29,226,37,184,191,46,36,223,71,137,34,173,63,254,107,54,223,176,111,179,191,188,25,79,44,242,168,177,191,158,128,191,22,98,119,182,191,201,199,115,79,0,46,164,191,187,214,240,62,165,37,177,63,226,154,169,20,99,102,170,63,51,117,160,246,165,167,203,191,146,247,190,122,19,250,200,63,54,141,16,95,28,109,164,63,15,23,170,130,23,84,164,63,8,227,203,125,159,205,204,191,63,110,45,172,141,92,165,191,19,82,143,202,245,52,195,63,16,212,26,50,222,73,173,191,53,129,204,62,195,99,159,63,125,179,244,12,67,160,175,191,183,49,164,229,169,192,182,63,106,76,71,150,246,116,161,191,174,186,168,106,224,128,172,63,106,109,64,171,250,109,170,191,164,142,199,206,145,221,174,63,29,242,21,122,100,7,167,191,193,224,122,93,62,240,177,191,179,113,247,227,253,229,202,191,243,251,70,164,57,2,204,191,204,115,3,141,102,62,196,191,191,61,246,11,101,167,203,191,253,63,252,81,49,81,167,191,232,130,135,206,144,12,183,63,111,143,201,31,17,45,164,63,162,112,116,34,180,228,177,63,161,194,166,53,90,13,192,63,97,238,232,95,112,184,207,63,98,219,127,37,240,192,192,191,123,255,100,180,95,75,188,191,12,102,25,153,181,141,194,191,106,250,81,145,242,213,164,63,159,165,73,253,132,52,182,63,173,12,203,37,14,127,156,191,154,219,227,177,113,74,240,63,203,42,201,169,38,54,217,191,174,174,10,88,66,83,239,63,86,236,191,25,98,228,208,191,51,171,247,76,92,16,178,191,212,143,74,175,22,181,173,63,3,1,222,22,126,173,188,191,14,70,208,228,72,43,190,63,12,241,37,216,0,144,180,191,228,61,196,120,78,113,147,63,35,244,101,214,243,100,130,191,140,45,142,148,226,57,183,191,67,3,29,224,20,107,180,191,95,90,206,79,182,61,186,191,50,80,178,159,107,246,181,191,204,25,81,205,15,202,182,63,9,33,149,177,124,204,171,191,98,214,144,126,73,172,178,191,139,177,240,106,130,98,174,191,171,226,187,89,185,170,173,191,71,148,234,47,83,159,176,191,154,55,9,126,251,229,168,63,193,167,22,223,57,94,175,63,236,95,117,194,65,36,183,191,174,19,146,229,17,120,172,191,118,65,108,5,197,224,175,191,245,255,124,93,135,79,176,191,198,248,163,104,7,50,102,63,211,182,230,44,144,126,108,191,89,199,202,74,42,118,166,63,221,208,140,10,11,217,183,191,10,39,113,213,170,120,181,63,191,228,20,170,212,91,171,191,141,66,230,167,27,208,173,63,130,77,204,159,170,60,165,191,249,120,200,190,147,5,189,191,6,61,236,6,203,209,182,63,205,155,117,251,163,5,170,191,174,123,164,73,173,81,171,63,21,93,108,22,90,14,163,191,95,143,151,241,48,251,162,191,206,116,253,116,51,48,187,191,60,17,153,226,201,145,186,191,123,241,179,214,244,92,169,191,133,188,46,238,237,249,168,191,55,219,217,169,224,229,196,63,157,230,144,245,84,241,202,63,178,221,127,100,48,116,178,191,188,75,192,83,51,251,182,191,251,112,95,142,48,221,172,191,92,21,154,226,123,124,194,191,222,2,229,166,119,6,193,191,67,6,115,124,11,236,168,63,52,67,91,29,98,159,236,63,165,49,101,146,47,138,187,191,117,41,130,76,129,11,237,191,86,1,158,144,246,199,204,63,90,22,27,203,101,110,184,191,192,218,139,255,114,180,178,191,31,190,157,47,26,44,178,63,218,121,120,167,100,5,191,191,127,101,193,203,186,55,192,63,72,139,16,237,204,121,176,191,101,193,76,31,21,198,178,63,91,66,39,45,197,189,182,191,74,42,69,24,253,91,179,63,82,235,243,47,190,203,187,191,20,7,187,250,32,224,179,63,120,170,31,12,79,219,164,191,106,191,222,156,40,193,165,63,193,57,203,239,255,101,184,191,91,197,40,45,51,233,181,191,43,128,195,59,15,195,171,191,111,115,196,169,156,228,174,191,230,194,119,140,202,29,170,63,75,107,56,16,100,155,170,191,113,4,28,170,36,240,185,191,113,59,60,234,96,85,182,191,152,118,70,49,10,239,169,191,71,152,95,213,112,64,169,191,72,160,125,48,183,215,162,63,72,161,231,193,59,194,161,191,131,83,242,15,191,100,185,191,135,161,14,125,253,69,184,63,117,199,132,205,227,174,169,191,125,22,83,238,86,70,169,63,140,164,120,198,102,169,165,191,237,18,89,182,103,173,188,191,52,216,2,245,74,250,183,63,62,182,147,78,92,220,167,191,52,202,47,47,162,167,168,63,11,91,95,69,177,207,187,191,40,219,204,164,50,160,187,191,243,181,155,57,48,190,174,63,179,233,219,80,29,91,187,191,240,185,138,79,247,195,163,191,171,182,244,147,139,39,154,191,80,180,207,96,36,229,170,191,249,94,42,194,83,64,165,191,220,199,226,155,23,53,191,63,0,160,83,35,139,1,159,63,95,11,11,21,190,199,173,191,147,238,94,65,95,90,137,191,219,174,14,106,172,93,232,63,122,155,255,127,255,242,150,63,84,27,74,44,252,165,231,191,96,50,48,246,81,11,190,63,85,8,161,139,169,99,152,191,112,60,252,89,232,3,152,63,39,32,39,122,21,232,169,191,121,72,209,200,228,130,173,63,250,217,51,147,11,75,177,63,15,209,173,82,18,229,179,191,60,43,247,2,200,129,174,191,209,0,0,233,176,28,178,63,234,204,60,24,194,172,156,191,39,4,66,146,209,44,154,63,198,196,138,110,218,133,170,191,164,62,206,211,205,39,160,63,194,173,54,48,253,192,179,63,195,1,204,113,52,149,164,63,182,151,205,157,10,194,160,191,83,91,215,95,247,37,154,191,199,221,245,24,63,234,169,63,199,185,100,137,16,232,168,191,22,126,39,156,146,221,158,191,79,159,221,196,213,249,154,191,105,243,253,150,132,177,169,63,131,1,48,134,153,27,164,63,60,127,238,20,45,144,166,191,38,94,18,183,205,24,156,191,1,239,93,236,140,108,154,63,40,211,37,142,121,171,162,63,95,252,57,185,254,2,162,191,123,115,118,100,152,66,164,191,133,159,59,2,228,251,165,63,59,105,160,237,142,73,158,191,104,123,200,190,4,204,147,63,185,212,228,231,201,233,154,191,37,25,253,133,88,175,151,191,246,39,118,237,203,61,164,63,50,212,94,253,52,34,162,63,91,108,174,254,224,1,136,63,182,114,221,248,200,24,170,191,75,211,122,210,229,210,182,191,129,166,127,84,128,116,143,191,36,133,10,1,73,83,182,63,34,9,16,203,211,136,177,63,203,198,6,3,21,161,147,191,234,158,60,143,68,78,227,63,221,166,167,193,6,4,151,63,99,212,152,0,138,97,229,63,16,117,188,11,163,236,176,63,238,165,139,208,10,255,179,63,242,45,62,59,13,98,182,191,158,16,198,97,159,120,171,191,141,64,254,103,5,27,168,191,56,205,239,33,173,221,181,63,197,252,182,50,153,94,175,191,205,44,2,134,230,1,173,63,182,224,27,37,84,155,175,63,65,88,118,240,104,213,162,63,193,106,85,212,185,104,162,63,124,24,69,61,235,118,171,63,56,148,198,16,168,231,167,63,193,199,99,244,167,57,160,63,167,211,245,2,0,94,161,63,244,150,69,113,219,227,163,63,34,212,63,133,125,241,160,191,29,239,114,11,231,7,164,63,138,189,130,36,238,86,167,191,173,157,119,109,64,138,164,191,112,226,6,144,162,196,166,191,93,150,160,230,146,9,163,63,248,248,92,91,112,136,160,191,251,177,251,94,122,64,166,63,31,199,248,103,185,137,160,63,73,254,41,252,255,16,162,63,159,87,47,252,168,126,163,63,3,210,233,159,113,237,161,63,130,9,117,65,240,178,165,191,233,162,34,187,188,84,160,63,148,149,20,109,33,12,182,63,140,183,192,100,45,38,170,191,251,81,194,67,202,12,161,191,202,229,56,108,245,118,225,63,136,156,219,132,129,48,176,191,111,86,73,22,94,34,224,63,195,4,2,248,130,96,149,63,156,158,95,242,4,112,144,191,125,126,2,177,210,71,164,63,206,12,123,118,122,75,170,191,55,25,146,154,221,168,160,191,166,218,208,185,212,25,164,63,178,128,41,49,242,254,173,191,108,206,40,24,138,122,151,191,92,17,209,97,245,98,170,63,8,72,31,23,7,34,162,191,137,127,235,94,16,153,167,191,209,227,204,92,41,193,146,63,189,63,243,169,61,70,160,63,26,199,18,213,88,14,167,63,174,50,178,57,236,38,163,63,246,140,186,33,83,111,153,63,247,210,86,35,252,231,148,63,237,25,64,158,30,122,161,63,11,253,2,96,156,188,178,191,233,202,154,241,150,156,130,63,65,4,213,96,167,54,150,191,85,43,138,223,211,167,218,63,182,238,57,12,180,231,130,191,137,207,69,190,78,134,150,191,42,194,194,243,2,242,220,191,5,211,179,209,152,192,180,191,47,157,43,131,171,96,170,191,24,166,133,245,113,203,172,63,249,82,65,244,146,217,148,63,76,34,242,130,52,133,146,191,157,176,24,0,47,107,171,191,122,174,74,158,27,73,169,63,123,140,250,129,186,75,166,191,181,21,100,142,132,226,166,191,12,42,232,198,211,255,168,191,98,104,215,113,177,67,166,191,250,2,24,67,228,34,162,191,73,137,127,211,163,214,163,63,131,240,87,47,246,133,166,191,204,106,157,241,204,245,159,191,170,170,24,19,163,153,162,191,65,224,209,174,250,95,155,63,152,138,235,117,129,72,173,191,196,87,251,46,106,83,165,191,77,52,148,71,32,14,216,63,148,4,190,243,117,89,214,191,215,66,210,141,61,175,149,63,43,5,202,250,145,231,151,191,168,61,68,133,120,92,171,63,111,100,254,19,236,118,162,191,193,231,178,182,15,50,114,191,39,158,136,219,27,154,162,191,38,24,4,51,218,199,213,63,51,13,89,169,45,79,115,63,16,71,200,0,163,49,161,63,58,101,31,217,77,158,214,63,117,114,83,177,177,156,160,63,0,106,162,178,136,29,170,191,230,25,185,148,72,172,161,63,27,56,240,57,57,3,168,191,18,144,38,234,234,102,226,63,118,152,13,116,253,98,237,191,178,44,58,15,46,21,230,63,150,78,106,168,224,47,211,191,201,110,237,250,119,139,209,63,155,15,152,143,86,119,211,63,235,56,54,37,206,204,217,191,41,15,19,244,62,151,209,191,164,244,19,122,133,213,213,191,2,43,32,80,68,57,193,63,121,132,183,126,71,83,169,191,86,84,235,27,220,132,245,63,225,133,174,71,27,204,7,192,216,164,128,164,228,113,4,64,12,39,103,62,168,254,231,191,238,230,4,75,217,37,203,63,49,163,181,47,162,133,243,191,121,208,27,228,248,66,241,63,98,247,82,46,28,140,208,63,29,204,114,9,152,71,213,191,197,42,109,118,230,252,199,191,84,122,157,202,33,131,207,191,214,244,147,194,62,105,199,63,24,156,0,0,114,84,164,63,97,125,97,231,49,249,227,191,11,71,173,5,72,56,224,63,179,245,209,30,195,163,158,63,126,107,42,200,46,243,216,191,18,159,211,53,208,227,203,63,110,168,238,22,188,20,185,191,172,61,30,156,248,170,190,191,79,70,251,149,60,72,202,63,111,253,142,25,171,101,135,191,59,164,241,112,69,237,138,63,175,106,126,45,56,23,207,191,152,133,243,83,3,228,209,63,128,49,4,1,225,135,193,191,12,244,69,43,229,110,202,63,12,211,4,73,35,132,196,191,223,76,233,5,73,132,195,191,166,216,211,38,219,116,196,63,27,70,244,186,54,132,195,63,148,5,155,89,156,193,194,191,121,110,252,167,225,54,198,191,22,173,208,172,97,127,186,63,65,251,236,62,34,31,182,63,78,161,119,30,147,254,187,191,196,13,10,216,121,180,197,191,188,72,179,5,43,129,196,63,210,47,70,185,24,215,185,191,196,137,240,136,214,35,180,191,76,221,46,128,144,198,197,191,143,91,20,222,98,61,199,63,179,161,197,227,177,227,174,191,176,42,96,64,5,2,199,191,132,62,233,158,183,95,198,191,22,183,178,10,44,229,215,63,129,144,63,149,70,179,196,191,58,218,93,31,235,155,216,191,17,26,145,249,188,160,207,63,197,6,127,218,180,47,206,191,201,57,9,142,21,57,222,191,205,39,93,196,48,11,211,63,174,22,155,228,223,150,184,191,78,255,159,88,6,176,201,63,43,30,150,172,36,37,193,63,59,168,169,46,144,27,211,63,88,226,113,161,4,58,229,63,83,6,226,64,109,164,221,191,34,122,154,190,148,37,220,191,219,176,239,189,70,56,217,63,87,254,38,109,28,122,212,191,113,233,52,100,210,222,228,191,211,88,164,176,88,227,222,63,142,72,92,118,185,107,155,63,19,144,222,187,63,139,195,191,193,169,64,253,129,154,201,191,27,184,141,240,164,58,188,63,40,190,65,137,130,205,198,63,137,106,242,134,116,172,167,63,80,70,36,136,229,100,182,191,135,47,112,219,155,98,177,63,111,146,188,108,74,146,208,191,228,114,11,209,17,134,169,191,13,91,143,57,156,205,205,63,76,59,17,206,28,25,191,191,113,95,151,153,123,170,145,63,186,135,177,215,27,185,196,63,165,239,40,184,40,88,145,191,239,60,158,181,54,14,179,191,93,245,56,172,141,205,182,63,167,174,168,212,56,86,195,191,190,23,108,94,174,183,193,191,21,217,97,43,42,211,184,63,136,249,106,202,65,204,185,191,64,63,73,252,111,77,193,191,225,237,47,53,214,18,195,191,1,151,219,177,199,97,174,63,33,86,0,149,3,73,178,191,223,82,43,23,115,145,195,191,33,45,90,107,10,88,194,63,129,232,30,135,148,138,178,191,169,152,41,158,41,175,178,63,8,44,223,67,6,159,195,191,92,79,254,142,14,82,196,63,166,194,158,151,148,33,197,191,107,91,251,200,80,250,195,191,166,81,208,31,42,45,173,63,116,220,31,93,248,71,215,191,90,69,47,205,174,196,181,63,44,147,81,228,204,212,178,191,216,57,204,243,14,124,215,191,68,252,207,181,26,124,196,63,17,105,202,34,72,188,196,191,149,172,220,14,240,142,172,191,52,131,23,73,172,207,196,63,57,105,113,148,224,119,192,191,99,175,168,111,144,150,209,63,3,202,88,105,202,94,199,191,47,100,14,45,124,34,191,63,46,221,216,229,157,108,219,63,36,119,83,239,160,255,199,191,1,129,184,225,186,241,158,63,61,91,132,243,38,16,182,191,16,210,39,8,151,25,170,191,216,23,107,184,188,122,177,63,182,62,3,234,157,31,175,63,185,140,126,173,101,193,196,191,188,162,78,67,8,60,180,63,135,38,232,57,162,83,193,63,196,195,250,219,197,175,149,63,130,239,3,212,114,56,183,191,212,114,252,156,144,202,188,191,41,81,40,172,47,137,190,63,132,217,44,43,85,193,208,191,23,16,142,210,122,237,161,63,245,26,114,177,247,26,166,191,214,17,47,140,113,226,160,63,183,36,224,166,102,208,181,63,221,141,123,243,14,139,188,191,252,196,251,75,196,163,160,191,129,107,11,230,189,241,171,63,187,143,39,39,179,232,184,63,141,135,71,99,48,152,181,63,11,128,113,243,252,50,181,191,131,7,50,123,216,108,198,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([179,79,80,155,139,220,206,63,20,197,42,33,204,2,198,191,57,113,151,220,192,210,180,63,240,171,208,104,182,186,208,63,120,174,77,27,112,5,194,191,60,69,69,155,44,136,191,63,149,229,253,39,151,58,194,191,182,101,0,13,249,35,214,191,148,20,172,156,38,136,210,63,10,55,184,234,191,132,184,191,68,139,76,107,231,214,205,63,8,63,56,84,243,140,135,63,69,243,87,194,240,189,187,191,94,79,7,187,115,87,181,63,157,106,173,132,17,24,138,191,202,252,94,63,158,230,169,63,34,189,149,49,169,13,188,191,52,53,87,99,135,70,178,63,207,250,181,105,239,61,186,63,149,104,38,245,75,114,196,63,91,134,176,241,187,29,180,191,160,110,156,191,215,62,178,191,142,151,236,157,4,191,183,63,212,27,168,129,5,197,173,191,36,33,49,183,76,201,187,63,44,81,33,191,33,78,168,63,60,135,56,4,106,230,192,191,40,65,205,51,63,226,193,63,189,207,34,225,255,140,167,63,180,166,7,254,210,245,167,191,219,200,130,16,173,98,153,63,199,134,20,39,92,135,178,63,61,200,213,108,252,62,177,191,148,5,141,178,103,11,176,63,56,144,227,135,203,111,171,63,202,133,48,51,252,138,163,191,74,177,225,93,54,227,202,63,50,101,148,2,253,133,204,63,96,77,108,87,198,147,169,63,46,10,194,252,15,198,186,191,220,221,69,178,213,112,179,191,81,249,42,30,77,71,186,191,71,116,151,113,218,199,178,191,56,105,92,60,228,214,218,191,250,2,8,57,179,159,168,191,222,131,248,160,199,196,192,63,69,240,192,186,109,70,168,63,186,205,35,254,177,1,195,63,99,198,71,24,82,5,188,191,182,225,96,214,236,236,193,191,101,184,134,199,149,99,161,191,236,24,217,141,246,109,183,63,106,20,33,232,248,26,180,191,120,216,63,172,53,88,178,63,166,96,184,227,154,246,195,191,121,87,41,22,70,130,172,191,91,50,244,231,51,96,200,191,13,152,100,222,2,157,157,63,184,247,246,239,86,204,153,191,186,194,44,26,60,70,170,191,221,255,17,113,109,148,173,63,209,47,255,35,23,196,181,191,89,58,46,85,59,239,187,191,55,85,163,221,26,230,173,63,218,28,8,169,112,225,185,63,191,140,244,38,87,135,190,191,134,70,217,225,20,77,192,63,200,170,145,180,106,228,194,191,85,100,90,230,87,59,176,191,137,75,251,239,168,119,214,191,135,210,15,223,140,187,192,63,233,252,164,228,129,223,203,63,89,26,112,244,161,170,183,191,197,105,22,85,46,109,183,63,224,253,117,23,209,221,178,191,18,123,185,65,174,73,187,63,71,224,129,93,68,202,179,191,177,16,161,187,87,57,178,63,243,32,63,139,60,81,170,63,232,29,70,144,121,17,200,191,3,5,125,63,22,121,191,63,135,12,60,99,161,242,183,63,242,213,152,189,132,35,194,191,82,0,43,114,121,103,160,63,53,32,7,192,171,218,176,191,5,121,167,18,120,142,165,191,167,225,197,93,60,177,168,63,200,34,180,252,12,242,159,191,72,121,12,50,91,34,180,63,98,198,200,222,115,218,170,191,255,240,42,188,88,134,178,191,182,72,109,223,2,242,184,191,9,208,43,228,173,159,168,191,8,135,137,70,163,205,205,191,23,163,0,146,238,94,169,63,92,106,181,77,22,79,213,63,8,222,84,247,47,180,163,63,238,6,219,6,192,244,177,191,101,103,198,49,122,106,163,191,141,236,213,38,125,112,177,63,252,246,164,18,11,146,183,191,250,59,163,130,189,210,179,191,83,121,249,118,116,41,177,63,227,129,235,168,177,53,206,63,243,26,172,95,15,130,180,191,213,77,182,74,18,190,212,191,12,36,224,138,96,42,208,191,120,127,6,162,147,111,208,191,154,10,87,233,6,122,186,191,84,59,32,101,96,230,177,191,90,245,171,172,161,13,234,63,151,22,43,53,46,81,230,191,62,236,250,201,29,120,232,63,100,231,204,159,133,12,203,63,101,141,56,15,88,151,212,63,37,167,165,241,32,206,213,191,234,156,233,52,92,179,222,191,54,168,15,190,177,146,236,63,65,10,105,232,82,18,246,63,229,102,239,236,81,97,217,63,204,179,190,98,63,165,226,63,227,230,147,214,186,184,234,63,55,72,160,219,9,146,195,63,83,96,90,172,87,240,227,63,20,142,200,25,49,31,206,63,208,105,215,73,62,164,231,63,109,162,206,54,59,126,242,63,199,78,113,199,194,209,239,191,127,227,134,75,222,7,241,63,86,30,225,122,177,141,219,191,254,19,184,68,35,38,252,63,47,187,169,32,10,75,229,191,51,194,124,107,72,47,245,63,27,201,162,183,135,193,173,63,246,86,106,208,169,51,222,191,187,155,58,122,176,94,196,63,208,175,139,14,111,134,210,63,209,145,207,169,106,226,215,191,178,45,75,159,187,134,200,191,46,63,161,206,191,105,193,63,146,228,32,233,253,39,226,191,167,254,83,225,104,203,200,191,206,7,8,138,47,113,177,63,243,103,126,219,114,163,214,63,103,37,61,186,187,48,235,191,65,51,167,79,150,168,203,191,111,99,224,190,124,230,205,63,103,139,241,131,88,107,188,191,54,240,13,172,36,118,212,191,146,116,21,133,249,11,202,191,196,137,193,203,235,209,202,191,8,45,153,35,152,94,179,191,233,117,166,222,67,198,202,191,91,191,148,95,1,226,202,191,144,36,247,50,228,112,202,191,216,237,213,117,65,219,201,63,210,181,143,175,206,209,201,191,75,199,165,122,137,125,204,63,183,182,203,86,58,55,205,191,66,121,180,74,4,153,204,191,194,97,139,220,230,108,201,63,219,250,211,87,86,173,205,191,122,143,65,142,40,6,211,63,208,180,104,97,25,108,208,191,24,189,102,178,214,175,185,191,209,157,54,144,0,162,223,63,227,105,80,62,184,43,227,191,13,243,150,16,171,175,220,191,28,176,113,36,19,235,226,191,204,247,211,23,246,161,173,191,112,100,203,248,57,75,208,63,234,242,175,157,60,224,223,191,66,132,64,81,102,71,210,63,65,45,12,172,134,141,209,63,3,135,79,47,202,189,205,63,170,89,186,75,163,243,223,191,170,170,50,41,103,65,216,191,163,81,150,83,112,57,200,63,154,12,103,27,10,131,198,191,128,202,231,178,204,225,207,63,227,97,145,166,112,31,197,191,144,128,197,105,55,217,198,63,227,211,47,98,201,154,213,191,236,144,141,12,180,90,209,63,4,36,248,113,142,30,172,63,108,66,183,209,188,204,190,191,177,255,10,121,163,72,193,63,30,32,42,241,182,1,209,63,184,202,110,218,159,221,208,191,136,253,242,111,238,114,181,191,46,160,136,134,63,42,220,63,183,190,129,9,208,203,201,191,58,247,224,238,161,220,179,191,166,43,157,229,228,200,166,191,158,108,48,227,39,14,194,191,199,81,99,18,40,151,173,63,192,22,90,3,70,196,208,63,107,17,114,215,220,100,198,191,156,28,70,43,172,62,193,191,95,129,232,43,251,9,144,191,22,236,74,231,47,251,185,63,91,39,99,42,39,227,180,191,193,81,211,26,85,197,201,191,3,83,237,222,7,235,196,191,199,114,130,42,105,25,177,63,241,235,234,65,209,212,194,191,95,69,242,102,89,40,199,191,115,98,89,186,205,191,198,191,253,148,57,83,118,70,196,63,51,194,113,66,192,201,196,191,91,169,8,196,135,243,198,63,201,190,98,250,225,62,200,191,35,243,172,210,85,113,197,191,113,211,139,101,59,138,153,63,204,98,217,33,7,254,196,191,119,134,176,99,238,227,212,191,136,155,0,18,93,7,152,191,223,151,93,125,15,56,204,191,102,139,59,176,98,17,216,63,65,92,34,10,47,252,161,63,242,33,222,1,41,90,200,191,222,128,24,203,19,110,195,63,91,221,134,220,29,159,164,191,240,40,93,190,33,246,187,191,133,170,203,63,240,169,203,191,208,82,49,23,135,66,194,63,167,69,157,228,88,34,202,63,72,51,64,234,58,12,202,191,236,13,197,240,47,54,197,63,179,71,140,219,203,28,148,63,140,237,94,32,123,42,182,191,243,174,157,0,17,179,179,63,204,107,169,252,182,31,211,63,38,215,9,172,85,13,194,191,89,2,121,15,64,226,145,63,120,45,255,20,231,45,198,63,94,34,235,180,181,91,147,191,28,168,177,112,33,75,177,63,125,251,90,87,64,85,181,63,187,72,187,24,5,10,196,191,43,77,201,92,94,10,182,191,53,248,125,149,206,99,194,191,6,67,152,231,104,193,195,63,93,162,151,219,75,230,187,63,84,86,159,246,44,107,171,63,149,124,114,232,113,16,176,63,204,242,110,114,89,136,202,191,172,38,152,61,136,190,198,63,199,0,191,123,235,50,185,63,25,14,52,38,106,67,167,63,140,44,111,113,89,77,192,63,230,183,244,221,28,206,196,191,171,0,36,7,158,115,192,191,149,243,61,13,207,32,192,63,161,243,27,48,219,188,187,63,190,134,74,103,243,189,182,63,224,147,52,179,195,146,182,191,46,152,18,165,188,198,183,191,215,102,170,71,105,171,202,191,210,49,215,232,171,167,204,191,152,69,140,234,210,228,178,191,246,161,224,69,49,207,185,63,196,236,68,71,68,120,193,63,49,27,241,135,187,4,210,191,17,218,190,222,95,152,190,63,224,9,4,243,81,40,193,63,125,77,108,17,35,129,195,191,87,71,17,46,144,88,165,191,37,181,209,71,206,76,193,63,184,2,36,108,109,82,190,191,226,63,5,60,98,145,172,191,111,176,194,33,213,99,170,63,201,102,253,145,178,200,193,191,203,158,36,208,238,204,169,191,23,93,196,237,20,251,190,63,223,3,189,53,40,7,190,63,168,221,48,199,47,244,182,63,154,218,223,25,109,27,198,191,111,9,185,110,40,246,171,63,175,192,93,18,78,98,192,191,41,220,145,88,44,94,179,63,30,169,4,157,18,62,192,191,120,116,30,122,119,144,182,63,133,173,176,212,233,170,163,63,28,50,154,73,142,251,168,63,127,13,94,187,209,67,189,191,88,223,101,174,213,140,183,191,30,15,81,188,179,206,160,63,205,5,151,49,18,44,187,191,114,84,76,48,246,183,161,63,18,79,66,18,248,205,182,191,175,59,215,226,225,138,164,63,201,216,152,159,7,207,172,63,170,243,1,166,152,14,177,63,98,224,225,89,125,52,169,63,188,32,164,80,86,188,181,63,167,141,177,212,19,8,168,63,4,182,226,85,208,197,169,191,188,117,91,104,152,32,182,63,72,223,134,76,243,170,173,191,76,73,43,187,107,8,172,63,126,129,47,71,26,32,174,63,35,88,187,255,128,254,200,191,65,221,73,1,151,171,202,191,38,105,171,137,202,23,183,191,191,33,65,123,123,159,195,191,156,13,200,206,39,173,206,191,160,11,132,217,113,76,188,63,149,68,148,159,216,130,193,191,201,218,114,153,129,198,176,191,124,243,87,179,169,216,197,63,68,5,42,176,183,3,176,63,61,58,170,143,252,178,183,191,37,41,7,123,79,212,179,63,192,251,45,61,132,65,192,63,20,211,211,246,109,34,166,63,165,113,117,104,91,215,187,191,249,154,226,61,8,148,171,191,167,152,230,99,100,94,189,63,177,73,231,53,194,173,184,63,143,43,199,66,237,153,174,63,236,67,138,18,241,167,171,63,42,148,76,15,119,174,183,191,65,30,166,63,31,60,173,63,26,115,164,84,234,22,184,63,252,61,68,167,158,136,176,191,97,237,189,28,26,217,188,63,30,195,17,173,244,166,172,63,72,22,38,176,208,44,178,63,195,43,70,58,127,138,202,191,152,57,168,122,12,89,201,63,164,165,187,186,23,69,175,191,2,67,72,159,191,129,200,191,129,25,35,36,131,225,196,63,160,87,31,36,28,212,177,191,117,154,227,118,166,241,187,63,206,94,74,104,54,245,192,63,116,5,113,227,63,203,187,191,216,132,90,96,214,205,181,191,63,141,209,30,117,60,181,63,255,182,177,213,0,255,166,63,132,127,177,161,48,14,182,63,140,240,0,83,120,208,170,191,252,85,149,171,238,208,176,63,185,84,103,252,83,118,184,63,53,129,32,3,177,220,178,63,244,32,163,174,184,223,170,63,21,64,118,5,232,119,181,191,123,18,88,217,83,179,200,191,107,49,70,97,109,142,203,63,252,92,200,183,127,165,195,191,245,75,204,13,33,154,199,63,116,206,125,88,252,156,170,63,139,169,0,9,169,77,190,191,79,6,121,70,10,82,176,63,57,211,242,131,96,25,171,63,45,102,172,52,207,253,168,191,28,11,216,101,64,121,181,191,85,103,54,19,107,7,203,191,147,165,195,168,126,9,204,191,99,162,194,29,80,43,199,191,227,14,203,40,224,212,197,191,66,160,190,195,196,86,184,63,88,207,108,66,189,229,166,63,215,244,16,53,221,204,182,63,209,71,152,108,122,204,171,63,225,178,137,136,172,115,233,63,123,99,74,245,67,246,229,191,190,231,55,244,255,0,213,63,164,69,149,70,135,176,244,63,10,31,173,200,136,234,177,191,200,192,7,155,226,0,250,191,235,44,167,117,160,99,211,191,115,133,28,183,28,248,237,63,209,7,38,118,120,61,192,191,53,214,168,132,71,36,208,191,237,213,221,54,184,65,176,63,149,26,30,161,67,57,197,63,231,223,209,180,252,213,223,63,137,8,50,40,161,47,215,63,32,197,35,226,21,45,224,191,97,15,222,122,2,129,224,191,123,205,189,43,168,218,212,63,27,189,250,171,153,218,203,191,220,215,199,236,24,145,210,63,236,5,152,31,138,219,225,191,234,168,81,152,198,73,205,63,123,95,250,242,248,87,209,191,69,202,175,184,132,177,229,63,219,37,132,123,181,225,197,191,109,191,229,128,84,188,216,191,62,230,183,48,202,34,201,63,15,20,143,194,120,221,212,191,83,31,11,82,45,58,214,63,223,137,233,185,37,2,185,63,142,27,43,8,184,188,199,63,8,206,100,128,206,162,212,63,90,113,11,140,160,92,226,191,43,2,231,165,151,132,209,191,89,219,249,178,163,41,207,63,79,54,230,144,96,190,150,63,129,208,179,110,34,37,209,191,152,51,36,89,225,211,171,191,110,177,132,60,173,94,180,191,146,83,45,180,238,107,183,63,179,173,31,48,137,69,219,63,219,22,43,156,175,13,197,191,0,137,129,46,209,118,170,191,222,236,126,205,153,197,187,191,154,29,97,215,140,185,176,63,155,206,76,187,225,82,212,191,38,69,13,33,145,152,177,191,184,19,100,69,238,67,180,191,164,238,204,7,58,75,200,63,52,49,144,12,118,221,211,191,219,97,163,145,50,215,191,63,80,82,146,194,246,60,204,191,81,43,246,213,156,153,177,63,234,125,49,137,193,207,191,191,25,40,163,14,139,11,206,63,197,9,204,194,73,196,187,63,27,102,50,103,16,67,201,191,72,161,215,182,164,187,210,191,187,15,241,234,9,142,199,63,17,171,105,225,231,139,206,191,22,104,130,81,198,1,204,63,139,77,229,7,110,149,177,63,56,67,199,225,104,5,186,191,164,218,61,28,106,73,202,191,73,102,107,44,214,196,205,63,165,147,56,62,46,65,205,191,197,184,13,154,198,5,203,191,123,229,140,45,175,127,208,191,193,45,225,206,76,43,177,63,176,240,188,131,232,153,224,191,9,76,36,48,19,10,210,191,61,249,45,199,93,4,213,191,8,137,119,248,53,112,195,63,58,195,13,50,210,147,209,63,186,87,63,100,252,24,184,63,9,141,103,83,244,98,196,191,78,97,218,140,113,157,171,63,78,29,66,245,241,201,192,63,198,204,168,109,247,141,173,191,8,213,3,245,207,39,197,191,178,213,188,181,56,45,192,191,50,43,76,132,191,131,202,191,173,134,192,160,119,83,203,63,123,141,211,224,104,83,152,63,228,5,92,212,165,13,205,191,204,119,144,255,166,134,189,63,242,62,122,192,169,9,193,63,225,38,33,77,132,3,208,191,192,253,173,125,66,172,188,63,157,162,199,12,121,135,193,191,88,2,28,32,18,74,205,63,5,184,49,151,215,167,169,63,254,141,175,197,249,90,197,191,52,248,24,45,87,109,195,63,119,78,131,71,39,205,174,191,247,195,39,162,224,218,190,63,116,128,59,215,104,239,166,63,132,2,209,98,129,39,199,63,250,48,51,203,76,194,201,191,189,33,38,64,87,72,180,191,98,190,141,234,167,182,161,191,205,154,9,194,198,8,191,191,61,89,4,101,69,83,184,63,242,10,231,232,234,56,203,191,128,132,23,52,124,126,197,63,72,97,234,244,155,212,201,63,214,235,44,109,240,160,188,191,31,241,56,32,100,218,184,63,176,167,247,175,26,55,200,191,154,93,71,216,214,183,198,63,243,150,84,61,122,232,190,63,153,128,71,134,118,222,198,191,223,74,115,185,164,33,183,191,249,173,149,42,247,70,178,63,46,246,74,104,239,136,192,191,110,73,4,125,199,76,202,63,148,187,74,162,184,173,188,63,128,204,221,254,81,250,187,191,2,175,50,194,220,58,190,63,252,179,255,197,48,42,187,63,185,52,2,244,95,137,176,191,226,122,147,65,181,60,177,191,53,86,247,210,97,138,210,191,183,84,182,138,160,60,185,63,183,101,230,177,85,248,177,191,56,121,15,117,204,81,191,63,28,41,84,149,98,66,166,63,190,185,150,246,150,171,192,191,187,76,146,16,139,86,190,191,213,133,91,148,169,29,208,191,239,87,40,232,145,190,186,63,25,205,218,1,18,248,192,63,178,129,0,251,0,146,178,191,118,110,93,196,82,13,169,191,51,254,182,95,176,228,196,191,252,85,46,173,1,217,167,63,113,214,44,87,137,166,206,63,222,127,247,68,212,168,207,191,229,125,92,189,55,156,198,191,47,54,145,16,232,15,181,191,57,214,87,229,16,70,151,63,32,191,237,28,242,242,151,191,68,224,55,79,82,74,199,191,151,35,164,149,207,96,179,191,60,73,65,61,5,21,194,63,213,124,235,28,208,226,154,63,96,186,94,149,122,113,195,191,218,114,168,216,20,53,153,191,22,27,203,127,92,191,202,63,77,180,233,139,93,135,138,191,48,40,104,49,54,88,172,191,230,181,45,195,221,6,180,63,218,119,162,225,183,141,192,191,19,235,149,103,49,152,138,63,206,134,21,232,31,46,201,63,10,182,0,0,56,33,184,63,122,92,242,234,53,125,195,191,90,52,84,22,167,213,162,191,106,198,230,120,145,255,150,191,141,122,164,80,45,77,176,63,133,39,15,61,133,45,184,191,10,210,94,49,226,5,150,63,145,215,223,180,118,230,178,191,97,231,210,205,216,179,165,63,144,135,68,188,179,51,191,191,98,118,19,188,53,96,163,191,69,166,233,41,180,130,185,63,109,216,117,234,244,92,160,63,167,62,90,228,23,4,179,63,19,171,82,159,70,153,191,191,236,96,148,28,235,240,186,191,144,39,55,190,85,79,187,191,132,200,147,223,221,122,170,63,151,45,207,134,236,131,182,191,99,36,51,170,175,173,189,63,109,246,96,103,42,85,172,191,175,118,229,186,211,5,176,191,70,57,150,121,196,244,169,63,218,238,134,111,48,9,189,191,206,34,250,13,54,115,155,191,238,255,137,36,216,108,174,63,237,157,180,142,108,21,173,191,93,239,237,106,42,54,177,63,32,238,88,49,28,241,187,191,157,15,132,48,140,68,176,63,170,32,68,120,210,84,184,63,29,178,45,46,48,252,159,63,93,114,50,116,178,5,176,191,39,123,67,85,111,36,194,63,67,226,122,145,91,199,151,191,56,230,221,86,149,18,174,63,178,215,116,47,221,225,177,191,191,191,158,78,115,81,176,63,121,249,12,210,80,247,180,63,105,183,193,230,64,217,186,191,144,122,63,189,179,137,184,63,146,37,121,140,40,50,185,63,247,218,107,114,7,234,184,191,244,206,158,174,187,252,176,63,213,91,13,233,127,23,172,191,117,68,172,99,181,242,181,191,165,235,186,205,189,33,170,191,75,217,166,229,2,159,182,63,55,120,232,51,21,65,191,63,239,106,7,177,177,22,184,63,89,245,116,3,216,197,199,191,247,35,25,228,118,143,199,191,47,56,5,122,247,130,197,191,95,118,229,129,198,44,195,191,0,248,123,24,227,112,185,63,180,157,55,238,124,166,163,191,42,2,244,106,45,15,181,63,15,216,68,252,26,114,168,63,219,80,173,122,140,182,168,191,157,185,176,128,215,13,183,63,27,108,240,125,99,237,179,63,161,125,0,106,48,149,178,191,106,80,46,47,191,224,177,191,231,216,93,176,21,142,183,63,159,178,87,218,49,124,185,63,159,61,49,72,45,58,164,191,203,105,83,26,102,14,187,63,197,80,6,103,226,68,176,191,201,51,172,81,143,97,180,191,26,223,117,183,156,103,170,63,195,241,92,166,180,222,178,63,33,29,64,215,121,246,166,63,156,252,46,55,237,117,167,63,30,103,147,177,199,78,176,63,109,111,114,204,57,67,178,63,24,240,222,180,72,8,177,63,102,222,177,56,50,222,197,191,205,152,176,50,118,54,201,191,7,194,90,155,144,16,176,191,175,9,221,56,155,132,194,191,157,138,233,60,217,110,198,191,250,205,75,93,114,61,182,63,201,3,30,164,105,52,178,63,108,49,8,90,88,101,175,63,124,85,52,70,28,54,180,63,217,108,41,156,252,223,178,63,236,45,153,91,180,235,164,191,226,131,182,252,20,202,164,191,195,247,4,152,87,33,183,191,54,107,56,220,97,92,200,191,76,93,218,58,161,43,199,63,203,69,102,13,159,68,197,191,115,132,106,231,15,71,196,63,178,223,47,121,50,25,174,63,224,204,247,249,19,242,198,191,123,136,20,255,184,182,200,63,22,60,56,7,177,185,195,191,123,51,221,64,50,218,196,63,227,108,47,5,106,48,201,191,128,232,9,52,31,224,200,191,74,94,40,195,85,84,197,191,151,187,229,227,239,95,197,191,246,241,7,103,89,177,196,63,163,127,51,155,169,214,204,63,129,211,46,41,234,149,239,63,64,132,187,72,66,186,239,63,136,181,57,99,129,119,209,191,48,192,129,147,213,100,200,191,133,220,71,198,48,220,151,63,43,141,215,144,11,46,175,191,57,227,224,36,55,203,187,191,84,153,32,174,100,86,192,191,114,250,98,130,33,56,172,191,174,64,44,123,191,101,192,191,12,24,28,8,5,77,199,63,1,158,139,6,138,161,205,63,28,66,20,175,190,195,192,191,95,29,221,139,242,168,237,63,145,236,22,34,251,11,237,191,105,65,128,77,187,105,190,191,255,161,29,228,251,111,198,63,46,129,146,157,66,32,154,191,139,36,115,124,250,142,186,191,227,84,252,55,42,32,195,191,79,155,51,27,55,185,189,63,161,213,181,172,119,35,178,191,243,40,83,45,244,245,187,191,182,217,254,156,116,129,180,63,211,57,160,15,4,33,170,63,231,35,218,108,16,11,196,191,191,85,177,183,183,131,127,63,141,71,126,236,241,219,232,63,174,29,120,27,124,213,233,191,233,89,141,45,159,202,189,63,83,94,171,0,1,182,158,63,143,106,91,219,248,34,169,191,222,52,116,32,65,86,185,191,54,115,218,202,220,96,194,63,127,228,251,32,31,155,161,191,185,175,140,197,225,139,153,63,174,120,6,238,175,196,162,191,177,65,25,79,174,133,194,191,110,210,244,152,202,247,129,191,66,48,185,39,220,247,229,63,76,25,35,170,232,202,137,63,118,66,254,144,105,65,229,63,174,194,60,218,219,244,165,191,147,17,113,219,191,238,156,191,229,206,175,95,248,116,191,63,115,148,172,116,216,78,172,63,172,99,48,206,184,66,128,63,53,103,67,176,206,111,167,191,170,112,138,236,206,44,172,191,102,53,9,235,116,164,177,63,186,134,22,242,181,34,226,63,212,180,245,125,155,234,226,63,252,138,22,210,227,9,132,191,186,163,147,21,8,140,184,63,5,105,68,96,71,171,180,191,66,236,196,15,67,238,163,63,43,46,216,21,48,17,150,191,135,153,145,199,66,140,175,63,70,71,214,130,195,47,152,191,146,61,142,128,231,168,224,63,95,127,27,12,73,156,145,191,238,254,28,62,135,192,223,191,39,153,63,155,235,236,162,63,102,124,54,152,4,28,184,191,181,233,61,163,174,65,148,63,214,1,11,110,58,162,152,63,60,200,154,6,95,109,221,63,108,4,88,113,220,237,165,191,167,238,134,226,69,191,220,191,185,249,79,143,201,48,171,191,162,234,36,87,103,59,221,63,222,74,242,174,21,200,218,63,192,44,65,0,96,87,167,191,39,153,27,78,97,102,192,191,217,231,33,177,244,108,165,63,241,146,215,77,206,22,193,63,19,18,99,253,58,55,168,191,123,223,218,97,24,209,174,63,52,96,54,77,114,118,178,191,103,51,56,73,66,45,192,191,173,163,206,203,137,5,178,63,184,95,118,14,165,69,193,63,66,55,83,34,12,5,178,63,120,150,114,214,91,164,156,191,71,80,222,207,224,150,169,191,131,161,204,230,179,105,183,63,11,110,186,234,217,255,155,63,132,231,11,136,31,15,175,63,182,237,254,244,173,90,184,191,160,143,254,34,127,196,169,191,24,178,4,150,80,82,173,191,228,115,217,68,98,22,131,191,36,92,159,194,39,145,183,63,110,190,153,223,228,195,129,63,10,69,135,173,138,40,185,191,5,191,104,246,230,148,149,63,100,173,209,131,250,163,173,191,31,43,66,113,252,141,159,63,212,50,246,20,109,36,169,63,81,62,153,121,170,1,168,191,91,119,57,88,66,251,152,191,173,121,151,219,227,137,173,191,200,238,66,75,24,141,169,63,110,91,217,8,138,141,147,63,68,158,217,187,31,62,149,191,115,168,27,195,179,44,145,63,176,83,5,58,254,109,175,191,14,199,174,0,178,130,139,191,18,255,27,65,137,32,177,63,71,75,239,10,177,223,149,63,16,31,1,245,149,86,150,191,111,118,183,168,209,15,152,191,227,143,158,142,170,139,157,63,6,166,153,101,83,65,156,63,217,24,35,154,26,207,156,63,107,80,29,47,59,214,142,191,210,129,138,199,138,231,173,191,18,115,136,222,102,14,188,191,223,119,193,94,52,214,141,63,139,32,14,171,133,47,177,63,4,124,170,147,244,189,177,63,72,29,76,165,139,96,132,191,14,171,193,51,102,83,182,191,57,93,128,48,174,113,189,191,42,50,181,87,51,5,133,63,70,167,76,205,178,115,178,63,46,105,82,121,12,7,186,63,200,159,92,103,76,90,122,191,204,155,22,82,208,206,158,191,34,222,220,205,81,22,174,191,39,1,179,95,165,43,183,63,217,202,20,144,80,89,121,63,161,184,139,65,78,238,154,63,217,18,111,35,198,0,160,63,26,167,56,226,27,105,186,63,75,160,95,5,162,149,175,191,33,216,155,90,220,160,172,63,144,161,136,31,39,237,174,191,133,25,113,219,224,107,152,191,218,192,226,149,236,72,163,191,4,176,114,236,84,178,176,191,116,98,250,170,100,204,169,63,164,165,236,223,68,205,159,191,238,184,84,104,180,36,175,63,31,209,34,165,37,75,181,191,74,105,248,38,46,102,174,191,132,135,164,116,237,236,175,191,139,236,79,1,83,99,177,191,50,54,102,11,98,188,167,63,125,164,245,164,79,202,171,191,217,77,151,5,36,143,187,191,42,232,151,124,214,219,178,191,45,211,197,247,180,226,184,191,88,49,206,50,205,71,180,191,159,202,17,194,199,248,155,191,240,129,137,53,62,3,157,191,127,6,242,115,70,97,171,63,157,4,33,74,52,105,149,191,48,101,246,217,214,168,170,191,89,76,187,92,142,22,171,63,82,151,125,215,63,120,149,63,122,232,107,11,253,232,174,63,207,66,230,36,200,99,178,63,239,37,179,88,166,59,154,63,93,50,186,225,216,180,162,63,37,21,96,108,2,252,161,191,158,26,118,229,22,41,145,63,153,129,31,37,211,169,167,63,56,196,199,29,61,151,162,191,217,35,86,231,94,234,167,191,103,151,118,190,169,57,175,191,110,174,204,200,228,211,170,63,99,34,252,115,115,100,177,191,102,183,180,248,16,13,180,191,60,189,203,74,140,183,180,191,9,247,71,39,128,103,164,63,188,69,221,242,135,110,169,191,85,216,74,227,190,84,185,191,135,214,172,185,190,17,169,191,71,68,98,219,198,57,187,191,158,36,142,46,151,152,167,191,247,69,55,103,64,136,166,63,201,227,184,160,163,3,172,191,183,74,139,66,131,73,161,63,231,181,123,53,127,68,157,191,224,146,87,134,46,109,174,63,67,223,124,106,178,28,154,191,44,76,15,110,99,69,179,63,7,152,60,73,210,62,169,63,121,93,115,128,215,227,153,63,147,33,114,181,138,62,171,63,156,220,103,30,16,56,170,191,130,75,202,160,215,3,165,191,123,189,245,176,80,22,176,191,145,99,93,15,23,26,188,191,107,132,249,136,189,38,170,191,56,11,129,202,167,18,182,63,18,213,106,80,26,1,170,63,204,10,146,216,221,124,165,63,222,145,148,193,228,27,187,191,161,81,65,219,20,135,173,191,248,182,160,48,249,22,185,63,19,133,155,38,83,128,173,63,28,255,42,154,52,126,171,63,98,75,205,107,189,9,156,191,118,49,248,100,1,149,151,63,167,24,75,83,188,178,166,191,91,93,38,163,122,223,162,191,206,55,89,241,89,240,165,63,254,146,45,250,183,113,175,63,116,41,133,200,49,3,156,191,96,155,11,155,180,138,172,191,141,112,155,102,39,211,152,63,180,234,21,251,166,176,159,63,102,81,237,195,198,233,146,191,174,57,142,245,28,32,159,191,214,215,250,238,95,88,164,191,200,128,159,120,7,217,170,63,223,134,181,178,248,104,171,191,253,21,156,101,62,90,161,191,141,55,103,104,192,231,183,191,177,139,95,150,13,122,175,191,35,188,67,251,215,42,184,63,233,235,141,253,209,155,188,191,132,182,134,202,154,204,173,191,158,145,209,138,15,99,186,63,154,25,112,230,179,193,155,191,192,250,230,14,221,46,154,63,174,102,38,225,186,133,161,63,4,144,64,37,207,107,170,63,210,128,228,100,85,99,161,191,52,191,70,104,255,209,164,191,201,172,50,220,89,155,163,191,118,246,112,237,26,56,151,191,255,107,69,62,162,12,163,191,44,170,82,131,5,30,171,63,27,127,4,132,15,116,183,191,222,116,157,180,14,156,174,191,123,182,124,186,153,141,183,191,152,36,139,104,8,135,172,191,179,177,35,170,43,66,190,191,163,206,251,238,218,144,164,191,87,34,4,217,155,108,187,191,124,40,42,164,212,70,168,191,196,118,238,253,226,194,161,191,0,247,216,173,156,182,153,191,42,193,250,213,171,116,160,63,93,153,230,35,29,101,172,63,241,186,52,13,203,84,160,63,252,33,5,74,238,65,168,63,224,160,221,152,82,224,166,191,242,241,9,121,63,252,160,191,222,150,239,19,9,190,157,191,188,133,218,210,175,142,160,191,237,165,169,76,229,114,193,191,25,53,159,218,190,131,208,63,215,169,166,216,214,246,217,191,212,244,130,120,227,64,209,63,131,85,170,199,31,35,197,63,231,187,131,191,155,9,199,191,79,138,216,208,81,227,244,63,241,155,38,209,96,102,232,191,172,232,171,176,56,252,11,192,83,103,31,11,251,253,243,63,89,202,35,185,151,138,10,64,121,81,57,204,53,120,247,191,218,87,59,3,169,217,230,63,215,247,205,17,203,234,195,63,41,164,196,151,247,168,208,191,115,8,69,47,96,61,206,191,86,199,154,103,188,197,247,191,215,167,76,140,86,48,243,63,156,48,116,91,195,80,227,191,123,210,144,147,197,156,221,191,181,57,218,134,123,188,187,63,178,199,197,20,82,251,211,191,126,39,69,124,45,46,201,191,230,234,62,239,128,162,207,63,90,142,150,178,195,128,178,63,223,19,112,50,205,183,196,63,61,15,67,94,145,213,183,191,67,108,86,116,78,35,208,63,105,96,8,155,89,155,212,63,124,133,92,132,58,153,223,191,5,153,215,166,108,204,224,63,67,204,217,171,12,6,211,191,214,156,13,16,244,211,219,63,145,33,43,180,30,33,206,63,114,244,32,83,174,217,225,191,153,215,188,138,246,147,218,63,126,117,144,6,201,149,218,191,170,143,41,216,254,34,215,63,242,180,124,136,174,47,225,191,26,109,210,95,16,136,219,191,239,51,153,72,80,73,203,63,39,104,76,101,195,169,203,63,114,51,7,205,163,190,213,63,49,121,61,195,186,120,208,63,27,218,73,130,117,122,191,191,50,186,36,15,151,68,205,191,187,160,30,131,63,55,218,191,87,168,117,248,67,183,182,63,83,247,204,194,201,23,188,191,155,48,243,227,8,96,214,191,162,69,166,72,219,49,165,191,251,195,152,195,4,213,193,63,21,50,231,59,220,250,188,63,253,89,85,68,145,70,214,191,167,72,16,15,39,248,190,191,58,160,146,77,65,93,191,63,117,103,29,75,75,8,213,63,71,76,234,111,151,111,188,191,141,197,85,151,139,16,194,191,8,30,225,237,194,123,207,191,61,92,211,193,73,231,163,63,117,10,24,150,232,90,204,191,247,12,26,249,2,0,201,191,23,14,189,198,207,237,180,63,215,226,74,224,20,63,152,191,14,109,73,9,165,218,189,191,177,249,246,83,75,34,196,191,10,232,151,190,11,217,215,191,9,185,34,84,230,240,194,191,116,37,3,164,9,209,187,63,127,33,49,242,3,212,192,191,96,159,57,151,122,70,188,191,136,11,132,93,116,228,139,63,14,155,61,234,181,224,131,63,163,223,180,196,22,207,194,191,143,241,217,130,77,223,161,63,126,87,173,81,123,170,177,63,104,1,119,190,110,122,214,191,227,142,227,135,84,210,177,63,198,184,199,60,225,102,195,191,178,87,254,205,137,93,184,63,134,212,111,223,215,159,175,191,14,162,222,159,173,194,193,63,93,130,202,25,72,186,200,191,46,201,17,83,0,86,178,191,121,115,208,224,127,163,211,63,4,254,83,211,128,74,185,63,228,152,146,147,11,225,188,63,203,66,75,94,209,9,183,191,167,95,63,194,225,84,166,63,65,158,208,255,137,112,210,191,8,23,236,110,9,15,161,191,34,32,129,124,180,124,201,63,44,215,58,225,166,147,176,63,65,161,4,202,29,243,179,191,98,57,151,65,202,91,205,191,59,199,93,252,184,242,209,191,207,158,12,98,2,81,157,63,240,190,127,48,212,251,169,63,36,77,176,64,79,225,210,191,110,60,164,105,189,83,225,191,134,223,54,204,81,148,203,63,147,233,135,128,49,180,224,63,24,119,84,101,210,143,210,191,143,40,3,130,203,106,176,191,57,21,183,247,146,25,163,63,240,215,215,139,14,226,188,191,180,138,64,130,184,78,176,191,154,59,153,214,109,167,174,63,202,10,68,66,72,5,199,191,244,201,251,14,178,115,174,63,57,129,101,142,169,65,184,191,64,106,65,2,35,42,173,191,72,1,53,255,88,0,178,63,189,19,54,0,120,3,202,191,255,146,141,66,250,76,199,63,31,235,74,24,79,172,199,63,200,98,180,202,3,218,194,191,187,75,85,35,31,245,144,63,106,166,38,50,1,232,146,191,156,146,130,134,67,47,182,191,54,153,7,39,224,75,168,63,207,152,248,183,149,158,182,191,81,141,223,70,253,227,140,191,185,94,157,222,95,113,194,191,235,139,54,228,217,222,208,63,67,49,108,167,99,111,160,63,238,2,81,7,110,125,190,63,194,51,249,209,154,173,142,191,241,176,2,41,37,146,182,191,69,84,64,181,245,119,188,63,133,48,33,198,25,17,162,63,17,155,141,17,110,4,193,191,183,228,230,104,31,108,186,191,157,121,136,90,96,182,189,191,59,185,124,116,42,190,187,191,178,124,250,174,229,151,189,63,169,110,154,66,56,47,191,63,7,163,47,79,114,209,189,191,112,114,121,206,124,229,185,191,30,137,41,101,199,153,181,63,239,92,25,39,22,133,171,191,189,253,151,137,14,152,187,63,88,112,42,178,238,228,172,63,5,19,187,251,149,154,202,191,77,247,28,131,229,217,179,63,62,7,0,163,51,30,183,191,203,250,102,164,233,81,169,63,132,111,165,253,115,107,188,63,116,121,133,18,234,56,157,63,79,26,9,215,200,148,182,191,5,79,188,235,219,73,152,191,99,181,199,72,178,223,188,63,193,50,102,90,29,234,183,63,59,23,242,36,28,0,173,191,237,140,223,82,141,36,186,191,69,52,230,9,159,253,202,63,244,195,154,208,0,113,186,63,187,5,207,17,73,29,179,191,58,239,145,170,51,109,177,191,179,69,79,141,149,200,177,63,151,29,12,217,111,8,180,191,166,64,189,221,209,49,177,191,121,210,72,243,240,50,172,63,17,242,165,253,2,202,202,191,68,176,19,180,154,155,179,191,204,25,62,86,17,184,185,63,189,152,164,69,198,153,164,63,52,177,44,6,230,242,175,191,225,174,64,62,89,25,159,191,94,81,180,202,114,151,188,191,156,18,27,21,21,255,205,191,154,206,123,22,26,127,192,191,111,205,141,14,253,248,207,191,184,175,245,146,161,245,196,63,48,158,135,189,120,92,215,63,60,9,181,213,212,56,202,191,69,145,9,49,85,80,184,191,214,255,96,243,132,222,191,63,26,165,123,14,220,85,174,191,237,153,196,40,105,88,196,63,16,243,130,25,167,134,134,63,80,195,6,77,232,136,184,191,93,29,89,106,126,161,177,63,105,17,78,14,182,142,130,191,186,94,219,136,81,60,172,191,108,236,50,247,42,51,180,63,56,44,36,253,106,160,129,63,129,246,123,208,110,163,129,191,209,184,81,28,77,231,186,63,8,91,100,218,251,190,166,191,133,57,34,243,93,219,174,191,165,196,77,117,84,228,178,63,127,154,127,241,221,13,162,191,45,68,54,111,75,75,165,63,190,185,10,104,152,219,188,191,234,161,122,153,81,250,160,63,251,188,54,124,145,229,173,191,188,118,105,237,208,194,160,63,121,219,228,96,9,223,160,191,70,254,220,130,206,176,159,63,135,24,114,86,196,206,176,191,89,177,195,111,46,59,182,63,155,189,77,34,109,99,179,191,98,16,5,9,64,95,171,63,198,158,166,172,109,178,152,191,253,101,72,48,132,3,169,63,197,128,108,225,76,133,164,191,131,30,53,124,255,132,169,63,41,136,66,214,73,242,170,191,91,110,182,110,63,121,194,63,34,115,79,173,160,24,202,63,200,253,47,226,224,148,186,191,8,141,23,190,34,236,191,191,88,81,36,43,253,193,190,191,95,253,133,59,157,239,184,63,222,186,42,3,186,0,186,191,76,220,16,67,144,249,184,191,117,50,212,238,205,28,184,191,203,192,97,203,52,149,185,191,39,91,111,56,89,117,180,63,83,193,221,150,143,22,185,63,6,222,28,81,130,174,191,63,80,56,96,207,118,222,182,191,63,240,204,219,171,216,188,191,41,186,121,34,6,246,188,191,34,29,69,71,202,86,195,191,68,11,235,190,85,94,180,63,203,216,203,156,192,42,178,191,92,57,27,48,230,52,185,191,76,234,137,255,216,39,192,191,109,17,65,39,7,36,176,191,159,175,254,36,190,153,174,63,135,9,135,24,248,242,166,63,56,230,138,14,47,29,181,191,176,57,161,69,8,155,188,191,82,11,200,216,54,123,194,191,64,71,66,67,81,89,194,63,103,98,168,3,169,64,179,191,73,103,119,247,99,171,180,63,199,96,24,253,55,14,192,191,205,38,168,158,14,245,190,63,73,96,142,168,96,80,178,191,117,82,154,207,137,220,170,191,0,137,109,228,104,107,169,191,89,74,192,74,152,41,173,191,39,7,130,235,39,94,193,191,71,3,117,166,203,59,197,63,241,195,245,207,208,239,167,191,9,98,47,119,97,75,166,63,60,133,164,174,125,171,190,191,9,33,176,97,144,148,192,63,246,9,216,39,141,48,194,191,197,184,110,60,214,52,195,191,114,202,56,248,156,137,192,191,224,114,216,120,250,218,192,191,170,139,240,160,246,116,178,191,20,35,62,141,125,187,209,191,125,171,66,58,9,26,197,63,248,104,117,218,236,234,226,63,227,54,218,70,56,74,217,63,204,169,189,9,173,162,211,191,48,104,64,7,125,17,241,63,228,232,238,236,223,52,200,63,27,98,243,232,147,75,226,63,230,68,53,51,118,100,215,191,187,120,3,54,95,69,187,63,66,230,86,37,38,225,217,191,242,61,177,138,17,61,209,63,91,255,158,56,40,251,179,191,21,225,245,244,80,4,193,191,228,121,128,95,151,161,219,63,42,144,204,118,45,34,196,191,198,243,0,126,212,64,176,191,209,159,187,249,136,226,193,191,47,16,184,57,136,139,193,63,91,4,249,203,234,138,194,191,211,68,70,240,97,85,192,63,245,139,99,0,243,107,220,191,236,150,200,6,239,143,160,191,81,56,18,214,47,249,160,63,233,153,199,120,156,4,203,191,13,109,156,108,152,182,204,63,158,25,74,128,254,0,149,63,10,104,46,1,131,55,166,191,32,139,191,253,145,192,155,63,187,106,96,228,81,90,206,191,4,198,13,190,174,3,196,63,92,103,160,161,145,120,199,191,184,146,232,156,189,240,200,191,56,16,198,76,40,192,178,191,90,90,105,108,191,53,200,63,146,28,37,237,215,159,201,191,177,161,35,154,59,132,198,191,54,95,170,214,132,95,193,63,181,204,125,31,6,179,199,191,158,217,182,124,210,106,201,63,215,53,235,57,203,38,171,63,207,88,186,127,114,108,185,191,222,172,43,172,211,127,199,191,49,216,144,158,236,233,200,63,21,5,16,247,164,127,200,191,17,9,66,131,68,62,201,191,97,1,51,75,119,64,179,191,110,250,200,23,185,131,185,191,174,3,191,102,97,145,194,63,228,127,113,125,6,106,213,191,77,169,201,239,22,244,190,63,241,232,204,49,167,235,208,191,16,179,234,68,113,90,200,191,65,224,254,106,50,252,192,63,60,200,164,31,34,158,197,191,200,110,33,199,26,140,213,63,232,100,78,72,66,226,176,191,146,97,105,241,135,193,195,191,136,95,145,168,130,21,181,63,251,95,83,113,237,170,205,63,87,250,242,234,246,4,198,191,37,150,187,60,45,7,201,191,186,134,88,190,49,229,208,191,77,43,156,107,27,100,205,191,127,78,209,172,72,67,196,63,28,100,51,194,158,10,208,63,116,230,100,240,69,110,206,63,74,132,249,203,205,245,195,191,41,77,159,239,116,14,171,191,22,174,97,58,105,176,198,191,226,94,38,217,154,122,190,191,98,219,220,249,63,130,198,63,20,210,244,153,182,49,194,63,167,171,249,140,34,116,194,63,149,146,105,121,238,153,205,191,247,1,248,148,111,86,151,191,94,226,212,175,55,225,178,63,152,85,46,254,54,103,208,191,162,171,56,136,137,44,179,191,95,175,160,2,118,91,195,63,189,129,179,251,44,24,184,191,171,3,49,45,92,18,182,63,84,144,215,232,214,119,170,63,87,56,180,137,139,42,189,63,0,24,233,210,58,96,169,191,40,66,45,4,175,15,189,191,153,229,122,61,32,122,198,191,23,167,115,251,0,69,185,191,117,85,210,99,178,11,196,63,21,147,209,45,6,248,149,63,47,252,185,27,22,35,175,63,82,34,136,180,152,163,203,191,125,225,72,224,83,239,195,191,140,73,108,90,99,232,206,191,95,130,192,203,249,216,182,63,150,134,120,174,114,15,181,191,2,17,46,103,135,179,193,63,71,17,217,82,212,109,182,63,103,119,170,165,230,11,182,191,222,120,200,6,81,83,184,191,97,116,114,184,113,202,195,63,106,251,43,239,162,216,201,191,125,6,110,66,28,17,195,191,75,186,138,84,44,37,189,63,70,210,158,32,31,125,178,191,116,97,214,223,148,133,195,191,65,153,104,76,182,61,200,63,225,88,118,61,181,214,198,191,214,63,244,160,177,139,196,63,173,16,52,17,37,169,196,191,155,11,63,53,17,232,199,191,129,224,108,44,255,79,160,191,239,194,56,32,49,195,165,191,220,175,193,152,31,59,160,63,216,81,193,116,164,230,195,191,39,162,251,50,110,130,150,63,10,133,216,38,237,64,154,63,236,213,197,233,196,103,202,191,109,252,47,84,117,87,203,63,24,32,253,108,135,6,153,191,183,210,71,50,43,178,148,63,178,132,193,27,170,198,179,191,151,114,132,19,19,233,185,63,182,230,67,148,134,112,194,191,73,239,13,49,69,227,194,63,23,187,24,254,177,50,201,191,149,91,86,250,16,177,194,63,128,82,215,156,191,46,169,63,241,177,82,156,165,222,174,191,64,9,208,18,2,162,203,191,88,55,88,81,72,212,165,191,106,240,179,56,207,142,189,63,62,101,173,23,114,55,187,191,162,14,179,157,103,219,178,191,22,228,250,44,178,200,175,191,59,84,108,200,210,158,177,191,168,77,254,37,135,208,184,63,114,167,169,50,171,128,178,63,52,235,174,204,53,29,196,63,162,218,134,210,202,100,151,63,5,25,140,13,19,64,181,63,204,246,139,195,136,166,147,191,156,118,142,37,108,37,204,191,239,61,96,237,145,151,147,63,15,226,210,246,34,77,180,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([83,215,129,103,81,49,168,191,1,82,63,143,83,126,150,191,155,159,31,30,62,87,176,63,195,163,174,214,214,230,193,63,97,144,185,188,92,132,181,191,30,155,159,249,133,1,176,191,17,121,73,237,81,211,192,63,134,13,87,96,153,186,191,63,57,229,58,45,219,4,167,191,210,29,242,253,29,215,191,63,73,121,189,56,238,25,165,191,176,14,109,40,125,158,164,63,131,61,81,244,182,216,185,63,132,59,88,59,80,114,197,191,69,125,186,187,74,183,173,191,55,195,192,252,180,238,175,191,225,51,123,30,206,20,191,63,72,129,156,37,226,226,172,191,58,40,85,8,192,249,166,191,131,146,249,188,63,101,197,191,150,105,134,25,229,135,189,191,199,240,194,55,92,74,181,191,17,112,32,233,187,136,188,63,21,104,254,114,244,192,182,63,174,6,224,150,7,213,178,63,98,95,177,157,3,0,175,191,148,252,214,221,82,137,186,63,50,32,179,244,114,172,198,191,252,95,165,71,30,242,201,191,24,246,42,138,93,208,179,191,115,119,25,124,21,78,186,191,148,68,132,97,81,233,181,63,56,71,232,153,46,95,194,191,101,40,183,162,79,38,200,191,34,77,175,56,179,180,181,191,237,50,187,240,100,52,165,191,205,121,235,3,23,94,163,63,120,182,55,144,140,74,185,63,94,173,59,30,62,84,195,191,22,63,137,17,207,167,183,191,216,92,181,167,239,86,169,191,177,232,137,47,99,66,183,63,222,136,54,31,141,208,187,63,171,34,75,184,248,9,175,191,77,7,147,113,138,204,173,191,93,146,52,189,218,217,190,63,133,157,12,12,14,136,170,63,230,110,216,165,104,222,183,63,12,139,185,68,127,31,184,63,162,18,250,177,217,103,182,191,177,176,166,98,254,14,187,63,255,12,45,61,190,234,187,63,92,33,108,70,158,78,176,63,226,205,99,78,211,113,168,63,84,105,82,171,212,207,168,191,10,79,141,122,141,56,184,63,62,66,67,83,34,60,169,191,150,194,167,249,86,234,179,191,40,131,39,212,63,50,190,63,68,34,51,228,142,93,184,191,149,109,137,144,224,143,181,63,216,222,71,14,123,230,186,191,153,177,109,95,176,174,176,63,24,97,82,239,66,42,180,191,29,159,177,1,245,71,181,63,44,157,77,134,28,39,181,63,159,66,19,34,245,68,185,63,72,167,117,183,35,44,200,191,251,141,105,239,54,192,198,191,106,32,243,249,58,231,180,63,36,18,43,186,193,161,200,191,111,228,99,243,127,195,192,191,247,48,6,183,154,227,194,191,9,225,100,252,160,251,168,191,225,24,164,121,177,196,181,63,170,35,17,224,249,69,187,63,185,69,109,9,153,41,187,191,209,28,58,235,149,142,167,191,240,19,71,31,130,82,181,63,224,232,248,148,242,255,164,191,241,99,197,49,125,186,172,63,166,130,114,95,174,164,171,63,74,7,235,244,161,161,180,63,180,26,109,57,73,8,185,63,19,17,20,93,126,128,187,63,203,202,131,132,154,183,177,63,41,242,111,90,114,62,177,63,205,54,216,220,205,190,181,191,155,38,25,117,166,66,199,191,158,214,94,81,250,221,201,63,182,250,78,227,32,34,195,191,133,169,54,137,189,35,199,63,197,196,208,35,14,79,179,191,208,46,29,17,29,57,185,63,118,10,199,139,200,223,177,191,99,170,49,192,188,38,175,63,128,134,156,46,88,80,180,191,37,111,91,118,235,229,176,63,103,192,113,219,76,141,177,63,211,53,155,184,61,52,178,63,159,93,192,182,195,72,200,191,86,103,40,168,213,253,199,63,216,210,226,247,1,240,197,191,76,47,233,170,33,242,195,63,220,226,90,23,179,207,177,63,206,135,238,20,159,120,199,191,178,32,62,220,25,153,201,191,80,63,112,244,195,88,195,191,63,174,169,173,41,112,198,191,112,229,91,181,110,109,174,63,36,0,37,0,38,0,39,0,45,0,100,0,101,0,102,0,104,0,105,0,108,0,112,0,113,0,114,0,116,0,124,0,126,0,161,0,164,0,165,0,167,0,168,0,176,0,177,0,179,0,181,0,183,0,196,0,197,0,198,0,204,0,205,0,207,0,220,0,228,0,229,0,230,0,231,0,236,0,238,0,245,0,253,0,36,0,37,0,38,0,96,0,97,0,101,0,104,0,108,0,112,0,116,0,165,0,168,0,196,0,197,0,198,0,230,0,97,0,101,0,198,0,228,0,230,0,97,0,101,0,197,0,98,0,102,0,198,0,230,0,98,0,102,0,198,0,230,0,231,0,99,0,103,0,198,0,231,0,99,0,103,0,36,0,44,0,45,0,52,0,104,0,108,0,112,0,116,0,160,0,164,0,176,0,196,0,197,0,204,0,229,0,230,0,236,0,244,0,36,0,96,0,100,0,108,0,112,0,116,0,164,0,196,0,198,0,204,0,230,0,236,0,97,0,101,0,113,0,197,0,198,0,230,0,97,0,101,0,197,0,98,0,102,0,197,0,198,0,230,0,98,0,102,0,198,0,199,0,230,0,231,0,99,0,103,0,198,0,199,0,231,0,99,0,103,0,100,0,108,0,112,0,116,0,168,0,204,0,205,0,228,0,96,0,104,0,112,0,116,0,160,0,168,0,204,0,206,0,237,0,113,0,237,0,237,0,238,0,238,0,239,0,107,0,107,0,111,0,104,0,108,0,112,0,120,0,124,0,168,0,204,0,236,0,244,0,96,0,100,0,104,0,120,0,124,0,168,0,204,0,212,0,213,0,236,0,244,0,97,0,97,0,101,0,98,0,102,0,206,0,98,0,102,0,206,0,207,0,99,0,103,0,99,0,103,0,107,0,111,0,104,0,108,0,116,0,120,0,212,0,244,0,104,0,108,0,112,0,116,0,212,0,244,0,117,0,245,0,212,0,246,0,112,0,116,0,212,0,244,0,112,0,116,0,212,0,244,0,252,0,117,0,221,0,244,0,212,0,244,0,214,0,112,0,116,0,124,0,220,0,228,0,252,0,112,0,116,0,220,0,252,0,117,0,125,0,221,0,113,0,220,0,112,0,116,0,220,0,252,0,220,0,252,0,252,0,253,0,220,0,253,0,36,0,38,0,44,0,45,0,46,0,47,0,55,0,60,0,96,0,98,0,100,0,101,0,103,0,104,0,105,0,112,0,115,0,124,0,160,0,162,0,164,0,168,0,176,0,177,0,188,0,198,0,204,0,205,0,212,0,228,0,229,0,230,0,231,0,236,0,237,0,247,0,36,0,96,0,97,0,98,0,100,0,101,0,105,0,108,0,160,0,161,0,164,0,196,0,197,0,198,0,229,0,230,0,36,0,37,0,96,0,97,0,100,0,101,0,160,0,161,0,164,0,197,0,230,0,37,0,38,0,96,0,97,0,98,0,100,0,101,0,102,0,161,0,162,0,197,0,198,0,231,0,37,0,38,0,97,0,98,0,101,0,102,0,162,0,197,0,198,0,38,0,39,0,98,0,99,0,101,0,103,0,162,0,198,0,199,0,39,0,98,0,99,0,102,0,103,0,198,0,199,0,96,0,99,0,100,0,103,0,36,0,44,0,100,0,116,0,160,0,168,0,172,0,176,0,196,0,197,0,204,0,228,0,229,0,236,0,96,0,100,0,196,0,198,0,228,0,230,0,236,0,97,0,117,0,229,0,97,0,98,0,102,0,197,0,229,0,230,0,38,0,98,0,99,0,103,0,230,0,231,0,98,0,103,0,231,0,99,0,36,0,44,0,52,0,104,0,108,0,112,0,164,0,168,0,172,0,196,0,204,0,205,0,212,0,228,0,236,0,44,0,96,0,100,0,104,0,172,0,236,0,238,0,236,0,44,0,52,0,104,0,108,0,112,0,116,0,124,0,168,0,172,0,176,0,180,0,196,0,204,0,212,0,228,0,236,0,244,0,104,0,112,0,116,0,172,0,204,0,212,0,236,0,103,0,44,0,52,0,104,0,108,0,116,0,168,0,176,0,184,0,204,0,212,0,236,0,244,0,52,0,104,0,112,0,116,0,124,0,168,0,176,0,212,0,220,0,244,0,52,0,116,0,124,0,176,0,184,0,204,0,220,0,244,0,252,0,52,0,112,0,120,0,176,0,184,0,212,0,220,0,252,0,36,0,116,0,124,0,184,0,212,0,220,0,228,0,244,0,252,0,112,0,120,0,176,0,184,0,212,0,220,0,244,0,253,0,116,0,220,0,252,0,221,0,252,0,220,0,221,0,36,0,38,0,96,0,97,0,100,0,104,0,106,0,108,0,110,0,112,0,116,0,120,0,124,0,160,0,164,0,168,0,176,0,196,0,197,0,198,0,228,0,229,0,230,0,231,0,236,0,237,0,96,0,100,0,101,0,160,0,199,0,228,0,229,0,231,0,97,0,100,0,101,0,228,0,229,0,231,0,97,0,101,0,229,0,98,0,102,0,230,0,98,0,102,0,230,0,231,0,99,0,103,0,99,0,103,0,36,0,44,0,96,0,100,0,104,0,108,0,116,0,120,0,124,0,160,0,168,0,176,0,196,0,229,0,230,0,236,0,237,0,36,0,96,0,97,0,100,0,108,0,160,0,164,0,196,0,197,0,204,0,236,0,237,0,97,0,101,0,197,0,205,0,229,0,97,0,101,0,197,0,229,0,98,0,102,0,198,0,98,0,102,0,198,0,230,0,99,0,103,0,99,0,103,0,36,0,96,0,100,0,108,0,168,0,196,0,204,0,205,0,228,0,104,0,105,0,109,0,116,0,160,0,164,0,168,0,172,0,196,0,204,0,205,0,228,0,236,0,237,0,104,0,105,0,108,0,236,0,237,0,109,0,237,0,106,0,238,0,238,0,108,0,116,0,160,0,168,0,176,0,204,0,236,0,44,0,104,0,105,0,109,0,112,0,117,0,168,0,169,0,172,0,176,0,212,0,236,0,244,0,245,0,101,0,104,0,108,0,112,0,116,0,168,0,169,0,172,0,204,0,205,0,212,0,213,0,245,0,109,0,205,0,98,0,206,0,99,0,108,0,116,0,176,0,212,0,244,0,104,0,109,0,112,0,116,0,117,0,176,0,177,0,204,0,212,0,213,0,236,0,109,0,112,0,116,0,117,0,177,0,205,0,212,0,213,0,237,0,244,0,245,0,113,0,177,0,245,0,245,0,246,0,116,0,212,0,244,0,112,0,117,0,212,0,220,0,244,0,245,0,53,0,117,0,177,0,212,0,213,0,221,0,245,0,253,0,113,0,177,0,213,0,253,0,213,0,214,0,116,0,220,0,252,0,112,0,212,0,220,0,244,0,252,0,117,0,212,0,213,0,221,0,244,0,245,0,213,0,245,0,252,0,254,0,220,0,252,0,220,0,252,0,252,0,253,0,220,0,253,0,36,0,44,0,96,0,104,0,108,0,160,0,161,0,164,0,196,0,198,0,228,0,229,0,96,0,100,0,104,0,108,0,161,0,164,0,196,0,197,0,229,0,97,0,105,0,109,0,229,0,97,0,101,0,105,0,109,0,198,0,230,0,98,0,102,0,106,0,110,0,160,0,196,0,198,0,98,0,102,0,106,0,110,0,231,0,99,0,103,0,107,0,111,0,199,0,231,0,99,0,103,0,107,0,111,0,36,0,44,0,52,0,96,0,100,0,104,0,108,0,168,0,196,0,197,0,228,0,229,0,236,0,96,0,100,0,104,0,108,0,197,0,229,0,97,0,101,0,105,0,109,0,197,0,229,0,97,0,101,0,105,0,109,0,198,0,230,0,98,0,102,0,106,0,110,0,198,0,230,0,98,0,102,0,106,0,110,0,199,0,99,0,103,0,107,0,111,0,99,0,103,0,36,0,52,0,96,0,100,0,104,0,108,0,112,0,168,0,176,0,196,0,204,0,228,0,236,0,237,0,96,0,100,0,104,0,108,0,112,0,116,0,205,0,237,0,97,0,101,0,105,0,109,0,113,0,237,0,97,0,101,0,206,0,238,0,98,0,102,0,114,0,206,0,238,0,98,0,102,0,114,0,118,0,207,0,239,0,99,0,103,0,99,0,103,0,115,0,119,0,36,0,44,0,52,0,96,0,112,0,116,0,196,0,204,0,228,0,236,0,244,0,112,0,116,0,205,0,237,0,113,0,117,0,113,0,117,0,206,0,110,0,114,0,118,0,206,0,238,0,106,0,110,0,114,0,118,0,207,0,239,0,107,0,111,0,115,0,107,0,111,0,115,0,119,0,44,0,108,0,112,0,120,0,204,0,212,0,220,0,244,0,104,0,108,0,112,0,116,0,120,0,124,0,245,0,109,0,113,0,117,0,121,0,105,0,117,0,246,0,114,0,107,0,107,0,52,0,120,0,196,0,204,0,212,0,228,0,236,0,244,0,252,0,120,0,124,0,212,0,244,0,121,0,125,0,121,0,125,0,122,0,126,0,122,0,126,0,123,0,123,0,127,0,52,0,120,0,212,0,220,0,252,0,220,0,252,0,253,0,121,0,196,0,212,0,220,0,228,0,244,0,252,0,220,0,221,0,252,0,253,0,36,0,37,0,38,0,45,0,96,0,97,0,100,0,104,0,105,0,108,0,160,0,196,0,197,0,198,0,199,0,228,0,229,0,230,0,236,0,237,0,37,0,96,0,100,0,160,0,197,0,198,0,228,0,229,0,230,0,37,0,97,0,101,0,160,0,196,0,197,0,198,0,229,0,230,0,97,0,101,0,198,0,230,0,98,0,102,0,198,0,230,0,231,0,98,0,102,0,199,0,231,0,99,0,103,0,199,0,99,0,103,0,36,0,37,0,44,0,96,0,100,0,104,0,108,0,160,0,168,0,196,0,198,0,204,0,205,0,228,0,229,0,230,0,236,0,237,0,36,0,37,0,96,0,100,0,109,0,160,0,168,0,196,0,197,0,228,0,229,0,97,0,100,0,101,0,160,0,197,0,229,0,97,0,101,0,198,0,230,0,98,0,102,0,198,0,230,0,98,0,102,0,199,0,231,0,99,0,103,0,99,0,103,0,36,0,44,0,96,0,100,0,104,0,108,0,116,0,160,0,168,0,196,0,204,0,205,0,228,0,236,0,237,0,36,0,44,0,96,0,97,0,104,0,105,0,108,0,109,0,160,0,168,0,169,0,204,0,205,0,104,0,108,0,168,0,169,0,205,0,97,0,105,0,206,0,206,0,207,0,44,0,52,0,104,0,108,0,112,0,116,0,168,0,176,0,204,0,212,0,236,0,244,0,36,0,44,0,52,0,100,0,104,0,105,0,108,0,109,0,113,0,116,0,168,0,176,0,204,0,212,0,236,0,237,0,244,0,104,0,108,0,168,0,169,0,237,0,105,0,106,0,44,0,52,0,112,0,168,0,176,0,204,0,212,0,236,0,244,0,44,0,52,0,108,0,113,0,116,0,117,0,168,0,176,0,204,0,212,0,213,0,236,0,244,0,104,0,108,0,112,0,116,0,177,0,213,0,117,0,52,0,60,0,112,0,120,0,176,0,212,0,220,0,244,0,252,0,52,0,60,0,113,0,116,0,124,0,176,0,212,0,220,0,245,0,252,0,52,0,53,0,112,0,116,0,212,0,245,0,113,0,60,0,120,0,212,0,220,0,244,0,252,0,52,0,60,0,116,0,124,0,212,0,220,0,244,0,252,0,221,0,220,0,252,0,220,0,252,0,253,0,36,0,38,0,39,0,44,0,96,0,100,0,101,0,104,0,108,0,109,0,120,0,124,0,160,0,168,0,172,0,196,0,197,0,198,0,199,0,228,0,229,0,230,0,231,0,36,0,96,0,97,0,100,0,108,0,168,0,196,0,198,0,204,0,228,0,229,0,230,0,97,0,101,0,197,0,230,0,97,0,101,0,197,0,98,0,102,0,98,0,102,0,99,0,103,0,99,0,103,0,36,0,44,0,96,0,97,0,100,0,108,0,112,0,116,0,124,0,160,0,168,0,196,0,197,0,204,0,228,0,229,0,236,0,36,0,96,0,97,0,101,0,104,0,105,0,116,0,160,0,168,0,197,0,204,0,205,0,228,0,230,0,236,0,37,0,96,0,97,0,100,0,101,0,109,0,205,0,228,0,229,0,236,0,97,0,101,0,229,0,98,0,102,0,98,0,102,0,99,0,103,0,99,0,103,0,96,0,104,0,116,0,160,0,204,0,236,0,36,0,44,0,45,0,100,0,101,0,105,0,108,0,109,0,112,0,116,0,160,0,196,0,228,0,236,0,237,0,36,0,45,0,96,0,97,0,104,0,105,0,108,0,109,0,117,0,169,0,197,0,204,0,205,0,238,0,45,0,101,0,105,0,106,0,205,0,110,0,206,0,106,0,111,0,104,0,204,0,236,0,44,0,108,0,109,0,204,0,205,0,212,0,236,0,44,0,45,0,53,0,101,0,104,0,105,0,108,0,113,0,117,0,169,0,213,0,236,0,237,0,244,0,245,0,45,0,97,0,101,0,106,0,109,0,204,0,213,0,236,0,237,0,45,0,102,0,105,0,109,0,238,0,98,0,102,0,106,0,103,0,99,0,103,0,212,0,244,0,116,0,212,0,244,0,245,0,53,0,105,0,113,0,205,0,213,0,237,0,245,0,45,0,53,0,109,0,114,0,117,0,205,0,212,0,213,0,237,0,114,0,213,0,214,0,110,0,214,0,212,0,244,0,116,0,212,0,244,0,53,0,113,0,213,0,221,0,53,0,117,0,212,0,213,0,244,0,245,0,253,0,114,0,245,0,246,0,220,0,252,0,220,0,252,0,113,0,253,0,213,0,220,0,245,0,253,0,220,0,252,0,220,0,252,0,221,0,220,0,221,0,252,0,36,0,44,0,52,0,96,0,100,0,104,0,109,0,112,0,160,0,161,0,164,0,168,0,196,0,204,0,205,0,228,0,229,0,236,0,36,0,37,0,45,0,96,0,97,0,100,0,101,0,104,0,105,0,109,0,160,0,161,0,196,0,197,0,228,0,229,0,36,0,37,0,96,0,97,0,100,0,101,0,109,0,160,0,161,0,196,0,197,0,228,0,37,0,38,0,97,0,98,0,101,0,161,0,197,0,198,0,38,0,98,0,102,0,198,0,98,0,102,0,198,0,199,0,99,0,103,0,99,0,103,0,44,0,96,0,104,0,108,0,196,0,204,0,228,0,36,0,44,0,96,0,97,0,100,0,101,0,104,0,105,0,108,0,160,0,196,0,197,0,204,0,205,0,228,0,236,0,237,0,36,0,37,0,45,0,96,0,97,0,100,0,101,0,105,0,161,0,196,0,198,0,204,0,205,0,229,0,237,0,37,0,38,0,97,0,98,0,102,0,106,0,109,0,161,0,205,0,206,0,229,0,230,0,237,0,38,0,97,0,101,0,102,0,110,0,162,0,206,0,229,0,230,0,238,0,98,0,99,0,102,0,230,0,98,0,99,0,102,0,103,0,99,0,103,0,44,0,96,0,100,0,104,0,108,0,112,0,196,0,204,0,228,0,236,0,96,0,101,0,108,0,204,0,228,0,236,0,45,0,105,0,161,0,196,0,197,0,205,0,228,0,229,0,236,0,237,0,37,0,45,0,101,0,102,0,106,0,109,0,110,0,197,0,205,0,206,0,229,0,237,0,45,0,46,0,97,0,98,0,102,0,105,0,106,0,109,0,110,0,197,0,198,0,206,0,229,0,230,0,46,0,99,0,106,0,107,0,111,0,206,0,207,0,106,0,110,0,111,0,99,0,107,0,112,0,116,0,204,0,236,0,204,0,236,0,113,0,204,0,205,0,45,0,109,0,205,0,238,0,46,0,106,0,114,0,214,0,237,0,238,0,46,0,107,0,110,0,238,0,99,0,106,0,107,0,112,0,116,0,212,0,244,0,116,0,212,0,244,0,113,0,245,0,245,0,114,0,214,0,206,0,238,0,124,0,212,0,244,0,212,0,244,0,213,0,220,0,252,0,220,0,252,0,220,0,252,0,220,0,252,0,36,0,37,0,96,0,100,0,112,0,116,0,160,0,161,0,196,0,197,0,228,0,229,0,36,0,37,0,38,0,96,0,100,0,104,0,108,0,160,0,196,0,197,0,198,0,228,0,229,0,36,0,37,0,38,0,96,0,97,0,101,0,109,0,161,0,196,0,197,0,198,0,228,0,36,0,37,0,38,0,96,0,97,0,100,0,101,0,161,0,196,0,198,0,230,0,36,0,37,0,38,0,39,0,98,0,102,0,196,0,198,0,199,0,229,0,37,0,39,0,97,0,98,0,101,0,102,0,198,0,199,0,229,0,38,0,99,0,102,0,103,0,199,0,99,0,103,0,196,0,197,0,228,0,229,0,104,0,108,0,196,0,197,0,228,0,229,0,109,0,196,0,197,0,198,0,228,0,229,0,230,0,105,0,109,0,196,0,198,0,228,0,230,0,98,0,110,0,197,0,198,0,199,0,229,0,230,0,231,0,98,0,102,0,197,0,199,0,229,0,231,0,99,0,103,0,199,0,231,0,99,0,103,0,196,0,204,0,205,0,228,0,236,0,237,0,196,0,204,0,205,0,228,0,236,0,237,0,196,0,204,0,205,0,206,0,228,0,236,0,237,0,206,0,238,0,206,0,207,0,237,0,238,0,207,0,239,0,207,0,116,0,204,0,205,0,236,0,237,0,112,0,116,0,204,0,205,0,236,0,237,0,204,0,205,0,206,0,236,0,237,0,238,0,205,0,206,0,238,0,205,0,206,0,207,0,237,0,238,0,239,0,207,0,239,0,112,0,212,0,213,0,244,0,112,0,116,0,212,0,213,0,244,0,245,0,113,0,117,0,177,0,212,0,214,0,244,0,214,0,246,0,213,0,214,0,215,0,247,0,120,0,212,0,213,0,244,0,245,0,124,0,212,0,213,0,244,0,245,0,125,0,212,0,244,0,121,0,125,0,213,0,214,0,245,0,246,0,213,0,214,0,245,0,246,0,215,0,247,0,120,0,124,0,220,0,221,0,252,0,220,0,221,0,252,0,220,0,252,0,221,0,222,0,253,0,254,0,126,0,253,0,223,0,255,0,220,0,221,0,252,0,253,0,220,0,221,0,252,0,253,0,220,0,252,0,221,0,222,0,253,0,254,0,223,0,255,0,223,0,255,0,36,0,37,0,45,0,52,0,96,0,97,0,100,0,104,0,108,0,112,0,116,0,124,0,160,0,161,0,164,0,165,0,168,0,176,0,181,0,184,0,197,0,198,0,204,0,205,0,228,0,236,0,36,0,37,0,96,0,97,0,101,0,104,0,105,0,108,0,109,0,112,0,116,0,117,0,160,0,161,0,164,0,165,0,168,0,169,0,172,0,176,0,198,0,228,0,229,0,230,0,36,0,37,0,96,0,97,0,100,0,160,0,161,0,164,0,169,0,198,0,228,0,229,0,230,0,37,0,96,0,97,0,98,0,101,0,102,0,109,0,161,0,162,0,164,0,228,0,229,0,37,0,97,0,98,0,101,0,102,0,162,0,229,0,230,0,98,0,99,0,102,0,103,0,230,0,231,0,98,0,99,0,102,0,103,0,230,0,231,0,99,0,103,0,230,0,96,0,104,0,108,0,112,0,116,0,124,0,160,0,164,0,172,0,196,0,228,0,236,0,96,0,97,0,100,0,101,0,104,0,105,0,108,0,109,0,160,0,196,0,197,0,37,0,97,0,100,0,101,0,109,0,160,0,161,0,164,0,197,0,230,0,37,0,98,0,101,0,102,0,105,0,106,0,110,0,161,0,162,0,169,0,197,0,198,0,97,0,98,0,101,0,110,0,161,0,162,0,165,0,170,0,197,0,198,0,238,0,98,0,99,0,102,0,103,0,110,0,162,0,198,0,199,0,206,0,98,0,99,0,102,0,103,0,198,0,199,0,230,0,99,0,103,0,104,0,108,0,112,0,116,0,124,0,168,0,176,0,204,0,236,0,96,0,104,0,108,0,160,0,204,0,236,0,96,0,100,0,109,0,102,0,105,0,110,0,98,0,102,0,110,0,162,0,170,0,198,0,230,0,98,0,106,0,107,0,111,0,170,0,102,0,110,0,103,0,111,0,108,0,112,0,116,0,124,0,204,0,236,0,112,0,116,0,204,0,236,0,117,0,118,0,112,0,116,0,120,0,124,0,212,0,244,0,112,0,116,0,212,0,244,0,117,0,118,0,116,0,120,0,124,0,212,0,244,0,120,0,124,0,212,0,244,0,121,0,121,0,120,0,124,0,220,0,252,0,120,0,124,0,220,0,252,0,220,0,252,0,220,0,252,0,36,0,96,0,97,0,100,0,104,0,116,0,160,0,161,0,164,0,168,0,228,0,229,0,236,0,36,0,96,0,100,0,108,0,160,0,164,0,172,0,196,0,228,0,229,0,36,0,96,0,97,0,101,0,164,0,196,0,228,0,229,0,230,0,97,0,101,0,229,0,230,0,98,0,102,0,230,0,98,0,102,0,230,0,231,0,99,0,103,0,99,0,103,0,36,0,96,0,100,0,108,0,160,0,164,0,168,0,172,0,196,0,228,0,36,0,97,0,100,0,101,0,104,0,109,0,160,0,161,0,164,0,168,0,169,0,172,0,196,0,197,0,204,0,205,0,228,0,236,0,237,0,36,0,96,0,97,0,100,0,101,0,104,0,108,0,160,0,161,0,164,0,169,0,197,0,204,0,205,0,228,0,229,0,237,0,97,0,101,0,109,0,197,0,198,0,205,0,230,0,237,0,238,0,98,0,102,0,198,0,230,0,98,0,102,0,99,0,103,0,99,0,103,0,36,0,96,0,100,0,108,0,164,0,196,0,204,0,236,0,36,0,96,0,97,0,101,0,104,0,105,0,109,0,169,0,196,0,197,0,204,0,228,0,236,0,45,0,97,0,101,0,104,0,105,0,108,0,109,0,160,0,161,0,164,0,169,0,196,0,197,0,204,0,228,0,229,0,237,0,45,0,101,0,106,0,109,0,161,0,169,0,197,0,229,0,237,0,238,0,98,0,105,0,106,0,109,0,169,0,238,0,110,0,238,0,239,0,107,0,111,0,108,0,116,0,204,0,236,0,104,0,109,0,112,0,204,0,236,0,45,0,104,0,108,0,109,0,117,0,169,0,236,0,237,0,245,0,45,0,105,0,106,0,109,0,113,0,169,0,177,0,206,0,213,0,237,0,102,0,105,0,106,0,109,0,170,0,206,0,214,0,107,0,110,0,206,0,207,0,107,0,111,0,116,0,212,0,244,0,112,0,212,0,244,0,117,0,212,0,213,0,113,0,114,0,205,0,213,0,237,0,113,0,117,0,118,0,178,0,246,0,114,0,246,0,247,0,212,0,244,0,212,0,244,0,117,0,125,0,245,0,113,0,245,0,118,0,178,0,214,0,220,0,252,0,220,0,252,0,221,0,220,0,252,0,220,0,252,0,253,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,106,0,0,0,23,0,0,0,10,0,0,0,10,0,0,0,16,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,8,0,0,0,5,0,0,0,4,0,0,0,22,0,0,0,15,0,0,0,12,0,0,0,7,0,0,0,7,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,18,0,0,0,15,0,0,0,10,0,0,0,7,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,6,0,0,0,5,0,0,0,12,0,0,0,8,0,0,0,6,0,0,0,4,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,9,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,10,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,13,0,0,0,11,0,0,0,9,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,8,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,7,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,9,0,0,0,9,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,8,0,0,0,10,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,9,0,0,0,10,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,15,0,0,0,15,0,0,0,18,0,0,0,20,0,0,0,11,0,0,0,14,0,0,0,19,0,0,0,17,0,0,0,12,0,0,0,11,0,0,0,14,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,5,0,0,0,12,0,0,0,7,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,12,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,7,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,10,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,13,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,8,0,0,0,5,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,2,0,0,0,33,0,0,0,32,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,35,0,0,0,24,0,0,0,14,0,0,0,0,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,11,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,13,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,17,0,0,0,14,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,18,0,0,0,10,0,0,0,9,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,17,0,0,0,14,0,0,0,12,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,16,0,0,0,14,0,0,0,7,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,12,0,0,0,9,0,0,0,13,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,9,0,0,0,14,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,16,0,0,0,18,0,0,0,13,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,12,0,0,0,15,0,0,0,18,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,15,0,0,0,12,0,0,0,6,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,10,0,0,0,9,0,0,0,12,0,0,0,12,0,0,0,6,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,14,0,0,0,12,0,0,0,10,0,0,0,8,0,0,0,8,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,14,0,0,0,11,0,0,0,9,0,0,0,3,0,0,0,8,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,11,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,5,0,0,0,16,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,4,0,0,0,19,0,0,0,13,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,8,0,0,0,6,0,0,0,8,0,0,0,9,0,0,0,7,0,0,0,19,0,0,0,13,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,9,0,0,0,9,0,0,0,4,0,0,0,7,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,19,0,0,0,13,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,11,0,0,0,8,0,0,0,6,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,9,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,15,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,18,0,0,0,14,0,0,0,9,0,0,0,8,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,7,0,0,0,7,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,14,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,13,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,6,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,7,0,0,0,8,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,16,0,0,0,9,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,14,0,0,0,10,0,0,0,10,0,0,0,8,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,17,0,0,0,19,0,0,0,14,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,17,0,0,0,15,0,0,0,14,0,0,0,10,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,7,0,0,0,14,0,0,0,13,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9,0,0,0,8,0,0,0,14,0,0,0,13,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,15,0,0,0,13,0,0,0,14,0,0,0,9,0,0,0,9,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,13,0,0,0,12,0,0,0,15,0,0,0,9,0,0,0,6,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,9,0,0,0,9,0,0,0,13,0,0,0,14,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,10,0,0,0,8,0,0,0,11,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,9,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,7,0,0,0,9,0,0,0,7,0,0,0,4,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,12,0,0,0,10,0,0,0,7,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,20,0,0,0,18,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,12,0,0,0,13,0,0,0,16,0,0,0,13,0,0,0,13,0,0,0,8,0,0,0,6,0,0,0,5,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,10,0,0,0,10,0,0,0,17,0,0,0,15,0,0,0,16,0,0,0,8,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,12,0,0,0,17,0,0,0,15,0,0,0,12,0,0,0,8,0,0,0,6,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,11,0,0,0,12,0,0,0,6,0,0,0,5,0,0,0,11,0,0,0,7,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,9,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,3,0,0,0,8,0,0,0,10,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,8,0,0,0,6,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,16,0,0,0,13,0,0,0,16,0,0,0,16,0,0,0,10,0,0,0,8,0,0,0,9,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,9,0,0,0,9,0,0,0,13,0,0,0,21,0,0,0,18,0,0,0,8,0,0,0,9,0,0,0,13,0,0,0,15,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,9,0,0,0,5,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,7,0,0,0,8,0,0,0,14,0,0,0,14,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,12,0,0,0,13,0,0,0,11,0,0,0,9,0,0,0,8,0,0,0,9,0,0,0,8,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,7,0,0,0,13,0,0,0,12,0,0,0,10,0,0,0,9,0,0,0,7,0,0,0,11,0,0,0,9,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,4,0,0,0,1,0,0,0,8,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,21,0,0,0,18,0,0,0,20,0,0,0,23,0,0,0,22,0,0,0,13,0,0,0,17,0,0,0,21,0,0,0,12,0,0,0,7,0,0,0,15,0,0,0,14,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,7,0,0,0,8,0,0,0,12,0,0,0,10,0,0,0,14,0,0,0,10,0,0,0,13,0,0,0,15,0,0,0,18,0,0,0,11,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,11,0,0,0,8,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,10,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,7,0,0,0,10,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,15,0,0,0,14,0,0,0,17,0,0,0,17,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,13,0,0,0,11,0,0,0,13,0,0,0,23,0,0,0,17,0,0,0,12,0,0,0,10,0,0,0,14,0,0,0,15,0,0,0,9,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,11,0,0,0,7,0,0,0,8,0,0,0,15,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,15,0,0,0,14,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,7,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,5,0,0,0,6,0,0,0,4,0,0,0,10,0,0,0,13,0,0,0,15,0,0,0,14,0,0,0,16,0,0,0,11,0,0,0,11,0,0,0,7,0,0,0,6,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,7,0,0,0,10,0,0,0,8,0,0,0,12,0,0,0,11,0,0,0,10,0,0,0,7,0,0,0,8,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,12,0,0,0,5,0,0,0,5,0,0,0,12,0,0,0,9,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,6,0,0,0,5,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,14,0,0,0,11,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,11,0,0,0,13,0,0,0,12,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,11,0,0,0,13,0,0,0,14,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,14,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,10,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,16,0,0,0,12,0,0,0,12,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,15,0,0,0,15,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,9,0,0,0,11,0,0,0,14,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,7,0,0,0,13,0,0,0,11,0,0,0,5,0,0,0,1,0,0,0,7,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,8,0,0,0,11,0,0,0,11,0,0,0,3,0,0,0,2,0,0,0,7,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,10,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,198,172,35,60,224,161,63,99,75,200,79,228,73,196,191,111,48,40,143,111,0,224,191,63,223,7,216,228,218,212,63,15,96,124,76,190,102,218,63,157,133,145,183,110,108,220,191,224,55,31,53,176,77,209,63,252,219,35,161,18,129,211,63,250,231,179,243,178,198,242,191,148,72,113,238,171,183,194,63,124,175,225,82,247,122,214,191,248,104,1,96,237,23,207,63,243,21,254,41,155,46,197,63,60,176,118,155,228,102,196,63,125,153,249,129,36,65,218,63,41,212,197,147,83,175,221,63,52,137,219,149,239,65,199,191,254,155,33,217,38,45,227,191,87,39,61,189,79,233,239,63,88,194,44,215,128,195,206,63,6,74,219,100,20,156,210,63,186,149,15,71,114,77,213,63,0,105,39,65,167,202,226,63,89,221,8,179,111,215,215,63,227,117,43,34,107,9,229,63,172,79,228,105,242,164,218,63,184,24,184,202,40,75,201,191,196,105,4,190,77,218,211,191,160,251,79,64,16,7,220,191,65,150,109,54,202,112,238,191,55,177,184,1,249,47,226,63,88,126,141,181,44,145,212,191,239,161,152,62,9,109,214,191,135,76,174,121,235,60,240,63,114,255,50,227,170,15,242,191,78,28,168,201,43,241,224,191,223,212,45,197,127,225,233,191,50,100,219,58,231,227,211,63,213,108,38,182,13,61,226,191,166,126,160,143,40,243,219,63,151,82,217,137,117,235,245,191,134,150,79,39,251,121,227,63,122,169,28,1,120,11,214,63,231,196,234,133,189,1,215,191,47,160,136,73,18,84,217,191,227,10,149,100,192,104,199,63,160,151,178,255,149,215,197,191,138,213,51,18,148,163,218,191,246,145,241,17,103,187,208,63,151,235,210,33,170,149,201,191,145,72,29,217,243,243,200,191,21,189,79,244,141,1,225,63,56,138,185,222,180,225,206,63,21,61,21,15,43,143,214,63,44,66,53,217,249,114,223,63,220,69,246,233,159,140,226,191,191,23,81,120,231,89,222,63,253,168,10,145,138,29,229,191,244,173,219,211,149,80,188,63,154,120,186,25,172,51,228,63,207,128,209,63,96,152,205,191,6,22,9,166,114,65,232,191,111,163,235,162,188,39,232,191,161,89,110,126,37,58,220,191,246,59,162,33,33,73,228,191,185,44,17,72,197,141,224,63,27,172,56,207,95,217,215,191,172,221,141,254,108,164,215,191,143,112,26,236,123,124,208,63,124,200,39,39,233,31,234,191,188,112,179,150,178,21,227,63,126,33,147,44,13,5,231,63,243,87,45,149,206,214,211,191,243,247,185,108,200,199,240,63,116,141,162,246,45,223,206,191,37,139,222,91,252,109,178,191,152,135,52,65,186,61,221,63,16,51,230,180,147,40,230,191,69,0,32,97,34,146,213,63,20,2,170,76,230,235,226,191,25,157,231,243,18,43,207,191,32,224,162,49,205,15,241,63,100,169,241,60,66,173,239,63,136,206,139,18,134,78,196,63,159,54,253,189,136,83,220,63,177,212,80,214,3,3,237,191,69,68,195,98,88,34,197,63,79,38,179,173,160,120,230,63,160,231,213,87,101,222,227,191,237,105,195,227,196,210,252,63,100,169,105,96,165,158,254,63,91,101,102,203,214,127,225,191,250,106,211,250,242,241,218,191,130,164,205,150,76,24,237,191,0,40,203,203,6,227,216,63,150,209,198,206,47,173,227,63,142,219,73,204,49,93,240,191,246,61,158,237,237,169,249,63,136,225,89,174,255,33,0,64,218,229,186,84,171,133,255,63,188,201,28,154,121,59,192,191,234,7,107,67,240,228,197,191,254,70,239,22,213,151,225,191,143,147,28,24,120,42,213,191,116,37,54,39,216,75,230,191,195,245,193,82,74,21,227,63,129,242,59,96,220,193,140,63,11,123,102,182,61,28,163,191,10,105,231,176,98,235,196,191,107,230,44,42,141,178,182,63,130,145,89,57,81,237,181,63,164,208,62,187,0,20,200,191,93,59,26,89,223,236,182,191,67,14,101,153,128,97,181,63,42,40,125,125,215,16,171,191,49,172,158,1,154,62,164,191,46,61,115,14,80,240,179,63,167,48,212,75,128,222,155,191,30,235,84,139,30,183,191,191,151,160,181,172,164,74,175,63,82,133,217,61,134,233,210,63,93,65,102,141,17,115,190,191,241,109,70,224,226,85,169,63,209,129,244,48,73,161,187,63,143,42,57,105,141,249,174,63,72,38,216,119,72,85,205,63,104,213,178,14,45,69,208,63,190,87,123,61,90,70,201,63,210,10,124,6,0,1,216,63,223,172,143,244,249,162,161,191,77,13,243,243,248,24,164,63,78,94,181,255,187,61,165,191,23,221,188,81,156,181,156,63,186,206,93,42,76,201,164,63,8,135,161,250,83,228,135,63,246,2,55,69,213,243,189,63,137,208,194,42,67,58,129,63,153,20,90,118,248,171,183,63,12,104,155,142,250,15,176,63,50,230,138,228,92,239,169,191,63,130,194,75,63,251,171,63,150,207,222,104,176,12,150,191,191,194,233,199,210,127,144,63,54,243,159,151,74,181,144,63,244,147,219,41,180,219,146,191,251,159,159,4,66,150,160,191,155,218,161,117,134,72,163,63,229,44,216,143,137,32,134,63,16,218,241,19,79,212,140,191,27,243,72,75,195,221,125,191,160,196,49,203,131,230,170,191,77,182,4,140,21,195,161,63,249,251,40,80,1,133,133,191,153,16,132,219,125,140,163,191,201,157,14,75,243,149,136,63,101,19,197,237,88,199,175,63,150,202,54,108,10,240,125,63,60,136,212,214,40,23,150,63,68,30,249,7,228,107,120,63,123,164,206,88,64,107,153,191,36,179,171,74,213,109,166,191,29,116,38,57,182,18,142,191,45,39,110,140,189,56,168,191,84,177,252,253,143,26,170,191,26,13,60,237,133,193,161,191,126,201,221,10,176,123,177,191,108,202,154,144,106,21,176,63,68,204,150,202,167,22,160,63,229,254,155,18,222,55,173,191,182,37,254,221,1,162,154,63,120,213,227,56,206,134,147,191,170,74,224,156,10,211,166,191,132,216,70,17,252,240,154,191,242,86,30,83,53,208,166,191,230,47,165,43,61,149,176,191,224,241,38,208,144,36,172,191,110,31,196,146,97,3,179,63,61,26,61,119,225,104,176,63,18,254,134,238,178,3,144,191,250,153,21,115,213,85,161,191,76,239,72,80,123,247,103,63,187,77,1,45,186,190,177,191,160,195,243,103,15,173,177,191,67,13,66,39,85,23,176,191,9,98,69,155,138,222,175,191,252,110,94,232,162,248,139,63,98,208,51,150,81,45,96,63,146,252,111,31,1,18,176,191,44,144,33,126,116,218,172,191,56,174,106,8,226,7,175,191,177,29,124,117,200,55,177,191,175,151,116,151,49,92,151,63,77,171,204,165,20,156,152,63,32,91,103,45,177,170,155,63,189,192,125,7,53,239,154,63,114,216,157,28,168,42,177,191,16,55,72,118,16,148,178,191,27,252,132,106,186,11,172,63,95,190,195,135,139,76,177,63,101,103,63,130,232,97,156,63,160,220,200,235,40,128,157,63,92,185,160,194,4,69,151,63,6,98,231,192,167,105,161,63,78,114,55,92,113,54,146,63,123,255,145,48,118,117,178,191,149,100,91,251,115,147,174,63,244,246,67,171,244,8,181,63,70,159,14,51,245,116,176,191,199,221,16,7,153,71,158,63,45,228,83,26,164,33,130,191,171,138,196,211,110,84,147,63,148,127,131,41,172,70,131,191,61,3,22,22,253,139,152,63,229,192,12,219,99,156,178,191,14,231,102,227,91,96,178,63,210,0,152,14,80,205,176,191,255,219,143,158,240,64,174,63,213,16,231,198,154,130,147,63,137,219,54,78,187,77,150,191,124,16,231,10,96,175,131,191,30,121,44,182,246,5,149,191,4,97,121,129,43,19,176,191,81,234,177,123,136,201,173,63,23,189,73,96,46,141,177,191,137,22,32,156,7,81,177,63,244,6,178,167,19,135,144,63,226,98,55,194,134,71,153,191,51,3,95,6,162,5,154,191,78,81,52,129,92,91,125,191,222,199,185,47,144,147,141,63,29,109,17,73,220,94,154,191,74,33,203,207,23,81,179,191,74,225,151,154,108,212,178,63,105,42,75,78,70,245,177,63,84,55,153,138,102,213,176,191,237,143,250,75,220,0,150,63,43,249,71,132,156,99,153,191,223,137,182,77,212,94,136,63,59,52,171,177,73,141,148,191,57,112,234,109,87,124,179,191,238,96,242,62,41,108,174,191,74,82,85,115,34,23,181,63,28,119,242,13,22,232,176,63,15,43,23,137,6,251,135,63,235,37,218,143,35,86,178,191,198,24,168,27,214,224,176,191,214,149,185,182,32,198,178,191,193,11,91,199,97,128,177,191,173,31,4,128,135,231,177,191,187,97,216,61,210,135,168,63,26,184,25,178,24,152,162,63,9,251,201,9,4,181,207,63,224,206,15,99,208,93,214,63,171,94,206,204,206,129,222,63,76,213,151,19,158,146,213,63,16,96,177,43,171,164,201,63,119,88,29,25,117,164,154,63,120,28,29,38,160,126,199,63,11,207,1,151,46,116,194,63,205,139,205,54,202,188,184,63,149,108,202,47,148,139,213,191,71,155,199,247,32,1,208,63,121,252,240,114,2,218,198,63,103,146,138,171,123,179,194,191,180,244,84,89,40,127,187,63,101,232,25,181,174,85,216,191,197,137,225,94,51,155,204,191,0,114,66,96,101,28,221,191,221,131,103,7,246,94,213,191,140,62,28,128,233,55,203,191,28,92,205,198,180,187,166,63,83,132,58,159,233,119,193,63,222,177,141,16,251,7,183,63,67,220,124,4,249,233,193,191,68,179,142,174,64,118,177,191,39,44,224,30,30,107,155,63,69,71,89,183,156,126,163,191,48,89,21,72,182,105,153,191,226,222,209,146,189,28,177,191,209,170,237,80,216,222,191,63,10,32,118,133,181,89,166,63,101,118,31,76,53,63,181,63,4,48,169,139,38,118,180,63,121,243,106,178,195,138,184,191,55,26,222,6,223,81,185,191,246,104,242,237,62,112,160,191,108,159,241,139,249,97,173,63,191,222,161,66,75,182,164,191,18,113,161,94,104,209,162,63,221,200,121,64,56,47,164,191,66,107,75,48,196,109,143,191,58,207,90,219,67,122,140,63,99,49,244,54,207,144,145,63,67,73,185,191,32,137,187,63,169,248,106,136,151,159,167,191,89,190,5,249,232,79,132,191,227,145,7,239,169,159,166,191,222,224,19,247,185,12,118,63,90,126,208,107,245,178,172,191,150,243,163,66,37,152,170,63,133,69,249,46,28,126,164,191,13,88,192,222,53,246,162,63,215,201,184,180,156,13,125,63,118,224,220,101,149,56,171,63,197,120,31,10,71,79,173,191,103,100,246,211,106,127,168,63,178,86,121,95,216,212,174,191,113,254,166,239,218,220,170,63,100,81,247,91,178,163,146,191,196,125,57,249,19,65,155,63,202,44,248,142,246,51,103,63,134,47,218,194,184,216,177,191,105,50,221,213,176,173,177,63,36,142,109,143,195,6,174,63,87,224,143,44,155,172,175,191,245,69,61,223,25,146,179,191,152,36,142,202,42,45,176,191,109,36,80,178,4,44,179,63,166,108,64,217,158,96,176,63,134,141,39,110,98,178,138,191,126,247,148,236,106,138,178,191,251,177,27,133,68,50,178,191,150,221,227,41,131,248,176,191,250,213,28,89,251,50,176,191,139,197,122,166,227,184,134,191,78,91,199,104,255,212,179,191,93,90,169,169,199,136,176,191,93,165,141,214,19,254,176,191,255,69,7,198,249,12,180,191,69,191,24,133,204,73,151,63,224,84,240,13,144,169,155,191,49,229,91,64,136,8,182,191,120,220,209,241,254,23,178,191,30,45,238,117,19,186,175,63,64,70,163,137,136,79,179,63,66,71,213,209,193,38,143,63,28,66,232,235,33,80,154,63,74,177,168,236,32,103,145,63,92,71,64,204,183,19,163,191,168,229,61,164,100,207,179,191,34,184,167,75,153,154,178,63,152,244,34,10,172,249,180,63,230,234,38,98,9,68,180,191,137,184,57,82,67,52,157,63,126,250,191,201,137,34,128,191,241,180,84,184,238,60,149,191,62,75,243,27,245,144,180,191,181,9,128,198,11,36,181,63,114,8,83,40,194,148,179,191,127,115,10,65,122,13,180,63,15,140,190,68,37,172,140,63,60,86,1,137,64,170,124,63,47,32,7,240,112,183,139,191,152,158,42,75,116,88,147,63,9,109,227,184,170,32,178,191,253,103,239,139,154,207,179,63,248,120,31,194,54,33,180,191,62,120,131,52,184,101,181,63,200,125,82,125,32,24,137,63,90,101,248,169,103,170,146,191,183,145,193,177,113,133,138,191,79,95,16,178,35,47,149,63,182,255,173,78,206,163,181,191,82,44,183,1,192,26,181,63,77,141,124,120,238,235,179,63,6,13,227,105,39,83,181,191,206,106,5,56,184,129,134,63,222,82,129,10,248,139,144,191,184,60,52,77,188,223,135,191,105,80,59,126,152,105,145,63,48,114,241,251,15,100,182,191,109,188,122,56,178,92,180,191,177,24,175,57,237,133,182,63,244,153,40,238,62,251,181,63,63,28,78,107,35,154,182,191,151,61,213,140,90,8,182,191,22,63,142,157,74,156,181,191,4,98,227,87,60,89,181,191,229,226,227,53,37,235,148,63,93,227,29,181,200,190,160,63,8,205,154,248,216,211,155,63,208,138,87,24,154,173,150,63,73,183,36,5,59,138,206,63,97,75,139,45,137,115,199,63,255,77,84,31,223,134,201,63,81,52,153,204,139,137,201,63,127,91,77,202,51,122,174,63,89,107,243,122,52,215,191,191,64,196,168,230,199,5,172,191,217,242,216,169,250,103,192,63,93,83,168,158,16,222,162,191,116,219,114,163,254,243,180,191,141,96,246,9,3,216,176,191,215,147,87,65,47,91,156,191,148,124,244,133,102,174,176,63,170,1,208,123,113,1,189,191,60,122,158,159,79,55,127,63,191,57,14,67,251,34,158,63,93,38,151,150,101,163,154,191,108,82,60,208,138,122,186,63,209,52,26,203,228,56,179,63,30,64,36,99,229,122,183,191,125,57,60,191,215,160,180,191,64,133,211,200,183,127,132,191,42,205,59,23,43,47,159,191,204,76,17,104,157,132,181,191,119,115,80,75,162,160,175,63,148,82,81,111,187,65,181,63,247,253,166,211,81,13,170,191,235,21,48,204,180,183,150,191,9,200,201,42,27,134,144,63,214,61,79,12,77,154,120,63,248,7,240,63,25,151,130,191,73,96,195,232,63,163,142,63,10,38,88,187,172,51,137,191,100,193,107,155,194,66,167,63,127,6,184,36,98,44,157,191,233,241,238,203,224,253,149,191,129,88,226,247,78,58,166,63,183,62,80,48,224,139,136,63,155,183,100,113,249,17,128,191,249,16,90,125,52,119,150,191,75,41,97,12,231,253,147,63,199,115,148,167,147,80,125,191,14,69,36,234,74,117,126,63,57,165,32,168,1,81,122,63,81,166,57,156,192,20,156,63,181,217,63,117,74,193,115,191,133,201,147,165,185,49,118,191,240,137,80,54,184,196,145,191,59,139,25,123,36,90,118,63,169,48,71,12,86,93,146,63,149,77,8,27,158,199,119,191,8,198,4,2,137,3,155,191,219,16,64,213,58,160,119,63,2,233,46,134,30,134,158,63,29,25,9,209,227,136,156,191,190,52,242,172,217,188,162,63,64,51,231,65,46,96,144,63,106,131,239,55,158,218,156,191,223,55,215,226,138,149,162,191,254,230,64,102,180,227,151,191,100,148,196,177,196,77,163,63,102,177,36,6,16,235,157,63,124,102,25,78,18,9,162,191,172,76,233,181,62,206,160,191,147,134,49,41,157,187,153,191,184,18,118,190,214,193,156,191,207,96,143,233,51,194,160,191,157,44,243,154,106,0,157,191,103,95,95,46,184,78,163,191,81,147,72,37,167,164,162,191,152,0,141,83,84,191,145,63,71,72,207,126,229,202,149,191,84,127,76,3,12,77,143,63,168,175,179,237,82,30,164,191,63,15,68,110,188,85,163,191,254,61,90,104,235,45,158,63,239,130,93,186,95,192,161,63,100,159,83,37,33,166,150,63,2,65,74,196,255,37,153,191,57,59,199,61,229,108,149,191,17,33,167,183,238,131,148,63,36,190,252,134,123,42,161,191,99,154,209,142,119,157,157,63,212,107,228,182,182,121,163,63,214,136,254,24,227,209,163,191,141,135,162,161,28,126,145,63,42,82,38,161,179,156,141,191,63,35,56,113,5,159,164,191,234,84,162,59,182,135,163,63,218,182,202,126,127,155,161,191,7,133,147,66,172,244,161,63,253,130,117,9,21,122,136,63,88,42,102,105,72,26,163,191,62,216,73,65,17,30,162,63,195,142,7,70,83,101,163,191,131,196,175,136,26,66,165,63,178,117,46,215,103,234,147,63,131,64,224,254,218,72,148,191,143,199,216,132,231,247,132,63,24,48,6,185,117,30,145,191,107,206,140,138,59,240,150,63,45,121,64,190,170,217,132,191,236,232,169,0,91,20,144,63,135,104,215,7,105,200,144,191,251,54,204,135,170,136,164,191,158,82,71,58,17,109,164,63,236,120,39,206,172,12,163,63,150,156,147,21,135,182,160,191,149,136,148,111,94,160,133,63,169,125,242,190,77,184,148,191,148,218,41,101,79,20,130,191,239,166,47,89,91,174,145,63,250,85,201,171,246,108,165,191,63,159,135,160,18,248,161,191,40,189,153,182,62,169,163,63,37,55,253,64,87,150,162,63,78,58,201,43,66,56,128,63,105,51,141,230,92,66,139,63,225,146,74,116,146,143,165,191,45,4,123,70,87,245,165,191,42,162,197,7,182,132,164,191,25,164,235,11,87,244,162,191,220,52,242,210,1,78,168,63,122,249,206,142,187,214,146,63,195,150,213,231,38,90,183,63,114,136,196,190,232,22,185,63,108,177,231,160,32,36,179,63,154,74,177,208,141,24,174,63,37,236,185,214,100,192,124,191,137,133,126,112,132,191,176,191,108,38,41,61,68,10,172,191,234,229,58,63,166,208,173,63,118,210,34,167,82,13,166,191,233,185,72,66,61,73,170,63,213,77,180,209,127,94,190,191,126,207,107,115,97,85,175,191,96,121,192,51,169,215,184,63,106,87,224,84,170,207,142,63,28,161,109,103,45,108,132,63,109,137,117,176,161,68,141,191,36,118,121,121,52,28,160,63,197,90,39,63,146,161,170,63,161,60,98,72,71,158,162,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([28,90,30,26,79,203,169,191,55,17,77,54,192,33,168,191,189,53,118,84,189,0,157,191,126,139,6,87,217,102,164,63,17,104,157,93,124,252,156,63,143,77,72,249,100,13,179,191,99,44,231,170,73,186,176,191,62,17,33,212,199,206,178,63,28,116,145,100,252,220,170,63,253,80,6,141,251,219,131,63,243,123,45,247,255,33,129,191,180,35,189,67,250,12,161,191,145,223,40,24,86,68,159,63,95,12,90,181,201,100,138,191,34,158,197,84,253,3,155,191,222,247,59,20,48,86,130,63,47,11,73,150,34,92,145,191,5,131,153,236,60,201,137,191,127,128,135,39,24,127,144,63,2,155,42,23,228,194,141,191,26,105,101,188,161,44,145,63,133,202,72,84,123,22,146,191,8,57,237,97,193,249,147,63,144,4,122,223,242,157,148,191,87,251,116,199,198,50,149,63,84,166,13,125,13,245,150,191,192,223,61,42,47,144,132,63,245,82,122,86,160,201,144,63,163,70,142,40,142,96,140,191,139,62,116,215,48,10,141,63,144,219,158,23,74,149,137,191,41,9,230,114,12,217,133,63,208,28,239,219,51,134,133,191,243,117,138,194,68,168,130,63,42,48,227,192,144,218,143,191,46,86,136,98,60,60,132,191,49,194,87,48,53,250,124,63,103,159,239,29,149,209,162,63,123,213,161,157,24,130,129,63,28,91,116,248,33,172,165,63,153,109,46,168,53,254,164,63,195,212,233,95,67,14,182,191,107,117,193,195,108,51,177,191,129,240,125,84,229,104,157,191,84,73,36,143,32,107,192,191,194,20,23,135,68,62,187,63,34,230,80,49,79,147,165,191,145,121,166,237,209,177,151,191,52,67,5,197,167,183,176,63,92,177,229,97,32,164,120,63,65,226,153,9,158,56,153,63,82,165,46,135,46,234,183,191,195,239,25,50,10,39,121,191,154,35,98,17,152,34,187,63,210,60,149,124,191,30,132,63,157,145,151,123,93,95,167,191,40,145,187,31,219,16,133,191,119,81,157,185,178,75,163,63,89,215,78,96,224,126,146,191,36,22,198,51,125,73,150,63,248,229,46,27,174,10,151,191,201,77,57,126,98,53,165,63,27,123,123,2,62,125,128,63,214,91,182,223,180,102,128,191,99,4,236,68,29,75,148,191,41,49,210,101,36,80,153,191,10,47,90,175,30,246,145,191,56,4,110,69,158,246,155,63,4,168,253,109,137,84,150,191,191,113,148,28,141,51,151,63,166,191,82,86,174,168,146,191,150,90,200,159,192,189,147,63,84,66,75,236,149,196,150,191,164,194,234,222,179,77,145,63,18,133,154,244,132,171,140,191,158,87,50,165,20,121,146,63,254,232,47,212,117,228,145,191,188,21,50,94,38,224,146,63,211,14,182,1,81,52,145,63,82,204,111,36,10,55,151,63,44,181,165,158,108,8,137,191,58,189,57,183,25,202,136,63,179,251,176,227,140,206,144,191,63,19,188,77,191,31,139,191,211,187,61,23,93,133,141,63,213,135,163,209,30,154,148,63,154,245,31,13,113,254,162,191,101,191,7,193,119,96,176,191,177,173,104,94,19,146,174,191,98,214,158,159,229,194,181,191,115,174,180,202,67,54,162,191,4,172,227,41,9,232,188,191,174,251,194,18,167,56,169,63,6,237,86,91,194,251,189,63,198,221,226,211,210,97,181,191,145,240,93,126,1,56,155,191,61,184,228,217,172,156,167,191,140,237,238,221,158,21,163,63,123,144,148,95,184,128,151,63,138,137,162,119,55,131,183,191,178,60,9,80,215,72,171,63,208,169,44,23,151,90,191,63,57,48,28,69,235,43,177,191,32,129,197,205,9,132,136,63,73,245,191,150,178,155,145,191,15,236,180,52,138,49,153,191,151,176,122,159,8,244,171,63,180,41,41,41,102,174,149,191,22,234,254,166,0,2,146,191,4,146,18,72,160,236,144,63,47,110,210,234,104,22,154,63,110,40,63,118,222,3,156,63,247,35,106,171,195,164,148,63,152,168,72,22,37,168,151,63,148,51,217,64,225,78,147,191,123,70,32,253,5,185,141,63,153,122,164,251,21,216,146,63,247,98,126,229,229,78,145,63,72,191,11,109,61,83,144,191,212,73,7,123,203,158,140,191,169,85,197,99,110,48,147,191,42,229,14,254,25,137,148,63,123,186,4,66,147,170,146,191,164,210,201,89,10,8,135,63,120,201,170,36,241,173,145,191,70,235,175,176,153,175,147,191,108,62,135,172,198,68,133,191,103,40,28,41,182,187,142,63,40,81,92,98,239,61,142,191,214,240,8,123,108,3,142,63,52,205,112,105,97,27,146,63,178,158,76,59,101,197,143,191,62,23,66,131,154,157,146,63,86,225,135,91,47,75,145,63,16,165,252,121,2,140,144,63,138,226,31,40,238,59,148,63,118,18,232,2,50,65,153,191,199,228,177,43,77,51,160,191,20,123,145,93,23,202,168,191,241,95,51,81,159,205,178,191,56,205,223,241,15,29,172,191,39,141,55,217,97,47,160,191,53,154,73,64,62,210,155,191,216,137,186,247,147,83,185,191,178,9,177,8,204,5,189,191,247,41,181,143,73,18,108,63,70,181,25,75,14,217,170,63,54,2,77,121,127,61,180,63,239,237,138,165,9,65,161,191,32,192,81,225,46,75,146,63,35,148,208,134,120,73,162,191,61,153,232,5,21,40,161,191,188,108,38,230,150,8,154,63,175,205,119,132,112,64,155,63,74,3,98,119,149,251,142,63,177,97,226,147,178,250,184,191,97,193,20,29,176,154,188,191,78,121,161,196,120,201,174,63,254,251,28,55,136,93,181,63,95,248,151,123,64,61,139,191,50,11,74,73,233,86,143,63,194,135,92,53,102,46,154,63,233,63,60,114,236,157,150,191,14,104,24,193,20,252,147,191,250,124,99,132,253,62,141,63,202,11,134,181,134,197,161,191,253,35,156,118,136,25,172,191,12,195,45,184,154,232,151,63,151,97,93,171,84,101,147,63,94,255,221,113,182,227,134,191,120,213,196,188,25,177,152,63,118,36,210,12,225,222,135,191,12,143,74,8,1,67,148,63,162,104,172,65,192,94,144,63,128,173,2,147,27,254,143,63,161,48,157,73,218,173,149,191,194,243,131,64,142,150,140,63,255,171,62,230,224,100,145,191,15,215,172,249,26,133,147,191,0,43,185,111,235,156,143,191,102,223,153,254,187,205,97,63,243,206,66,31,241,90,147,191,31,128,127,145,97,59,149,191,77,222,214,62,50,24,148,191,133,66,190,192,105,109,160,191,119,1,68,151,190,111,164,191,255,8,67,214,124,113,155,191,224,97,109,71,253,70,166,191,139,215,185,205,163,112,145,191,222,95,67,131,236,69,179,191,196,45,63,144,241,252,159,191,161,52,34,211,155,251,176,191,193,67,195,41,132,202,160,191,85,106,149,251,237,70,183,191,249,98,211,172,223,87,154,191,76,252,177,138,220,119,183,191,136,186,87,138,44,219,147,191,219,146,153,242,198,190,138,63,90,163,10,91,179,163,159,63,140,229,202,125,191,64,180,191,59,83,36,194,58,88,178,191,214,96,103,101,226,204,184,191,255,170,38,206,72,108,153,191,144,248,43,19,84,237,184,191,50,60,231,173,4,54,131,63,97,4,199,177,69,137,152,191,127,200,238,53,183,229,147,191,56,226,135,148,135,199,164,191,69,60,16,185,239,203,147,191,174,190,252,183,193,94,163,191,176,199,9,93,157,1,148,191,94,253,129,5,21,176,146,191,163,129,19,187,17,16,153,63,67,45,121,156,126,130,150,63,239,24,4,213,85,254,137,63,78,28,2,84,42,165,140,63,110,214,254,85,168,52,139,191,132,219,226,171,191,90,146,191,134,153,156,121,40,70,148,191,221,6,64,229,115,179,186,191,255,24,77,189,240,140,185,191,164,175,22,124,3,109,171,191,205,58,51,182,64,69,176,191,5,125,3,119,95,155,131,191,15,252,212,18,189,7,139,191,137,254,116,81,23,31,150,63,35,224,53,79,169,240,184,191,204,26,37,179,120,222,182,191,253,61,183,241,235,192,178,191,155,94,159,141,86,102,179,191,107,52,250,238,30,113,142,191,157,209,161,145,23,115,165,191,32,117,162,85,113,74,131,63,55,78,198,58,40,45,168,191,135,73,189,23,215,254,156,191,182,24,171,23,237,208,137,191,139,61,169,251,252,39,157,63,211,11,111,237,114,112,149,63,110,97,96,42,50,1,145,63,47,163,58,119,71,205,145,63,192,226,182,30,116,72,147,191,95,59,91,12,3,192,144,191,232,144,48,96,156,158,144,191,130,145,221,6,235,110,141,191,138,255,38,149,160,27,150,63,120,136,148,23,147,140,150,63,237,227,240,237,125,250,159,63,168,215,84,5,247,63,157,63,88,78,134,108,20,125,148,63,54,113,86,162,31,241,184,191,197,108,122,207,121,161,174,191,50,156,100,163,162,111,185,63,141,177,108,178,113,71,180,63,203,20,99,233,44,205,136,191,209,95,67,184,131,135,137,63,117,73,188,128,176,181,154,63,36,144,48,216,4,108,162,63,74,3,251,61,207,146,156,191,252,69,16,70,215,116,182,191,138,253,249,209,163,163,178,191,152,111,191,140,221,56,188,63,126,102,126,245,162,61,183,63,73,37,62,58,248,133,142,63,176,133,121,242,130,104,159,191,179,175,203,151,187,91,150,63,183,170,227,68,30,183,163,191,82,112,174,190,236,40,144,191,133,238,132,183,232,84,175,63,254,97,11,246,37,117,157,63,190,18,241,191,190,15,155,63,0,62,129,168,170,249,156,191,184,184,30,67,137,20,145,63,214,203,85,226,11,155,138,191,161,14,8,63,222,29,150,63,19,101,167,125,17,27,150,191,182,62,25,177,102,80,151,63,147,137,76,153,66,37,147,191,230,3,103,207,93,37,136,63,232,6,51,141,225,103,162,191,164,40,160,120,9,107,150,63,46,158,80,43,159,226,144,191,143,128,22,146,154,109,148,63,152,219,69,9,37,140,154,191,175,197,99,119,157,221,144,191,219,107,215,54,59,223,148,63,98,224,208,244,228,254,140,63,64,56,177,247,71,107,143,191,55,198,103,187,55,67,146,63,200,119,249,83,133,198,136,191,49,129,0,39,195,234,129,191,99,156,131,203,115,14,151,63,105,239,97,25,76,2,152,63,41,248,206,220,47,103,157,63,53,247,221,173,171,85,155,63,192,150,205,178,9,188,144,63,148,149,171,46,84,223,182,191,8,124,89,174,44,143,186,63,58,209,62,160,214,160,177,63,149,109,220,29,20,101,180,191,31,133,96,75,23,205,129,191,72,143,250,152,196,213,129,63,88,248,50,41,13,248,146,63,169,1,218,163,161,109,157,63,8,35,6,239,158,190,156,191,214,40,11,197,220,38,186,191,204,206,188,28,167,33,188,63,192,38,255,242,77,87,177,63,116,7,240,204,241,115,182,191,99,53,248,177,133,183,125,63,85,151,86,28,214,79,124,191,22,242,4,64,176,48,135,63,49,123,22,220,112,235,150,191,209,98,26,223,217,43,147,63,252,138,189,249,62,79,163,191,35,202,171,214,211,115,171,63,64,32,72,211,111,238,151,63,184,16,112,82,251,199,165,191,163,164,77,219,139,120,145,63,198,79,189,127,199,170,147,191,126,32,169,82,17,99,140,63,54,176,156,213,112,172,137,191,174,101,241,254,31,59,137,63,67,75,135,157,154,225,145,191,171,123,101,114,188,120,149,191,27,135,146,137,84,113,143,63,58,241,185,218,142,213,145,63,131,107,237,214,75,17,150,191,200,94,28,134,90,210,140,63,238,221,106,229,86,140,142,191,98,243,96,198,111,114,143,191,15,5,243,252,230,37,145,191,69,146,197,232,255,67,141,63,16,174,147,183,13,22,144,191,182,124,69,238,112,101,142,63,191,149,15,82,185,128,139,63,185,163,10,99,157,96,130,191,250,157,66,9,67,71,129,191,69,212,53,235,83,233,145,63,38,47,132,193,86,109,151,63,2,214,183,102,59,25,150,63,252,16,238,48,161,71,151,63,108,78,233,43,96,146,179,191,122,48,77,232,3,109,160,191,187,193,121,195,122,135,179,63,253,248,27,231,101,126,182,191,52,232,137,201,29,14,182,63,120,162,115,127,185,81,146,63,209,116,69,55,72,225,151,63,148,35,79,98,31,51,139,191,195,154,72,67,226,232,151,191,58,24,138,30,154,99,182,191,2,24,29,126,163,5,180,63,95,154,252,167,142,143,183,191,48,11,226,217,192,84,185,63,187,76,155,203,224,60,142,63,98,189,128,184,73,40,144,191,99,239,85,233,183,132,146,191,142,80,140,216,245,103,144,63,157,10,168,97,160,44,160,191,6,178,153,69,106,158,160,63,72,92,84,10,240,181,167,191,56,94,23,51,157,136,168,63,254,123,94,169,129,50,139,63,152,40,141,115,246,162,143,191,221,163,85,48,90,62,142,63,85,250,250,232,5,216,139,191,93,222,19,174,33,138,134,191,230,101,195,58,42,23,138,63,54,120,42,21,73,242,150,191,118,10,251,240,51,54,140,63,181,60,156,85,211,86,147,63,146,128,101,70,54,151,143,63,56,26,6,48,41,159,144,63,155,159,42,201,155,68,146,63,2,123,101,83,249,250,145,191,142,110,1,168,174,17,142,191,158,151,115,57,252,17,146,63,231,30,218,204,148,216,147,63,223,23,76,153,29,248,145,63,214,134,189,15,6,118,145,63,58,195,160,165,104,177,151,191,243,63,173,43,188,203,154,191,105,201,72,77,112,10,185,191,23,64,184,167,104,151,184,63,129,223,58,252,51,18,178,191,55,52,151,25,55,222,178,63,21,191,60,24,193,196,139,63,231,79,31,69,169,133,144,63,28,88,3,102,28,132,143,191,20,233,215,68,135,150,150,191,60,255,194,219,228,137,186,191,162,171,180,4,104,219,184,63,204,128,227,93,95,100,182,191,62,157,14,224,246,98,181,63,96,243,149,149,11,14,134,63,235,45,148,208,99,212,135,191,121,243,38,170,125,152,135,191,246,173,118,208,70,21,138,63,95,94,78,197,82,115,143,63,156,220,83,207,24,120,146,191,120,197,108,95,232,97,166,191,161,235,148,124,11,213,165,63,24,95,24,132,22,237,160,191,87,227,126,202,10,102,160,63,19,6,146,228,110,213,131,63,189,92,16,59,47,77,141,191,54,103,67,75,71,84,132,63,175,31,126,163,218,102,131,191,111,119,60,128,149,208,145,191,20,179,250,182,102,194,151,63,143,35,244,210,144,30,152,191,242,116,221,25,42,21,148,63,42,225,242,222,91,158,149,191,90,208,5,86,11,224,137,191,189,77,141,200,39,83,138,63,35,171,56,204,31,94,145,63,25,50,215,244,222,182,140,63,69,255,187,160,50,177,145,63,93,104,146,213,17,172,142,63,163,50,114,12,178,4,145,63,34,208,2,155,55,163,146,191,90,74,61,217,117,43,147,191,158,85,49,144,84,41,148,191,142,75,154,31,240,167,181,191,158,241,108,104,3,140,178,63,44,110,75,150,132,230,184,63,152,109,160,181,81,52,180,191,121,174,121,44,140,48,138,63,158,241,182,248,224,78,134,63,66,172,19,51,96,47,143,191,121,77,231,216,155,128,155,191,250,142,28,74,46,198,149,63,254,244,65,130,181,174,184,191,150,12,36,240,148,102,181,63,9,66,14,97,13,218,185,63,218,128,89,227,122,73,183,191,238,187,10,85,179,254,133,191,222,98,165,215,105,70,135,191,141,45,38,33,11,183,136,63,188,126,103,229,197,230,139,191,46,217,16,21,34,213,149,63,128,46,40,26,194,52,148,191,85,4,48,24,20,92,164,191,133,5,54,229,33,230,154,63,233,179,136,165,74,56,171,63,74,17,225,145,251,41,168,191,150,69,203,133,224,226,147,63,251,82,226,23,102,70,134,63,251,171,166,241,68,1,145,63,89,29,61,210,236,29,154,191,93,192,235,64,245,85,161,191,161,122,9,163,212,126,146,63,159,30,231,226,243,178,143,191,167,137,81,175,18,95,145,63,21,224,58,83,230,92,141,63,57,58,30,91,31,139,148,191,137,147,92,5,174,231,155,191,67,216,236,18,172,234,180,191,1,99,203,176,191,149,181,191,121,11,185,93,128,60,180,63,104,88,176,160,178,183,180,63,185,72,143,141,13,193,131,191,5,23,62,228,119,56,183,191,66,109,84,65,185,232,184,191,245,8,253,147,160,48,182,63,56,166,163,76,191,156,184,63,55,192,254,23,26,182,144,63,157,195,81,176,20,84,143,191,175,185,53,193,94,218,163,191,17,159,40,55,240,5,168,191,3,181,5,198,96,133,160,63,191,182,110,211,228,194,164,63,80,8,50,254,157,25,126,63,218,235,122,65,164,58,147,191,128,150,46,5,60,140,133,63,217,76,94,252,227,16,149,63,51,130,103,184,230,14,158,63,200,115,222,47,194,227,144,63,94,135,8,8,46,3,154,63,9,92,63,131,139,104,143,191,6,184,237,189,167,20,181,191,179,177,94,205,71,211,182,191,154,39,4,157,41,176,181,191,243,152,43,92,26,157,184,191,13,135,104,123,90,104,183,191,237,119,200,240,106,21,186,191,224,225,89,38,94,206,184,191,62,50,206,246,246,130,185,191,176,32,146,114,149,52,161,191,137,193,11,130,210,21,164,191,2,162,63,153,235,222,165,191,206,54,159,158,89,16,150,191,80,164,68,163,23,205,168,191,228,149,78,104,25,13,147,191,214,90,159,216,229,228,135,191,28,244,141,168,75,153,144,63,229,209,131,14,144,153,148,63,50,46,83,149,227,146,140,63,171,200,148,108,54,24,147,63,219,169,208,75,41,175,11,192,171,159,93,95,54,170,226,63,242,217,216,63,188,76,233,63,239,111,26,8,99,121,238,63,6,53,155,233,94,209,238,63,160,17,37,19,54,87,236,63,42,218,251,143,174,111,236,63,223,163,64,184,95,197,189,191,200,163,96,199,118,249,224,191,103,68,252,159,170,35,225,191,122,136,157,127,3,19,204,191,225,130,127,206,20,165,185,191,177,69,14,208,174,206,210,63,193,248,11,0,235,62,225,63,1,81,13,104,255,138,193,191,179,46,105,146,8,214,240,63,123,133,7,38,167,95,240,63,124,216,3,32,105,86,209,191,14,225,44,64,106,38,223,191,48,41,144,114,124,251,241,63,146,55,162,31,55,52,212,191,36,4,36,115,139,1,167,63,181,246,92,238,30,94,239,63,104,53,65,222,4,158,233,63,72,231,151,238,198,164,240,191,112,55,40,214,126,51,235,191,65,91,200,247,62,38,192,63,180,246,150,195,225,194,214,191,92,67,114,101,90,249,218,191,57,17,72,122,183,119,219,63,54,4,187,170,1,69,220,63,163,95,180,68,157,137,190,63,63,16,130,120,61,157,169,191,3,201,144,151,14,235,156,191,159,78,229,176,45,142,183,191,220,17,196,195,82,136,163,63,75,91,145,180,208,229,158,63,188,216,250,81,67,146,237,63,5,112,237,98,173,74,240,191,109,18,121,183,14,39,171,63,33,11,96,240,72,10,232,191,158,65,105,90,75,165,234,63,235,194,255,6,48,6,179,191,73,50,247,152,173,45,213,191,234,222,215,10,119,121,217,63,99,4,114,38,188,111,208,63,48,44,62,158,195,83,212,191,197,223,113,207,140,111,184,191,18,167,41,103,143,72,173,63,72,163,84,30,39,234,178,63,51,142,205,208,134,98,147,63,213,78,101,115,225,60,144,63,195,31,212,151,15,222,232,63,31,103,104,243,112,64,188,63,108,203,213,69,144,62,233,191,59,124,108,150,36,236,192,191,227,47,102,207,171,73,236,63,236,17,131,169,173,76,195,63,195,133,81,190,147,155,236,191,184,18,216,129,6,10,202,191,98,35,52,60,6,40,203,63,36,124,102,103,42,202,202,191,151,39,217,38,81,238,200,63,151,19,207,239,108,66,171,63,230,48,7,27,194,66,183,63,14,35,36,23,103,152,167,191,122,251,9,120,111,159,184,191,40,186,149,149,173,106,146,63,205,171,38,98,60,199,148,191,77,182,221,73,59,72,129,63,99,95,161,188,64,105,168,191,145,28,72,0,223,28,236,63,201,61,54,245,127,133,178,63,56,186,253,175,1,232,160,63,130,11,165,141,120,40,237,191,231,35,85,248,170,225,167,191,12,216,88,70,23,225,228,63,97,78,9,188,133,28,173,63,211,201,45,166,151,130,231,191,189,77,9,12,180,75,199,191,107,234,92,235,58,238,196,63,35,243,207,92,174,46,205,191,68,203,106,18,170,251,152,191,73,211,223,243,125,101,192,191,73,172,183,60,219,102,150,63,122,214,188,82,10,140,177,63,150,84,227,209,223,18,148,191,110,141,4,125,140,200,145,63,170,200,205,236,51,219,172,191,97,0,229,111,217,105,188,191,225,56,199,193,106,141,234,63,78,173,229,247,186,119,226,191,22,25,144,109,161,178,236,191,104,84,220,200,162,99,120,191,104,3,40,213,1,121,230,63,16,212,107,229,154,224,195,63,72,224,244,18,206,86,199,63,84,222,218,10,36,42,194,63,24,163,132,196,105,102,117,63,25,252,181,59,232,154,167,191,150,31,22,177,140,237,178,191,249,32,91,188,157,247,232,63,135,93,215,180,2,174,235,63,59,203,166,230,155,22,225,191,210,19,15,202,16,212,228,191,135,66,41,37,48,225,189,191,116,239,60,52,94,230,195,191,226,13,124,134,52,86,190,63,111,212,135,61,86,58,193,63,27,120,255,54,172,68,193,191,255,72,68,44,170,181,178,191,185,138,8,211,36,230,173,191,67,180,202,205,125,114,164,191,109,1,39,81,26,182,164,191,33,152,38,15,13,48,175,191,131,66,25,34,111,113,172,63,161,149,7,241,23,174,227,63,216,127,8,39,39,232,192,63,230,45,126,175,161,114,227,63,107,64,195,81,231,74,193,63,83,78,141,76,244,251,230,63,181,48,40,114,158,159,194,63,13,234,212,213,24,62,231,63,138,80,195,143,44,219,183,63,51,85,69,240,140,70,189,191,54,97,220,1,114,29,190,191,247,164,216,144,87,8,196,191,116,191,129,151,220,148,193,191,157,96,255,13,80,22,181,63,229,106,206,62,189,63,179,63,8,85,250,172,129,69,182,63,143,13,224,132,130,15,183,63,90,64,150,238,187,245,152,63,202,102,196,75,117,138,183,63,150,180,109,84,47,115,173,191,114,88,97,68,210,181,231,63,175,103,139,51,23,166,169,191,222,62,255,110,196,84,231,63,233,202,53,126,129,50,173,191,2,51,219,150,85,143,224,63,83,37,107,123,57,174,175,191,139,91,147,218,169,8,225,63,154,202,206,241,62,63,191,191,80,205,190,77,168,91,158,191,248,40,40,252,237,132,180,191,215,59,62,152,224,170,168,191,52,175,138,163,60,102,177,191,69,69,16,150,33,215,161,191,122,57,59,216,86,187,156,191,140,95,3,181,45,184,169,191,179,44,190,85,9,85,111,191,130,38,182,53,242,14,178,63,30,67,243,80,199,212,110,63,39,92,144,14,11,109,228,63,252,229,241,26,25,74,220,63,241,69,167,60,227,28,232,191,53,238,10,125,39,94,225,191,111,106,54,174,77,101,192,191,234,131,190,137,205,135,192,63,162,76,55,163,83,249,185,63,220,229,27,100,142,189,187,63,47,195,64,181,94,244,173,191,180,237,229,223,225,79,115,191,76,97,164,214,185,202,167,63,101,193,170,27,5,223,115,63,93,182,89,115,221,33,227,63,116,33,5,140,242,47,230,191,104,143,16,199,149,80,218,191,100,219,184,248,82,95,224,63,115,186,246,181,255,208,190,63,166,100,95,230,52,33,177,191,16,50,219,16,142,62,165,63,64,120,42,60,82,43,179,63,224,209,31,197,78,7,222,63,139,220,70,69,140,56,176,63,203,7,254,198,206,224,223,191,178,123,188,75,15,198,171,191,135,40,180,9,17,225,226,63,218,54,110,9,205,49,177,63,123,71,205,105,111,126,227,191,6,121,36,75,139,246,180,191,30,141,190,34,71,207,184,191,157,118,216,215,63,66,184,63,246,229,199,108,126,174,177,63,213,39,59,78,15,124,179,191,45,203,45,18,83,233,157,63,45,189,75,39,181,234,170,191,161,226,20,227,144,96,172,191,156,105,9,232,245,93,226,63,192,78,120,137,233,3,227,191,106,86,44,185,204,18,154,191,8,135,218,115,24,165,219,63,110,34,25,220,15,131,169,63,230,61,222,17,47,180,218,191,43,170,89,59,252,230,184,191,164,203,76,232,108,249,166,191,168,198,87,248,239,209,222,63,198,179,146,137,45,179,214,191,190,214,65,164,130,126,226,191,168,1,36,187,122,36,219,63,200,62,215,55,54,15,179,63,67,201,74,143,141,1,180,191,55,153,11,214,5,12,160,63,107,91,72,85,199,45,154,191,215,231,180,71,216,81,222,63,46,202,26,207,143,40,225,63,102,203,60,56,170,233,215,191,69,241,164,115,80,166,218,191,215,75,43,115,45,51,178,191,182,201,19,39,130,49,220,63,124,120,217,183,227,113,222,63,113,106,20,224,253,184,219,63,196,239,222,113,55,203,220,63,41,167,2,255,60,246,187,191,120,246,126,25,16,129,185,191,168,225,245,166,136,52,157,63,87,138,86,238,174,20,160,63,103,22,100,127,200,82,143,63,215,201,48,42,153,20,236,63,65,68,56,200,157,242,211,191,49,0,85,3,87,197,240,63,175,58,116,101,53,150,210,191,19,8,25,76,153,122,233,191,127,98,97,184,183,2,207,63,193,79,158,195,179,52,241,191,137,27,219,169,199,241,213,63,201,124,48,96,94,246,162,63,197,188,119,145,120,245,151,191,97,156,122,112,49,190,182,191,139,172,151,93,222,103,182,63,82,217,173,65,135,84,131,191,194,212,94,13,133,121,134,63,53,78,17,130,161,38,150,191,246,23,16,223,73,48,156,191,60,239,253,68,21,250,156,63,146,179,99,171,22,251,171,63,35,222,26,63,109,165,173,191,189,18,47,83,110,109,157,63,79,199,50,239,159,248,156,191,161,243,1,252,27,94,149,63,111,16,24,196,235,124,149,191,58,165,123,231,77,24,167,191,8,7,182,191,243,152,166,63,63,49,46,53,105,205,148,63,212,62,230,75,20,148,160,191,108,0,172,104,205,50,165,63,56,27,209,55,217,76,164,191,225,119,156,163,201,221,149,63,199,251,205,159,87,59,169,191,249,219,123,118,116,202,162,191,242,193,139,182,199,124,160,63,153,240,4,164,247,89,162,63,13,51,79,117,119,252,160,63,162,88,1,213,115,18,168,191,104,221,2,100,11,223,166,191,116,225,129,236,21,107,140,63,180,34,27,85,225,140,169,63,254,23,71,215,90,6,171,63,114,137,103,222,56,64,171,63,77,248,40,78,143,206,168,63,241,247,68,96,88,97,166,63,16,129,229,20,60,86,176,63,194,16,158,179,239,133,171,63,140,13,151,108,108,243,166,63,1,204,71,12,215,60,150,191,224,41,178,205,84,193,169,63,23,15,211,38,77,66,171,63,33,77,50,18,20,188,178,191,138,242,242,126,110,118,171,191,138,123,137,133,189,108,150,191,192,204,84,114,61,59,148,63,218,170,12,119,23,97,172,63,59,194,75,217,174,115,177,191,97,201,20,20,139,134,167,191,163,245,188,27,105,164,173,63,62,22,191,189,178,146,143,191,94,177,254,50,212,40,157,191,196,105,120,125,155,13,169,63,94,66,248,186,199,43,168,191,8,201,45,130,224,244,177,63,108,102,31,184,83,118,176,191,72,219,165,193,148,153,148,191,240,198,35,158,20,28,176,63,154,14,72,239,229,28,179,191,21,86,222,80,218,92,172,63,135,226,182,106,92,210,168,191,104,225,54,180,253,84,155,191,176,226,138,8,163,128,167,63,174,48,83,50,33,212,173,63,79,80,197,85,118,128,175,191,146,167,159,228,18,34,179,191,191,93,255,10,159,60,177,63,40,132,148,211,202,194,153,191,73,21,216,55,39,212,158,63,205,77,76,183,69,181,173,63,6,132,199,98,149,78,179,63,80,132,146,172,147,220,169,191,182,3,249,75,199,202,176,191,146,203,253,37,10,18,175,63,53,187,37,162,44,153,174,63,94,182,11,250,225,106,176,63,99,111,235,231,227,160,177,63,252,78,99,111,154,252,150,191,73,144,181,237,87,230,190,63,100,58,67,141,9,204,179,191,129,195,143,44,94,86,234,63,142,164,200,220,223,181,198,191,128,215,141,206,14,147,179,63,112,82,0,73,168,206,231,191,187,252,30,17,168,93,201,63,55,30,106,79,87,113,240,191,202,238,86,44,104,192,204,63,90,153,215,14,44,245,238,63,192,81,251,3,228,223,207,191,118,32,169,120,59,134,173,191,182,60,170,250,79,250,172,63,225,223,1,197,144,102,144,63,128,117,225,55,117,13,151,191,245,82,147,201,11,110,127,63,8,243,242,31,176,114,150,191,91,56,191,22,204,161,153,63,130,58,161,164,172,53,154,63,212,191,77,225,62,130,155,191,252,202,127,145,33,124,134,63,208,38,31,163,212,128,133,191,183,34,160,58,3,142,199,63,167,122,223,238,115,139,169,191,60,11,181,103,219,199,236,63,82,124,143,57,131,35,196,191,121,178,160,141,0,162,236,191,232,8,45,179,145,0,197,63,120,117,62,182,164,26,189,63,35,243,156,253,117,249,232,63,148,238,33,246,40,27,196,191,127,74,239,56,8,65,196,191,202,120,32,75,28,248,232,191,96,202,62,166,7,152,195,63,35,15,24,206,236,80,191,63,146,78,120,35,134,113,168,191,115,48,61,75,209,201,163,63,188,171,164,227,214,17,138,63,106,253,110,17,88,216,138,191,252,253,176,174,123,1,152,63,77,195,27,222,231,119,151,191,190,234,89,190,104,146,151,63,40,212,195,193,25,68,151,191,147,103,132,76,166,232,149,63,1,63,165,4,201,244,146,191,199,136,5,31,199,87,143,191,95,231,231,229,132,220,145,63,235,212,108,182,83,141,198,63,245,38,38,2,17,186,180,63,68,15,243,8,183,13,181,191,169,234,255,59,50,90,176,63,43,234,95,43,46,198,231,63,204,19,192,67,17,70,180,191,192,39,147,218,159,19,228,191,48,141,23,183,209,227,178,63,152,22,235,246,139,83,235,63,231,12,156,249,240,56,173,191,97,170,242,112,130,214,236,191,2,130,188,143,31,10,198,63,157,213,236,43,250,251,160,191,223,143,93,161,63,128,155,63,4,82,201,45,159,87,160,191,162,6,37,11,60,222,163,63,85,192,83,181,226,130,154,63,70,54,85,0,241,72,161,191,10,14,48,167,54,54,155,191,254,117,249,124,200,57,160,191,221,227,11,111,159,3,152,191,15,194,162,86,43,203,158,191,35,147,132,155,20,189,201,63,42,147,104,22,206,147,189,63,209,124,151,236,211,63,178,63,5,143,239,136,81,89,170,191,189,117,208,203,212,149,183,191,106,163,232,17,14,89,173,191,47,184,255,187,181,154,177,191,199,14,208,9,156,144,144,191,29,120,209,214,10,144,231,63,31,178,196,205,188,61,153,63,177,32,53,175,15,76,236,191,79,253,91,16,233,100,195,63,68,87,165,250,192,160,224,191,180,210,196,65,221,54,132,191,225,209,249,57,236,242,232,63,55,53,220,181,174,22,151,63,234,48,69,59,180,234,166,191,255,51,87,144,33,120,146,63,138,184,111,151,213,80,158,191,170,177,133,30,30,14,167,191,80,211,206,135,174,128,159,63,16,194,63,178,159,12,140,191,155,214,134,173,204,3,146,191,53,133,65,93,182,60,155,191,196,156,174,246,244,54,191,63,87,85,149,62,57,79,174,191,239,75,3,12,120,58,183,63,204,35,90,20,232,139,177,63,120,119,5,90,245,176,170,191,142,29,227,125,14,146,172,191,53,67,67,132,78,104,172,191,209,136,133,63,42,32,166,191,24,201,248,44,249,112,145,191,212,250,180,94,166,132,229,63,224,142,56,253,217,241,143,63,88,245,91,221,118,1,224,63,249,243,111,50,186,27,172,63,239,83,205,247,185,101,147,191,135,104,9,4,185,183,234,191,29,41,94,250,142,10,150,63,51,177,240,199,61,66,230,191,167,248,255,87,231,215,147,63,200,140,183,144,17,165,164,191,236,253,75,20,255,103,146,63,205,243,93,127,210,56,156,63,251,245,104,30,36,63,167,63,182,5,196,165,221,85,162,191,252,141,199,108,91,126,165,191,52,141,41,156,120,194,150,191,73,104,18,227,79,190,171,63,26,236,248,205,149,1,192,191,184,2,198,207,88,73,184,63,229,161,250,70,246,128,175,191,75,65,222,251,167,246,167,191,99,57,15,216,245,104,230,63,130,180,169,251,2,84,182,191,206,209,198,133,101,176,231,63,127,20,78,193,58,196,180,191,5,154,231,101,133,170,223,63,200,219,178,191,63,98,188,191,42,90,152,86,251,235,225,63,59,62,66,225,146,71,188,191,49,59,83,76,149,142,143,63,187,136,203,221,154,177,150,191,58,47,6,125,172,202,153,63,150,114,167,93,67,119,161,63,97,74,193,172,29,93,166,63,119,209,21,94,135,19,171,63,216,26,46,121,175,161,168,63,45,163,149,90,20,63,166,63,72,83,1,163,142,220,161,63,29,177,55,157,116,76,160,63,64,105,120,63,72,240,157,63,64,58,148,96,94,216,163,63,142,14,177,62,121,139,161,191,99,105,199,128,196,99,161,63,175,43,130,185,114,168,153,191,217,84,242,28,43,35,149,191,84,208,194,137,50,245,160,191,74,178,203,128,88,161,160,63,149,158,120,220,168,25,201,191,204,140,141,55,223,149,167,63,103,115,105,122,7,64,191,191,27,34,173,11,243,21,178,63,141,228,221,60,37,160,155,191,176,89,56,25,199,154,178,63,250,215,168,157,221,97,186,63,34,59,20,51,92,71,181,63,200,165,74,166,151,225,223,63,78,128,65,222,126,158,191,63,141,229,252,240,75,117,223,63,8,190,183,249,138,115,189,63,207,251,11,44,179,248,228,63,233,123,151,122,68,200,180,63,236,231,157,136,92,108,230,63,64,105,9,39,253,54,161,191,70,135,43,90,249,138,175,63,192,112,142,163,230,237,151,191,122,217,106,122,87,71,163,63,128,246,147,17,47,228,166,63,60,205,234,254,251,39,175,63,70,45,219,76,252,162,171,63,9,248,200,216,149,249,137,191,0,173,241,207,35,56,138,63,105,67,70,56,200,70,150,191,188,166,230,116,200,23,149,63,148,208,14,207,112,212,163,63,153,66,104,244,195,158,161,191,176,88,253,201,112,228,152,63,174,80,6,183,82,72,157,191,19,17,7,7,226,163,161,191,168,207,77,208,137,177,166,63,97,180,110,207,226,105,165,63,59,149,159,71,142,89,174,63,248,199,221,30,194,196,146,63,84,240,45,24,143,136,149,191,197,250,249,167,199,80,151,63,146,70,50,239,218,224,147,191,164,194,13,252,228,99,159,191,191,142,31,182,91,63,165,191,249,12,77,82,73,120,167,191,48,105,117,235,73,105,171,63,48,136,109,229,105,224,160,63,68,152,71,200,157,211,157,63,228,246,44,94,240,206,163,191,202,34,4,104,221,252,162,191,16,193,143,251,196,251,160,63,234,247,88,243,97,42,160,191,42,232,129,71,244,8,153,191,49,211,94,175,134,150,157,191,100,204,24,31,38,175,158,191,15,223,164,28,59,81,154,63,56,193,144,232,238,54,160,63,30,6,1,117,10,17,157,63,152,152,158,65,94,73,156,191,150,96,109,128,49,98,152,191,59,190,118,213,107,132,160,191,0,250,55,215,148,192,160,63,161,73,119,169,135,14,158,63,215,130,140,88,10,168,148,63,148,15,34,254,191,251,159,63,235,103,8,180,244,7,149,63,121,14,72,160,60,101,162,191,102,96,85,206,16,71,160,191,91,154,199,172,67,175,199,191,237,110,177,106,197,240,185,191,15,46,78,85,196,177,177,191,140,13,249,239,250,27,181,63,240,143,250,139,134,240,183,63,135,210,156,199,162,137,174,63,179,168,79,98,115,6,177,63,86,38,189,222,4,225,224,63,26,198,32,152,8,202,231,63,114,181,204,62,242,113,212,191,7,58,29,118,246,97,225,191,69,232,44,46,222,115,159,191,129,116,92,233,83,236,175,63,167,133,195,53,30,231,153,191,254,81,22,246,97,176,163,63,179,19,151,154,221,137,177,63,112,183,31,158,255,237,166,191,84,132,105,255,126,209,171,63,122,238,120,85,228,66,175,191,128,158,65,241,180,51,153,63,182,111,223,70,243,59,155,191,211,105,233,254,0,240,154,63,229,113,156,3,228,47,154,191,60,41,253,241,7,64,160,63,98,91,125,181,172,185,163,191,45,99,227,114,43,173,161,191,63,43,208,200,125,71,185,63,151,221,103,75,113,77,180,63,32,247,69,50,106,200,169,191,44,225,84,46,150,196,163,191,131,190,33,130,115,84,156,191,74,157,25,18,234,32,177,191,15,50,255,12,23,237,176,191,128,24,228,112,230,182,177,63,184,107,78,155,37,157,165,63,120,222,197,227,130,117,151,191,190,94,168,194,136,11,149,63,242,210,42,171,54,25,162,63,40,64,240,160,73,172,172,191,61,1,102,95,164,20,166,191,42,95,29,232,236,92,150,63,126,217,148,242,83,216,162,191,22,115,130,123,204,157,170,191,196,152,15,201,14,240,164,191,105,144,186,205,127,253,153,191,208,65,213,91,147,239,151,63,85,117,215,86,243,180,151,63,12,171,125,105,10,137,149,63,107,61,55,40,168,130,156,63,163,20,185,32,168,68,155,191,184,137,120,235,48,196,155,63,199,42,247,254,125,212,161,191,113,104,236,215,165,35,166,191,39,94,104,75,31,133,172,191,36,56,136,220,199,226,166,191,205,101,75,150,119,87,167,191,200,198,7,149,196,74,158,63,214,67,255,52,176,212,158,191,208,40,163,230,56,243,158,63,176,110,215,246,223,75,156,63,158,184,32,165,79,142,163,63,220,105,129,250,104,0,159,63,78,118,159,170,15,5,148,63,54,81,56,125,218,129,189,191,253,39,204,104,57,21,180,191,198,75,13,134,199,41,178,191,232,99,139,100,242,40,175,63,118,182,85,156,21,14,178,63,58,82,249,30,68,166,176,63,48,221,4,173,140,149,176,63,245,69,80,48,140,252,224,63,245,15,158,254,53,158,210,191,72,205,92,116,158,83,229,191,129,65,54,116,9,127,221,63,151,117,255,252,207,177,163,191,203,89,75,72,181,142,161,63,113,44,98,57,166,51,154,63,232,98,179,236,236,107,156,191,11,6,17,148,235,251,161,63,163,191,105,245,118,233,169,191,58,92,60,37,198,105,177,191,35,15,178,39,239,196,173,63,186,201,95,134,83,52,157,63,73,118,128,20,198,187,164,63,6,255,40,193,245,166,166,191,24,12,145,44,55,59,163,191,196,211,57,236,149,80,159,63,62,10,160,8,9,173,158,63,28,107,141,115,35,243,167,191,98,36,25,155,211,213,153,63,83,177,215,218,226,128,165,191,158,133,69,234,11,136,157,63,57,36,87,12,40,142,157,191,217,220,157,20,241,212,154,191,60,168,156,192,188,163,157,63,1,102,14,65,182,122,158,63,163,93,59,214,117,148,146,191,88,206,50,218,123,25,148,63,89,88,94,5,41,43,153,63,171,17,124,88,56,119,149,63,116,206,145,27,40,110,152,191,108,157,168,231,129,108,162,63,166,235,185,161,31,237,155,191,136,65,80,143,235,111,172,191,22,150,88,49,80,244,162,63,76,15,93,166,145,209,166,191,227,31,131,159,58,91,167,63,148,227,52,107,47,251,157,63,33,223,20,83,13,79,168,63,127,52,72,226,55,145,150,63,24,163,15,191,207,119,151,63,66,114,115,142,86,103,150,63,169,242,96,96,7,123,162,63,7,213,52,189,13,202,145,63,65,63,147,81,94,222,175,63,247,137,213,64,62,221,177,191,78,3,218,79,197,112,152,191,188,172,32,139,116,212,161,63,162,1,17,229,136,186,167,191,164,55,32,225,151,12,163,63,76,110,224,198,39,253,149,63,44,138,99,68,184,40,158,191,111,155,227,252,83,8,150,191,114,121,209,191,184,244,163,191,124,133,141,81,10,235,201,63,100,185,174,222,30,172,179,191,54,181,137,32,157,227,212,63,251,239,134,196,120,239,177,63,213,245,247,212,9,251,205,63,11,23,244,169,23,222,169,191,176,5,165,129,31,12,227,63,70,237,89,193,198,202,185,191,218,2,213,70,112,127,227,191,129,97,125,113,87,160,215,63,156,183,247,143,157,78,168,191,5,244,72,87,153,155,216,191,244,228,166,112,108,128,171,63,20,96,241,45,45,10,146,63,222,42,200,37,135,211,142,191,231,183,9,96,155,53,174,63,175,59,147,25,193,101,178,191,96,64,240,161,230,39,173,63,171,134,48,133,73,223,147,191,203,116,170,47,163,253,169,191,187,23,126,161,21,252,146,63,205,218,78,220,190,178,156,63,77,217,75,220,200,41,160,191,175,211,214,232,192,109,154,63,198,212,35,192,127,7,162,191,72,69,25,237,138,198,161,191,118,46,197,80,9,154,149,191,137,56,147,83,219,232,165,63,59,82,68,70,199,7,161,63,175,180,163,145,68,26,161,191,220,239,149,237,193,141,163,191,148,168,4,229,79,250,156,63,193,196,253,218,106,202,162,63,44,150,183,187,248,217,162,191,24,25,36,40,5,246,151,63,207,107,71,155,36,205,158,191,45,11,10,225,25,6,165,191,6,172,216,114,67,102,151,191,157,86,220,48,8,79,171,63,116,10,90,93,1,202,153,191,12,216,148,143,254,126,166,191,216,46,105,69,159,146,165,63,26,144,175,3,236,210,166,63,42,31,127,71,32,194,162,191,11,103,0,174,227,64,160,191,33,141,129,155,98,9,145,63,153,246,75,112,248,63,165,63,177,154,29,167,33,223,160,191,103,202,68,237,135,157,163,191,242,171,59,59,34,214,169,63,62,237,21,233,28,209,154,63,56,41,143,34,31,226,159,63,203,58,100,79,191,206,162,63,61,8,56,160,30,198,167,63,255,110,145,252,140,57,163,191,6,172,111,195,46,204,155,191,231,171,138,197,209,88,159,63,217,62,235,58,162,158,150,191,23,26,152,250,45,254,149,63,241,166,206,94,88,202,185,63,197,230,55,66,161,5,182,63,65,6,199,68,166,151,122,191,43,46,124,78,186,119,182,191,42,179,83,199,249,254,180,63,96,162,185,200,252,28,191,63,171,173,249,113,38,154,178,191,150,210,106,125,255,108,185,191,113,188,186,195,74,65,185,63,215,135,234,34,98,82,179,191,73,72,215,107,146,38,165,63,47,185,135,227,252,93,180,63,48,158,135,155,26,96,171,191,98,49,138,245,115,72,171,63,191,127,149,238,253,203,182,191,87,59,12,244,150,209,177,63,87,214,154,163,239,120,180,63,189,82,97,83,141,56,166,191,85,135,103,168,77,109,172,191,15,199,52,17,239,57,182,63,226,88,36,128,223,98,132,63,36,120,115,90,107,91,193,191,188,57,125,130,227,212,160,63,181,0,66,190,41,245,123,191,19,130,137,184,199,251,189,63,186,203,45,95,208,55,116,63,75,25,24,199,89,240,187,191,234,35,138,246,55,223,161,191,70,35,125,248,170,199,122,191,246,47,85,245,245,70,186,63,90,66,35,245,50,71,158,63,175,239,116,193,210,117,169,63,55,21,31,143,253,36,165,63,90,16,117,174,55,227,150,191,42,78,31,36,228,124,193,63,143,144,35,85,223,6,185,63,114,143,57,89,245,191,151,63,143,112,7,60,119,101,192,191,190,132,139,143,211,177,115,63,185,1,126,12,212,19,192,63,102,211,244,95,76,233,189,191,31,54,152,113,166,187,190,63,159,135,52,239,25,233,180,191,226,97,7,84,12,253,181,63,39,53,229,15,9,194,169,191,3,233,51,251,233,124,166,63,63,97,16,106,74,27,185,191,228,161,210,24,74,15,186,63,73,142,2,96,100,112,179,191,101,80,54,30,103,76,182,63,221,152,108,102,219,47,160,191,38,136,197,226,57,151,114,191,80,230,74,202,242,237,118,191,14,182,246,165,59,26,161,63,222,20,244,192,10,127,201,191,105,86,0,164,24,230,114,63,141,36,71,75,253,255,150,191,105,87,109,30,239,131,196,63,39,114,207,186,152,62,164,63,201,194,111,140,24,224,196,191,32,223,153,30,231,241,168,191,47,81,181,11,84,136,112,63,33,173,40,247,210,74,165,191,161,229,68,60,151,133,196,63,73,182,164,191,65,249,181,63,229,102,85,76,214,193,147,191,225,29,131,79,40,21,160,63,137,221,182,185,208,87,159,191,43,237,139,127,158,237,155,191,229,26,53,120,119,131,153,191,1,109,11,145,188,185,145,63,209,66,4,186,12,250,146,191,109,35,19,56,237,154,140,63,183,192,224,187,166,5,149,191,226,124,182,205,163,37,161,63,68,70,50,36,94,53,151,191,27,162,2,145,109,70,161,63,233,175,204,48,31,88,160,191,10,186,30,192,112,9,148,191,226,45,143,155,143,68,184,63,51,178,253,48,194,237,199,191,26,109,201,156,84,33,166,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([15,143,26,39,4,22,165,63,152,171,38,140,30,207,204,63,222,169,246,240,62,178,179,191,56,196,221,28,51,3,197,191,30,175,193,163,150,1,176,191,154,222,228,109,215,18,197,63,19,35,61,70,74,46,177,63,39,81,1,244,168,44,215,63,12,87,255,34,237,49,198,191,23,128,159,99,255,239,184,191,81,127,137,219,61,48,218,191,29,34,182,184,34,100,198,63,45,241,62,96,174,14,175,63,208,230,63,20,253,32,224,63,38,198,46,121,208,236,180,191,76,91,3,109,110,197,224,191,216,29,71,177,181,28,172,63,44,82,175,116,8,59,172,191,112,53,186,237,223,53,141,63,162,51,96,149,37,202,178,63,127,117,37,49,7,53,177,191,40,209,234,251,88,203,163,191,252,5,74,1,110,255,174,63,71,166,147,239,102,255,166,191,234,202,165,1,184,74,152,63,189,96,51,74,3,66,157,63,233,20,251,186,34,212,153,191,121,4,48,222,230,41,167,63,240,119,67,163,145,102,170,191,96,104,32,29,159,228,152,63,32,123,145,226,204,113,152,63,92,106,153,148,140,47,155,191,151,219,250,81,92,115,149,191,61,163,181,93,91,223,154,63,33,31,26,166,54,116,161,191,48,75,89,232,12,225,155,191,50,83,166,115,238,163,154,63,109,107,250,110,140,246,161,63,76,44,22,127,35,50,162,191,210,130,232,1,189,177,166,63,231,105,176,52,41,17,160,63,174,180,123,176,82,47,162,63,169,70,250,33,81,42,158,63,107,76,39,52,47,240,169,191,144,103,160,167,224,155,160,191,233,90,56,78,144,128,155,191,45,212,17,192,54,243,147,191,205,134,159,73,24,249,156,63,158,29,237,214,57,16,164,191,112,30,153,251,236,222,162,63,233,44,21,181,245,227,146,63,64,98,250,12,163,250,152,191,7,61,25,69,215,112,155,191,227,247,138,86,241,29,146,191,169,5,51,56,115,89,150,191,243,204,57,78,185,49,165,191,178,97,38,167,80,97,186,63,48,93,214,22,186,120,165,63,174,249,180,54,71,2,163,191,252,92,99,238,146,158,149,63,87,37,115,43,134,5,192,191,79,218,50,171,9,33,181,63,160,15,131,35,163,114,128,191,177,157,145,223,240,151,194,63,250,173,93,97,151,37,164,191,38,137,47,215,228,135,190,191,52,17,201,27,57,5,162,63,22,133,140,54,45,123,194,63,81,182,153,138,93,40,192,191,184,153,34,63,125,237,180,63,179,163,186,167,163,248,188,63,189,146,151,176,119,28,174,191,53,54,220,125,89,13,132,191,108,240,237,192,251,148,179,191,71,197,219,199,123,39,165,63,44,220,78,28,209,71,188,63,118,138,239,154,16,7,157,63,146,192,215,170,219,156,133,63,192,161,104,181,185,26,193,191,231,246,71,194,17,134,170,191,1,65,182,242,166,134,157,191,195,87,33,95,158,248,127,191,64,20,157,26,109,77,193,63,240,123,178,20,174,105,124,63,188,62,191,232,254,232,184,191,198,39,92,159,153,216,163,191,91,241,39,164,95,214,148,191,43,3,82,109,251,41,128,191,160,117,4,235,27,111,184,63,78,170,88,239,88,104,167,63,37,186,1,203,200,5,178,191,176,183,29,166,206,225,192,63,134,220,86,18,135,245,170,63,72,188,213,128,135,57,163,191,19,100,142,80,204,163,192,191,49,136,33,83,157,72,193,63,23,56,98,135,109,67,194,191,18,58,112,176,100,25,195,63,112,64,57,162,209,1,191,191,74,88,87,113,11,55,192,63,153,117,149,120,4,185,125,63,114,152,175,212,151,165,187,191,209,46,122,90,222,103,155,63,45,254,103,162,150,155,187,63,35,191,97,43,175,7,168,63,153,2,60,191,132,232,122,191,243,137,30,226,55,27,158,63,191,110,241,126,147,232,195,191,79,115,212,45,141,197,197,63,203,169,119,149,45,111,155,63,99,11,197,242,70,96,152,63,255,230,212,177,51,154,190,191,186,114,5,5,252,198,122,63,157,206,119,207,60,10,196,63,56,108,198,242,157,71,149,191,130,119,140,202,204,124,152,191,226,129,123,240,180,108,161,63,58,143,36,175,238,204,151,63,124,234,93,129,182,33,158,191,116,216,20,106,59,37,158,63,72,18,134,136,231,98,150,191,213,104,234,160,13,97,147,63,164,4,247,118,252,180,152,191,207,125,233,235,76,168,164,63,137,108,66,41,179,72,140,63,231,167,138,184,147,201,161,191,42,126,108,101,170,30,151,63,142,53,209,7,50,0,155,191,105,101,42,102,173,201,145,63,48,200,151,213,214,181,145,191,39,252,85,33,114,191,152,63,225,36,73,119,47,30,183,63,166,1,107,164,85,218,184,191,60,243,253,190,148,174,220,63,235,186,105,153,6,216,224,191,5,36,226,40,225,132,208,191,92,221,210,62,159,230,216,63,240,63,160,154,178,39,154,63,247,36,51,141,186,233,155,191,136,232,251,75,77,219,171,63,107,161,6,101,198,38,182,191,37,1,209,66,21,149,165,191,211,228,35,206,203,100,176,63,190,1,18,138,158,38,144,191,233,162,203,82,61,118,151,63,90,254,209,122,151,164,149,63,131,222,219,88,30,99,155,191,13,197,107,80,168,172,160,63,165,58,127,85,24,223,162,63,117,39,167,62,20,69,157,63,199,161,230,161,167,30,159,191,82,7,214,1,191,209,152,63,66,29,55,212,31,135,163,191,183,98,77,5,206,75,155,191,110,9,44,35,56,52,159,191,100,81,157,60,163,22,153,191,6,108,79,248,155,33,150,63,203,219,55,254,159,121,156,63,201,70,248,223,190,118,161,63,62,152,30,240,130,114,157,63,123,180,135,17,22,155,161,63,165,255,137,216,37,231,158,191,171,246,215,106,6,192,154,191,137,183,155,88,187,15,161,63,242,153,66,104,31,148,150,63,26,122,79,175,250,82,154,191,217,45,105,70,128,36,145,63,104,32,31,163,238,195,151,191,105,71,244,91,53,9,163,191,10,50,70,204,233,183,149,63,0,8,39,77,195,175,151,191,247,183,204,118,107,116,147,191,19,113,224,38,162,173,158,63,2,109,234,125,231,127,149,191,91,3,153,35,74,172,154,63,242,201,239,226,28,182,152,191,82,32,141,175,199,190,163,191,63,28,134,168,237,193,161,191,68,149,118,140,1,144,161,63,56,201,131,83,143,157,150,63,179,156,116,254,72,40,160,191,7,116,121,165,65,58,154,63,206,28,252,228,98,70,151,191,139,165,223,130,120,251,163,63,182,253,224,164,115,46,160,191,224,143,76,58,48,230,164,63,48,198,226,9,137,48,155,63,227,3,89,65,24,28,158,191,254,92,177,21,26,63,163,191,219,45,55,46,34,183,151,191,195,1,119,27,238,12,166,63,11,67,47,7,227,230,164,191,175,195,23,100,219,172,220,63,93,65,77,112,29,135,210,63,157,104,111,84,211,81,222,191,127,50,93,153,87,168,212,191,35,248,47,138,25,130,174,63,201,152,108,190,146,33,176,63,203,249,89,185,55,87,181,191,95,204,32,112,115,17,174,191,97,253,72,181,131,238,148,63,164,206,85,217,247,141,147,191,109,200,127,26,180,217,156,63,40,134,72,130,137,187,149,191,10,43,102,44,148,181,163,191,119,168,128,124,177,84,161,191,76,178,83,5,80,133,147,191,118,9,176,139,213,94,151,63,34,243,228,20,69,48,147,63,25,144,73,29,188,205,154,191,144,214,139,1,251,116,153,191,215,112,213,180,160,200,148,191,63,1,196,205,78,246,146,191,106,233,33,134,170,133,151,191,49,43,143,55,95,20,153,191,192,38,110,8,60,72,221,63,102,81,237,129,194,133,219,63,21,60,15,128,175,135,210,63,115,129,228,186,220,207,211,63,148,38,211,254,227,71,179,63,110,163,121,95,193,15,180,63,210,158,73,152,154,94,177,63,10,166,245,146,93,143,175,63,14,185,108,157,47,74,149,191,48,62,254,37,53,209,149,63,126,106,228,154,10,22,158,63,38,175,19,95,69,213,154,63,115,143,80,163,182,36,148,191,91,13,202,122,79,149,144,63,180,230,205,53,154,74,150,191,163,217,110,168,166,89,143,191,112,50,68,201,180,63,155,191,110,155,220,143,193,79,150,191,180,242,75,127,248,250,148,63,163,82,30,3,154,247,152,191,119,180,0,233,232,168,147,63,197,29,208,70,176,31,157,191,83,230,240,202,94,207,157,191,220,99,43,145,73,228,144,63,165,204,232,161,66,140,161,63,51,79,229,201,201,79,153,191,76,95,132,151,178,7,158,63,177,138,63,48,66,187,151,191,58,130,40,95,165,131,224,191,76,0,33,121,171,6,214,191,91,203,62,111,176,149,206,191,198,152,113,100,21,143,216,63,127,112,21,196,186,138,201,63,82,65,167,246,3,167,200,63,35,94,138,35,161,45,224,63,166,175,73,222,87,165,250,191,86,211,42,251,186,167,207,191,235,40,72,203,222,127,240,63,220,67,169,30,203,217,14,192,234,195,81,33,253,238,246,63,220,119,224,242,58,141,201,63,142,241,48,56,106,162,0,64,1,162,66,198,160,188,15,192,164,122,102,40,227,195,244,63,236,126,5,5,62,48,243,191,198,241,223,152,47,219,221,63,53,71,118,126,165,187,171,191,211,247,201,136,124,140,185,191,75,222,24,11,88,242,176,191,83,47,196,139,89,194,195,63,98,36,137,26,56,1,204,63,136,254,37,107,85,14,184,191,231,173,148,246,15,11,202,191,89,241,194,8,170,254,176,63,15,245,178,105,118,207,210,191,118,233,8,44,65,245,181,63,83,233,34,211,170,153,231,191,49,240,231,169,91,250,181,191,128,218,189,231,125,52,221,191,159,79,92,16,52,207,182,191,148,224,189,32,109,7,188,63,117,244,108,38,71,5,180,63,130,37,90,140,16,110,192,191,203,225,101,85,214,165,149,63,187,242,157,148,105,75,198,191,178,252,148,125,239,14,211,191,208,194,6,66,226,185,205,191,107,17,66,82,209,255,180,191,122,78,52,167,45,69,179,63,161,129,165,181,196,180,184,191,81,244,207,210,15,64,186,63,74,241,50,77,128,186,184,191,81,98,85,123,88,85,199,191,78,215,205,231,135,102,195,63,131,246,106,146,250,141,193,191,170,120,200,1,110,80,177,191,215,207,126,218,129,221,181,63,143,152,53,165,180,156,182,191,232,92,56,55,210,121,181,63,139,93,76,158,202,119,179,191,45,234,23,207,248,166,187,63,218,24,213,57,176,235,191,191,250,130,139,136,192,168,185,191,173,73,93,11,150,206,194,63,89,248,208,154,102,34,177,191,59,183,77,221,69,187,181,63,135,27,25,98,80,36,183,63,113,41,137,216,89,192,183,191,218,21,237,224,19,162,181,63,48,75,109,248,131,3,177,191,113,189,2,163,30,141,186,63,24,63,77,180,153,187,167,191,199,33,190,2,119,39,182,63,233,219,114,175,5,61,178,191,153,13,253,87,43,71,181,191,171,62,28,74,68,19,180,63,209,233,153,210,222,166,184,63,7,165,147,25,194,251,182,63,159,240,196,115,10,28,188,63,221,204,15,31,252,15,181,191,223,10,129,197,84,147,179,191,211,100,94,67,61,2,183,191,147,102,71,193,179,170,181,191,95,127,197,150,99,152,158,63,91,202,112,190,4,122,176,63,187,124,96,8,219,19,179,63,232,10,142,82,172,217,160,63,61,57,27,80,90,97,176,63,156,177,182,164,173,78,180,191,170,221,74,91,196,141,181,191,76,188,101,137,151,92,185,191,195,235,66,164,178,172,182,191,86,150,129,247,64,46,168,63,20,184,152,156,10,218,161,63,240,3,76,252,15,151,176,63,72,209,235,230,54,31,179,191,62,62,238,48,154,15,181,191,215,149,202,224,114,89,180,63,197,38,28,96,61,2,183,63,39,76,20,180,12,244,171,63,24,17,180,146,239,6,177,191,50,133,133,222,118,4,180,191,250,56,100,94,236,203,183,63,193,23,75,36,140,183,182,63,210,60,221,137,146,237,183,191,112,136,133,130,224,22,174,191,175,9,222,6,2,80,178,191,24,85,106,48,198,16,180,63,46,136,163,64,228,214,181,191,11,38,130,20,120,148,181,63,14,139,20,26,143,107,171,191,113,136,3,152,6,233,178,191,243,108,111,113,71,75,181,63,166,222,245,210,248,43,181,191,190,244,254,212,219,145,179,63,45,229,187,66,45,102,166,191,159,239,118,72,222,211,178,191,235,200,212,48,115,245,183,63,71,150,107,240,158,144,180,63,68,198,181,77,199,190,183,191,7,237,98,200,254,97,181,191,124,68,160,204,243,15,184,191,170,25,0,215,88,47,184,63,49,52,166,9,234,100,183,63,44,146,14,167,85,169,179,191,115,236,35,59,154,168,179,191,249,205,110,0,5,127,183,191,0,66,217,132,218,133,182,191,37,172,95,60,172,144,199,191,234,26,54,180,226,179,205,191,109,55,167,37,243,153,197,191,80,89,2,106,98,185,192,63,147,114,133,213,139,64,196,63,89,102,233,165,98,212,207,63,242,113,147,171,198,100,194,63,153,131,51,22,156,39,193,63,118,229,46,59,6,193,197,63,205,179,231,9,169,205,205,63,132,122,191,136,236,22,236,63,174,179,149,153,95,212,226,191,37,110,245,112,159,201,223,63,155,38,87,225,39,82,214,63,222,65,62,212,172,102,195,191,148,110,152,70,210,85,247,191,18,222,6,114,21,234,242,63,202,20,177,228,42,100,181,191,246,86,231,184,14,50,181,191,139,183,61,187,254,35,201,63,147,44,193,6,69,186,176,63,182,143,82,45,75,66,197,191,146,146,122,167,163,126,167,63,184,115,94,167,73,241,166,191,146,196,237,230,124,120,183,63,10,57,201,145,38,71,196,63,145,192,177,112,63,252,199,191,126,107,152,161,20,141,177,191,213,183,244,207,16,120,201,63,180,85,150,140,105,207,174,191,255,75,182,151,165,35,207,63,195,45,206,116,120,238,149,191,237,159,132,177,251,104,178,191,242,192,223,18,137,121,187,63,177,185,73,49,189,183,171,63,188,196,181,2,11,77,183,191,192,12,157,157,77,97,169,63,127,21,185,120,132,57,156,191,189,97,253,26,241,123,157,63,106,166,148,28,189,130,186,191,208,71,107,155,37,71,183,63,96,32,207,251,237,238,147,191,84,148,102,219,62,50,191,63,85,94,0,231,200,30,178,191,215,1,237,70,165,39,176,63,241,107,132,145,112,26,184,191,148,208,208,180,83,5,186,63,182,19,32,244,201,161,179,191,217,38,142,63,53,67,182,63,230,171,18,128,35,213,179,191,151,35,180,23,173,253,181,63,57,159,22,111,183,102,182,191,253,189,83,156,133,85,183,63,238,40,175,194,219,101,177,191,254,188,119,24,46,94,179,63,253,54,115,192,103,165,179,191,5,39,30,82,109,207,180,63,14,15,186,127,67,70,184,63,10,98,241,124,54,120,183,191,104,191,124,113,30,9,168,191,195,184,129,113,69,51,164,63,84,31,148,66,235,85,181,191,70,10,60,43,242,230,182,191,26,207,191,0,91,18,180,63,20,56,96,10,135,72,184,63,77,246,147,165,204,59,180,191,114,233,22,39,128,144,179,191,66,146,44,90,137,197,183,191,187,24,183,56,37,139,183,191,240,226,81,146,208,145,172,63,227,89,174,162,203,28,173,191,57,21,253,96,206,59,182,191,36,27,38,71,10,123,185,191,193,93,230,162,186,122,183,191,254,179,9,108,19,215,185,191,176,174,170,126,194,225,172,63,34,239,196,121,34,212,168,191,74,132,85,64,61,143,182,191,159,83,57,158,160,68,180,191,31,207,80,79,236,141,185,63,40,178,138,143,109,78,185,63,113,27,219,51,167,141,166,63,76,240,62,20,126,44,164,191,25,134,208,86,226,12,182,191,238,77,221,66,205,141,184,63,122,199,231,109,193,25,183,63,234,152,14,9,93,170,185,191,189,134,14,34,225,246,181,191,2,70,74,7,188,255,181,63,221,203,43,122,220,114,184,191,253,63,129,12,24,145,184,63,69,178,254,34,92,43,184,191,163,6,157,248,190,110,184,63,207,77,171,22,228,17,183,191,207,158,186,177,253,90,184,63,143,5,121,214,35,203,182,191,168,74,133,21,172,115,185,63,174,201,93,117,35,53,184,63,90,167,216,91,0,14,185,191,229,238,201,234,62,4,182,191,228,103,231,76,74,133,184,191,234,70,110,110,0,170,184,63,233,131,29,206,105,69,186,63,4,196,131,185,137,214,182,191,240,183,208,117,185,82,184,191,182,221,98,32,148,81,186,191,193,196,70,163,3,48,184,191,231,5,37,157,102,220,196,191,21,75,108,47,152,250,201,63,66,193,44,94,93,158,189,191,12,206,186,77,76,188,187,191,17,105,98,202,85,216,185,63,4,59,126,20,2,116,181,63,37,120,108,4,47,62,194,63,133,205,40,1,31,244,194,63,138,9,215,28,149,183,190,63,239,213,165,253,57,146,186,63,28,194,64,166,236,218,193,191,153,217,140,188,51,115,203,63,224,199,255,80,236,25,215,63,6,249,143,28,165,80,189,191,9,22,149,92,71,115,226,191,114,231,11,136,180,66,205,63,105,224,71,141,68,94,201,63,232,195,215,9,185,93,214,63,39,123,201,143,60,124,177,191,35,104,0,251,20,93,169,191,222,96,138,204,26,161,177,63,129,198,108,22,190,156,190,63,236,148,122,18,138,106,177,191,250,12,218,91,170,166,183,191,25,186,255,51,215,79,163,63,96,84,208,77,165,228,198,191,252,141,255,215,206,8,197,63,24,0,176,49,93,116,190,191,3,152,39,66,150,117,149,191,63,125,110,4,22,139,159,191,140,13,245,3,239,11,176,63,172,222,63,157,86,99,153,191,220,201,113,135,1,156,163,63,84,231,101,216,93,159,157,191,155,59,17,207,139,174,148,63,8,56,208,56,104,69,162,191,96,21,33,146,57,79,149,63,60,112,179,251,129,33,148,191,219,245,44,51,125,6,146,63,40,192,47,8,162,35,162,191,153,118,124,153,187,20,163,63,227,52,143,94,30,144,157,191,15,155,22,7,220,97,155,63,229,83,44,126,67,45,170,63,136,198,111,80,132,248,164,191,182,3,40,10,159,86,176,63,186,103,83,130,177,242,169,191,9,184,6,148,91,42,162,191,234,147,208,72,155,253,164,63,170,113,168,64,167,89,160,191,4,100,71,52,113,102,169,63,219,203,75,67,198,115,161,191,103,101,170,214,115,100,164,191,204,17,76,227,35,234,166,191,195,49,240,215,98,156,155,63,21,142,91,101,66,149,161,191,121,206,176,207,53,59,159,191,250,205,183,23,167,223,164,191,1,162,25,134,137,105,165,191,227,227,32,224,116,64,169,191,118,242,38,207,249,156,165,63,8,41,253,9,120,74,168,191,222,223,48,6,61,224,168,191,53,239,159,147,210,26,167,191,141,63,71,213,38,128,166,191,219,112,58,240,26,226,161,191,184,243,210,107,73,10,167,63,252,40,178,206,88,100,164,63,45,250,100,6,65,146,160,191,165,96,192,123,32,230,166,191,33,27,97,42,249,181,167,63,171,163,79,63,241,62,163,63,2,15,142,125,123,8,167,191,60,103,166,113,122,93,162,191,227,196,38,253,208,3,161,63,40,123,3,34,170,126,165,191,3,136,210,221,74,144,165,63,25,34,53,6,234,210,168,191,61,142,118,69,1,82,166,63,157,185,125,171,62,115,166,191,121,151,76,99,130,202,160,63,202,8,81,137,30,203,167,191,67,243,196,149,228,115,162,63,247,90,175,181,232,57,168,63,81,184,46,17,7,219,168,191,130,189,166,144,0,161,168,191,202,235,216,45,254,224,168,191,119,94,217,2,252,90,166,63,84,78,14,85,148,70,167,63,240,245,12,72,105,114,168,191,112,104,143,141,131,128,167,191,232,206,63,206,26,224,164,191,95,198,218,8,23,222,164,191,68,96,134,207,246,110,180,191,237,172,171,32,203,53,210,63,63,189,18,246,193,64,178,191,122,186,242,204,12,62,177,63,124,228,155,252,120,59,165,63,235,108,151,88,227,13,195,63,89,82,149,114,29,204,197,63,48,114,209,84,150,9,192,191,183,195,80,170,252,139,176,63,12,214,83,48,56,93,199,191,213,168,249,85,96,150,184,191,207,150,116,182,89,162,184,191,107,228,98,127,224,191,196,63,68,152,221,70,158,158,206,191,79,233,57,74,197,104,213,191,214,212,80,148,55,40,205,63,146,232,70,50,223,117,208,63,232,154,48,214,17,134,167,191,196,20,241,171,135,213,184,63,131,2,30,72,196,129,166,63,49,47,238,42,44,47,163,63,155,231,81,147,32,216,187,191,117,230,243,228,51,71,194,191,165,56,132,119,70,195,171,191,149,120,87,136,220,48,182,63,210,222,225,228,226,157,182,63,25,151,123,60,198,135,183,191,115,154,153,84,25,93,180,191,114,176,113,185,147,116,202,63,198,144,30,202,55,209,198,191,102,122,82,65,142,116,181,63,13,225,31,224,112,192,139,191,217,254,94,232,67,93,163,63,246,188,76,210,237,60,154,63,127,231,41,171,86,56,156,191,185,84,181,0,149,232,175,191,164,132,62,54,160,140,167,63,175,15,146,128,220,79,135,63,85,193,74,198,239,153,156,63,184,155,7,122,187,35,162,191,85,29,142,171,173,240,153,191,138,191,201,200,196,167,174,63,213,214,167,121,166,88,162,191,231,183,205,141,69,70,177,191,75,167,155,83,45,23,162,191,145,193,46,147,75,18,162,63,226,26,245,78,218,4,162,191,207,206,103,204,255,200,160,63,126,4,193,43,36,49,159,63,37,247,64,19,192,80,159,191,26,1,89,248,121,132,152,191,210,23,157,165,157,47,211,63,116,247,211,125,147,116,153,191,163,195,93,2,182,80,162,63,170,82,222,245,188,13,193,63,120,5,125,56,101,245,199,63,162,120,99,183,160,171,194,191,197,6,158,159,223,35,198,191,107,238,157,58,213,133,147,63,85,42,211,98,184,183,205,191,116,117,143,211,9,14,193,191,215,63,227,64,12,79,185,63,125,196,160,56,239,218,194,191,28,217,179,0,83,66,187,191,159,121,75,154,217,87,214,63,254,143,11,209,144,234,183,63,158,191,73,46,14,108,183,191,109,244,161,195,215,90,148,191,227,77,159,9,232,243,195,63,37,4,61,140,189,31,152,63,84,100,110,167,38,65,198,191,142,108,56,224,48,205,200,191,97,205,113,98,115,215,169,63,7,159,237,71,223,123,139,191,59,153,218,141,221,13,199,63,146,64,238,64,65,219,174,63,237,228,107,95,93,42,185,191,81,46,111,11,140,68,174,191,209,16,147,116,155,216,200,63,66,224,114,106,90,123,174,63,161,230,170,67,71,123,195,63,248,87,145,29,109,40,170,191,123,119,154,176,49,158,185,191,179,25,25,10,95,71,177,63,210,113,116,195,176,4,129,191,27,11,114,97,36,60,187,191,164,244,85,124,217,230,181,63,139,235,26,92,109,50,126,63,45,38,8,182,174,38,182,191,123,96,117,96,126,198,164,63,115,163,138,12,0,179,152,63,72,79,245,1,110,11,164,191,21,112,144,21,107,74,151,191,53,201,137,111,196,247,163,63,57,1,106,212,75,32,151,63,50,90,12,124,217,252,180,63,32,119,142,98,226,98,150,191,242,229,231,122,251,87,154,63,180,106,228,165,134,27,163,63,229,236,114,68,222,20,176,63,238,227,247,69,80,110,160,191,36,129,28,148,119,182,165,63,138,164,247,222,117,229,160,191,72,10,132,224,180,115,177,191,162,113,163,128,232,126,174,191,58,221,24,122,255,196,171,191,87,32,71,117,30,87,177,191,126,24,80,161,142,104,169,191,2,125,254,228,230,12,167,191,7,209,79,213,100,89,170,63,0,97,234,247,174,20,173,191,45,245,121,74,41,171,160,191,51,57,193,229,135,166,162,191,33,71,172,202,200,139,168,63,147,214,52,140,124,166,208,63,22,73,81,14,158,15,185,63,35,213,125,76,127,129,195,63,171,144,91,118,17,112,197,191,92,168,53,75,203,193,198,191,158,228,219,194,91,242,200,191,56,50,195,53,240,204,188,191,223,119,14,112,70,226,180,191,53,15,210,124,105,223,148,63,135,51,96,148,195,50,214,63,178,250,153,28,102,91,147,191,0,194,52,65,8,24,186,191,160,237,78,85,26,167,196,63,231,48,46,87,196,115,200,191,181,46,29,72,110,115,198,191,218,116,52,44,179,102,179,63,188,126,221,77,213,135,201,63,85,223,154,4,56,101,174,191,17,51,66,13,146,199,138,191,250,164,243,104,231,242,182,191,190,59,24,181,47,0,141,63,63,105,142,55,5,168,192,191,40,216,234,94,91,33,208,63,153,102,32,223,235,25,164,63,172,219,140,107,220,205,180,63,245,109,56,82,91,46,190,191,75,157,82,236,133,152,188,63,16,26,26,83,73,147,190,191,234,91,46,137,107,235,166,63,225,171,128,36,111,187,163,63,44,130,68,157,74,109,165,191,151,52,116,65,219,30,183,191,85,8,234,101,227,175,176,63,18,50,147,3,225,162,160,63,10,43,91,165,117,71,171,191,35,212,255,114,51,136,154,191,24,216,170,244,35,110,161,63,86,84,221,147,68,39,171,191,103,24,98,146,135,118,166,63,13,62,62,253,223,0,172,63,224,241,167,76,244,147,164,191,6,229,61,12,65,102,168,63,93,238,164,246,225,250,162,191,196,75,76,65,254,43,158,191,142,217,146,28,255,6,175,63,57,80,66,47,48,1,150,63,47,176,6,81,221,209,177,191,215,255,81,2,10,1,147,191,132,202,107,14,136,103,174,191,154,253,146,234,206,10,151,63,27,23,33,223,49,171,175,63,72,112,9,187,152,18,176,191,80,196,93,213,132,217,170,191,90,168,157,231,1,132,174,63,49,118,80,166,78,149,177,63,10,77,140,77,211,161,163,191,243,188,68,1,70,59,166,191,206,165,77,156,205,151,161,63,86,32,66,118,71,93,166,191,171,119,154,79,70,136,169,63,225,163,4,198,74,77,164,191,208,121,53,138,211,112,169,191,177,224,22,38,204,33,160,191,83,241,154,11,206,208,196,63,146,198,118,173,58,239,176,63,157,83,76,143,232,0,183,63,71,43,254,121,132,51,190,191,46,2,120,172,26,158,192,191,166,5,178,18,10,69,192,191,220,177,47,168,18,201,176,191,246,242,204,52,248,110,191,191,227,187,86,248,24,78,211,191,245,220,66,22,136,100,193,63,38,84,44,4,132,49,191,63,116,16,219,11,94,42,194,191,67,64,9,103,149,120,192,191,4,40,134,246,49,57,180,63,24,157,84,21,231,20,194,63,193,209,253,173,184,135,167,191,86,48,52,96,112,107,135,191,222,183,23,241,59,44,191,191,138,183,248,192,188,98,135,63,40,13,209,137,214,97,206,191,162,6,146,75,188,82,192,191,33,185,53,33,190,29,178,63,24,157,132,87,227,71,182,191,35,217,122,75,121,9,185,63,27,250,187,102,140,189,186,191,26,81,17,243,91,182,167,63,61,90,184,63,61,120,161,63,121,146,38,206,21,162,159,191,105,43,118,81,44,159,182,191,24,11,134,10,105,138,181,191,219,142,142,20,75,133,160,63,166,248,100,175,79,87,167,191,34,152,179,26,28,208,160,191,216,190,226,165,245,113,165,63,202,161,154,219,203,167,172,191,16,207,114,211,33,63,163,63,68,88,145,231,58,246,170,63,18,246,199,28,158,33,163,191,67,37,81,174,214,48,168,63,250,252,123,144,111,10,163,191,196,99,6,99,104,115,167,191,127,227,198,177,50,173,157,191,206,193,121,137,178,128,161,191,55,11,245,93,4,176,169,63,220,249,170,158,8,156,175,191,234,2,29,125,156,120,145,191,156,204,149,118,48,68,169,191,213,204,191,1,92,84,148,63,17,81,142,196,255,32,170,63,7,221,142,199,3,94,175,63,133,182,212,178,185,30,174,191,117,171,30,187,11,51,160,63,150,207,18,147,153,252,162,191,13,131,8,194,4,223,169,63,163,56,238,215,41,56,168,63,1,249,93,103,252,183,169,63,75,8,176,35,0,227,165,191,179,96,169,101,84,105,158,63,39,23,214,102,102,190,158,63,247,176,106,1,186,79,161,191,203,79,155,39,59,97,164,63,95,221,231,72,238,161,165,63,96,210,124,28,3,8,161,191,69,140,152,164,66,149,163,191,6,36,220,3,20,50,179,63,213,60,105,117,89,154,180,191,249,231,17,73,29,139,171,63,71,116,162,190,41,151,177,191,192,142,77,225,119,243,172,191,235,150,238,253,55,130,187,191,69,34,195,6,163,234,176,63,144,216,60,2,155,249,173,191,242,137,96,2,183,247,161,191,154,249,83,252,113,219,188,63,214,237,177,139,174,124,180,191,74,49,215,100,105,171,183,191,62,84,169,67,208,81,186,191,37,240,18,178,2,186,203,191,247,65,0,248,201,238,182,191,87,37,81,181,166,249,200,191,164,33,141,165,105,137,184,191,240,124,159,162,143,156,176,63,193,157,207,154,188,180,181,191,70,84,207,220,58,156,181,191,162,178,141,27,113,250,175,191,167,179,170,67,32,85,169,63,6,31,113,171,90,194,179,63,59,94,220,160,216,51,184,63,86,123,211,146,255,152,177,63,234,249,4,3,247,164,179,191,81,243,125,228,79,47,156,191,18,249,232,75,114,44,185,191,13,105,100,29,246,93,184,191,173,173,193,10,75,249,197,191,77,88,30,68,206,244,193,191,123,128,4,110,203,158,195,191,68,234,76,173,208,4,186,191,55,193,71,123,116,123,165,63,139,211,203,19,213,202,169,191,240,115,96,150,71,240,166,191,45,7,46,48,172,22,173,63,230,208,46,81,240,55,180,63,102,169,86,177,46,217,168,191,66,18,16,118,193,59,173,191,180,156,237,120,61,242,152,63,7,155,214,221,48,207,148,63,116,8,221,1,224,44,167,63,194,38,77,187,123,208,151,63,169,116,221,163,234,205,177,191,13,199,97,254,77,72,165,63,108,118,126,148,119,150,178,191,44,244,100,145,74,121,169,191,229,83,194,159,118,99,178,191,19,17,223,118,53,82,164,191,189,73,50,54,238,112,165,191,120,80,174,125,217,63,147,63,69,55,245,29,88,161,152,191,62,83,122,155,71,198,159,63,39,207,11,243,215,192,148,63,132,194,207,106,145,159,152,191,225,157,202,221,91,185,161,191,193,4,201,228,37,252,160,63,250,112,168,68,39,117,163,63,163,49,251,215,156,14,160,191,30,110,46,25,205,154,147,63,21,214,195,18,231,146,164,191,227,231,239,134,6,1,155,63,171,228,236,163,174,128,178,63,27,191,68,26,78,137,164,191,189,215,182,126,119,120,160,63,246,15,26,96,12,7,161,191,103,176,101,180,107,18,162,191,233,130,77,2,36,62,176,63,242,17,136,236,82,200,160,191,114,239,31,147,39,216,161,63,31,133,171,104,66,67,159,63,168,234,235,246,17,144,165,63,76,221,144,251,157,62,167,63,142,247,78,164,43,161,155,191,179,11,209,126,135,136,191,191,57,159,135,64,191,2,164,191,235,186,54,190,9,123,189,191,232,59,39,254,78,20,184,63,218,44,237,97,179,204,192,63,155,64,190,215,184,251,192,63,72,75,32,185,85,84,176,63,2,241,89,168,95,192,169,63,23,212,2,66,1,223,201,191,82,109,154,140,223,237,165,63,176,247,178,160,246,181,200,191,215,11,172,249,246,214,159,63,96,68,254,219,224,238,191,191,156,73,178,238,9,130,160,63,50,191,234,136,215,243,191,191,49,157,69,62,147,14,163,191,220,96,81,105,192,48,196,63,30,95,224,31,254,47,194,63,228,91,40,64,26,27,179,191,16,149,247,101,218,39,193,191,185,252,181,112,164,220,175,63,156,46,126,178,208,76,199,191,46,69,27,81,166,162,179,63,119,88,40,97,51,8,202,191,163,107,69,26,83,233,178,63,196,165,34,125,47,161,177,63,146,25,234,197,127,172,144,63,252,33,176,223,13,163,179,191,122,179,76,47,83,199,148,63,253,203,128,129,177,244,185,63,99,44,141,32,97,103,188,191,15,33,179,178,240,75,184,63,105,33,89,168,210,114,169,191,232,152,115,195,73,190,163,63,197,104,35,3,29,157,182,191,65,6,54,64,3,162,165,63,159,252,100,167,35,94,178,191,158,168,10,186,205,84,165,63,246,216,103,155,48,48,174,63,14,6,227,53,194,151,163,63,243,41,144,15,140,22,167,63,164,190,195,102,64,36,166,191,217,222,127,160,57,255,165,63,224,17,137,188,3,180,168,191,2,140,62,164,107,24,176,63,59,177,57,57,40,67,165,191,42,128,47,202,5,171,177,191,156,133,189,164,15,1,157,63,40,136,90,246,234,83,173,191,135,150,239,92,205,27,175,191,86,255,1,82,233,14,169,63,203,150,133,17,101,100,145,63,177,27,51,60,140,130,161,191,45,5,148,147,165,141,171,63,237,247,117,177,213,238,151,63,123,130,90,214,31,12,144,63,209,54,190,223,158,228,157,63,30,25,150,59,73,233,175,191,84,71,46,150,158,144,159,63,0,93,128,105,99,210,179,63,46,119,178,220,144,27,173,63,243,205,110,12,203,223,171,63,240,245,168,255,94,5,160,191,49,174,56,108,161,72,177,191,122,83,20,47,140,44,170,63,215,230,75,191,115,90,170,191,49,160,113,217,238,65,171,191,103,61,14,236,209,243,165,63,59,118,6,151,35,193,157,191,178,147,251,49,96,116,167,191,43,20,89,39,223,57,168,63,122,63,87,73,35,87,192,191,2,139,58,3,150,32,181,191,133,39,73,93,133,222,191,63,105,140,176,14,8,163,192,63,38,49,179,62,14,194,192,63,246,82,243,127,1,150,173,63,244,201,95,154,33,48,191,191,203,17,137,188,132,21,169,191,230,24,108,149,192,104,206,63,29,197,82,220,211,115,188,63,103,81,77,41,116,54,189,191,156,53,186,32,135,2,198,63,48,103,15,194,55,236,191,63,231,192,139,176,253,72,184,191,109,186,158,117,22,104,194,191,189,235,120,17,66,58,167,63,103,197,97,4,243,32,189,191,55,150,116,117,234,99,171,63,52,211,120,111,172,102,210,63,44,240,6,136,157,106,177,63,113,189,68,215,159,163,181,191,141,67,57,2,227,94,182,63,224,52,101,235,160,92,193,191,239,207,92,21,26,193,164,63,232,185,56,173,81,147,187,63,205,116,237,253,231,34,172,191,105,63,45,238,234,172,157,191,4,95,181,159,46,242,166,191,228,233,43,64,12,16,185,63,144,173,234,224,31,47,192,63,39,143,131,81,198,102,170,191,25,155,243,78,67,153,172,63,172,206,139,92,14,192,169,63,57,234,218,37,29,97,177,191,43,51,218,167,204,40,180,63,175,15,224,198,52,59,162,191,236,188,25,228,45,205,179,191,207,82,26,253,127,159,155,63,196,183,54,150,147,193,176,191,86,93,23,175,247,239,171,63,17,138,168,99,34,141,175,63,177,240,63,15,15,215,171,63,92,207,59,107,165,24,176,191,159,155,149,45,78,229,165,63,149,185,244,172,127,183,173,191,33,103,202,44,223,70,181,63,80,128,41,229,82,71,160,63,212,157,60,73,193,182,161,191,239,74,195,98,195,102,160,63,57,226,173,247,117,118,168,63,72,193,132,56,63,113,158,191,242,254,211,166,196,254,152,63,114,95,45,141,212,157,175,63,145,10,151,208,75,165,156,191,134,53,87,53,133,41,167,191,46,213,17,242,230,42,184,191,230,123,61,47,149,151,176,191,153,41,150,179,24,106,178,63,112,75,253,77,71,154,172,191,245,95,29,198,214,61,166,63,35,60,50,13,193,70,175,191,209,147,157,208,196,174,180,191,158,213,127,169,85,121,175,191,163,195,113,22,207,191,169,63,166,181,65,37,187,1,163,191,144,18,167,250,29,184,164,63,30,194,7,118,83,88,176,191,203,164,108,80,14,192,167,191,75,213,173,144,27,188,167,63,211,57,94,241,250,111,163,63,8,207,229,218,145,32,167,63,195,131,219,113,55,232,162,63,91,125,152,210,127,208,180,191,112,189,253,123,4,36,163,191,179,77,83,12,23,113,183,63,170,62,28,58,117,249,184,63,18,143,205,187,254,34,184,63,7,153,131,226,159,23,191,191,95,233,56,229,47,73,204,63,182,103,81,103,44,75,174,63,33,144,27,46,8,77,189,191,40,33,16,8,0,95,181,191,58,54,24,103,178,186,192,63,11,64,79,25,118,121,178,63,81,154,234,240,248,247,178,191,127,17,201,255,203,106,186,191,93,149,48,182,191,102,162,63,227,160,130,84,104,33,192,191,163,1,124,25,224,100,209,63,229,232,92,33,155,117,166,191,234,251,81,239,104,172,183,191,2,116,172,14,55,22,177,191,184,153,222,101,118,193,172,63,52,137,165,170,229,27,187,191,211,146,249,77,13,50,162,63,105,29,104,244,31,112,180,63,66,225,56,134,74,175,165,191,214,160,219,42,57,78,165,191,41,143,148,94,69,178,193,63,26,66,175,106,231,143,184,191,135,44,8,179,156,74,164,191,210,202,221,40,88,220,166,63,4,10,122,131,13,79,175,191,189,248,132,89,69,11,169,63,213,164,33,8,217,159,171,191,134,132,213,103,249,142,170,191,50,245,10,137,3,176,167,63,92,43,86,66,36,60,169,63,228,0,54,30,109,91,169,63,115,92,143,190,87,149,177,191,138,2,243,120,108,151,170,191,186,221,236,32,181,104,169,63,208,22,0,179,44,178,176,63,34,205,239,227,11,75,157,63,44,208,252,78,114,123,156,191,123,136,231,109,0,83,153,63,110,252,48,202,131,76,166,63,184,218,207,170,133,73,150,191,115,103,145,105,173,103,149,63,128,38,195,23,217,23,168,63,248,32,177,205,150,14,151,191,130,75,101,136,251,225,163,191,157,176,235,14,66,13,183,191,186,55,78,194,99,25,181,63,228,86,55,29,220,16,174,63,161,164,179,228,171,190,167,191,11,225,159,0,6,54,163,63,199,217,126,68,78,131,171,191,61,171,185,141,97,39,180,191,223,39,0,166,150,49,180,63,171,159,123,112,13,232,164,63,110,27,197,233,249,182,162,191,110,47,130,15,101,240,160,63,14,156,124,123,4,31,169,191,255,17,88,206,103,214,168,63,237,174,193,86,217,115,164,191,172,150,24,182,36,226,159,191,76,14,0,156,228,70,161,191,132,95,246,174,171,38,171,63,161,139,114,73,7,146,171,63,139,114,175,240,148,29,164,63,15,169,216,102,183,120,178,191,157,218,91,214,80,44,176,191,122,160,113,51,201,19,187,63,133,178,124,226,126,190,195,191,22,38,138,245,157,17,196,63,33,20,107,182,52,32,176,63,203,178,198,11,127,101,162,191,183,203,46,140,134,116,178,63,196,158,85,241,43,244,163,191,158,151,134,1,78,221,176,191,96,157,87,134,207,184,169,191,86,28,84,215,122,9,168,63,223,199,124,60,170,47,165,191,1,133,40,213,147,108,183,191,110,140,179,33,105,100,172,63,248,216,80,111,38,181,173,63,10,13,185,8,81,151,200,191,26,68,255,172,227,82,180,191,233,212,29,227,51,160,199,63,40,177,60,146,100,161,184,63,238,74,78,108,247,183,160,191,210,25,159,61,69,54,172,191,84,129,59,210,222,240,157,63,96,178,255,6,16,231,163,191,41,53,39,247,74,146,164,63,197,79,164,182,93,177,164,63,95,152,167,121,96,67,178,191,250,167,226,118,136,204,170,63,215,14,148,149,197,3,182,191,240,142,17,13,50,32,167,191,70,8,123,122,246,37,182,63,13,233,167,168,3,174,177,63,151,18,127,77,70,253,150,191,192,13,161,71,45,200,157,63,203,18,97,133,191,218,162,191,187,178,109,202,51,245,157,191,187,171,32,46,38,74,153,63,109,126,152,48,179,85,158,63,84,82,84,30,182,66,164,191,218,189,240,39,77,45,160,191,57,208,230,126,198,196,169,191,58,239,56,167,75,128,163,63,10,111,213,17,120,227,160,63,99,12,115,203,136,155,160,63,208,173,63,188,226,116,161,63,67,96,206,68,143,80,176,63,164,95,7,231,134,69,170,191,147,213,10,135,18,249,169,63,98,45,211,104,40,175,164,191,225,125,0,250,29,109,169,191,133,251,113,62,132,183,159,63,83,8,77,132,55,181,160,191,32,189,44,55,239,133,160,191,132,188,48,196,158,71,166,191,149,194,223,14,33,48,176,63,220,172,106,141,189,60,164,63,17,47,81,48,215,136,167,191,118,75,174,213,20,11,162,63,30,145,207,154,62,67,156,191,54,93,96,132,163,88,164,63,149,192,206,187,236,14,155,63,13,0,19,7,127,225,157,63,149,99,221,124,43,51,157,63,164,101,6,155,87,127,176,191,1,45,174,200,83,21,170,191,249,83,122,91,45,167,164,63,82,200,112,55,242,16,197,191,170,28,80,92,35,225,194,63,162,225,235,191,228,117,183,191,229,92,22,82,169,187,177,63,35,131,33,223,94,151,165,63,58,168,123,29,178,128,160,63,80,55,24,13,212,131,153,191,34,172,29,207,43,56,178,191,228,103,174,51,255,81,168,191,168,193,8,138,104,203,165,63,110,161,36,240,167,131,171,63,182,250,83,96,82,213,179,63,218,59,54,160,189,63,201,191,157,233,21,111,40,255,173,191,129,139,203,16,196,32,199,63,164,91,112,43,79,135,165,63,51,148,175,40,77,13,180,191,114,48,173,107,169,118,175,191,234,97,56,149,15,57,162,63,245,115,61,181,214,42,151,191,197,190,229,37,139,129,163,191,228,27,153,119,39,29,172,63,185,220,99,231,172,45,175,63,125,55,110,114,244,40,186,191,44,127,97,195,176,78,168,191,170,194,247,97,102,113,181,63,138,214,1,73,140,204,166,63,64,243,214,18,67,221,171,191,154,250,160,144,215,115,163,191,91,81,218,203,182,28,160,191,120,47,220,44,52,222,159,63,24,126,71,7,77,22,158,63,159,36,219,100,143,81,162,191,1,38,242,159,229,220,167,63,174,135,74,97,34,24,157,191,201,165,234,117,165,134,152,63,60,49,92,245,6,151,158,63,204,249,2,184,77,53,152,191,3,189,77,235,233,197,165,191,145,98,122,22,143,116,176,63,217,66,79,135,193,179,161,63,81,255,207,18,114,226,162,63,219,212,136,217,56,212,162,63,20,24,68,98,86,210,166,191,71,86,152,183,41,13,171,63,204,195,64,64,204,128,160,63,201,253,140,8,144,245,156,191,240,67,161,21,65,50,167,191,13,177,238,220,173,194,161,63,0,227,159,165,129,222,159,191,248,226,169,48,72,244,160,63,46,37,70,60,61,185,154,63,228,165,111,162,114,88,165,191,127,34,118,42,174,254,192,191,97,49,232,221,118,250,176,63,85,196,107,225,55,84,197,63,138,104,53,9,59,64,189,191,130,173,21,162,113,120,151,191,2,248,174,247,73,209,176,191,26,61,170,20,146,204,164,63,91,254,169,88,165,87,189,191,250,57,184,187,154,44,206,63,200,133,235,98,177,203,188,191,136,170,174,57,7,66,164,63,243,9,164,10,154,59,164,63,144,230,237,158,27,152,158,191,154,47,165,204,87,104,161,191,19,185,90,231,204,120,170,191,43,255,245,202,138,178,193,63,207,70,44,66,169,202,165,191,15,89,82,215,87,63,171,191,161,24,42,206,217,13,166,63,168,74,85,255,207,40,168,191,169,248,106,50,178,75,151,191,182,89,100,248,154,157,176,63,206,130,228,195,150,192,176,191,181,150,23,242,62,125,162,63,184,140,81,104,118,221,161,63,166,110,197,3,63,252,174,63,198,89,131,47,51,150,176,191,103,205,107,158,42,151,171,63,104,189,195,213,112,145,165,191,245,23,179,86,57,190,189,191,238,249,177,190,246,166,195,191,198,14,31,124,106,87,181,63,68,200,98,249,65,198,187,63,160,123,46,171,42,195,166,191,62,68,239,86,141,97,186,191,157,253,94,204,105,207,201,191,215,32,201,91,112,22,173,63,177,164,56,223,131,53,191,63,167,37,150,212,145,38,187,191,12,176,9,105,230,244,168,63,252,71,244,252,154,122,161,191,214,33,24,230,244,13,160,191,49,58,97,46,205,198,170,63,221,127,58,230,92,151,170,63,2,75,124,228,12,126,161,63,101,122,100,112,92,249,163,63,76,167,223,179,32,137,187,191,19,142,94,249,168,68,189,191,108,91,173,195,247,215,190,191,21,83,143,254,230,192,192,191,242,140,172,3,197,54,184,191,246,63,251,172,255,14,191,191,150,105,184,133,198,86,196,191,183,108,157,101,175,253,197,191,44,240,227,114,239,241,159,191,51,99,44,176,235,43,178,191,85,141,22,171,65,251,178,191,78,59,87,245,66,219,208,63,131,28,10,22,53,218,194,63,59,31,159,152,53,105,199,63,13,232,233,56,138,253,167,191,66,197,107,200,225,47,184,191,175,146,204,42,21,14,173,191,155,163,128,27,132,47,193,191,205,210,123,60,84,127,182,63,151,183,92,186,72,77,179,191,45,160,177,91,246,119,222,63,226,136,242,235,17,239,240,63,15,58,203,83,201,174,213,63,232,68,126,120,171,235,198,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([238,125,29,22,55,168,242,63,255,52,45,11,139,31,214,63,75,21,16,199,7,241,239,63,119,75,176,106,117,216,215,63,31,230,248,220,87,142,205,63,51,118,54,136,2,127,212,63,117,239,108,55,215,175,230,63,181,234,16,83,218,75,213,191,114,6,181,7,129,178,141,191,53,222,240,14,74,87,160,191,157,107,42,224,121,146,161,191,238,191,208,149,202,172,168,63,70,66,14,250,168,74,175,191,36,25,140,35,86,87,175,63,48,129,166,3,134,50,174,191,196,67,188,255,144,39,151,63,195,255,148,162,214,100,145,191,99,249,207,202,79,132,177,63,9,247,167,222,246,41,153,63,57,229,94,98,167,146,163,191,229,177,68,65,27,60,154,63,183,148,173,59,90,98,164,63,18,236,100,184,117,186,156,191,56,76,128,199,207,142,173,63,146,226,193,210,183,122,169,191,228,202,225,248,131,4,169,63,94,215,124,122,179,253,160,191,31,211,192,221,3,8,165,63,195,161,49,223,221,52,128,191,103,229,14,100,45,37,167,191,32,160,59,157,6,19,172,63,93,34,227,169,19,112,162,191,201,206,36,96,122,142,170,63,152,89,199,234,139,84,122,63,129,99,48,63,137,177,160,191,161,89,129,99,193,73,128,191,235,10,241,15,30,157,169,191,30,16,72,45,19,167,170,63,126,239,37,17,8,6,167,63,117,20,209,233,191,35,171,191,89,117,252,3,165,135,149,191,168,132,68,169,52,240,176,191,248,155,10,61,243,4,176,191,0,254,157,103,165,137,177,63,219,174,147,144,128,34,177,63,61,165,21,179,187,246,178,191,207,229,186,11,232,166,178,191,110,147,236,164,213,28,174,191,91,169,122,228,99,119,175,191,175,242,188,47,196,125,176,191,210,26,21,7,3,114,173,191,28,176,40,70,48,154,175,191,246,171,26,154,125,33,178,191,17,193,209,168,162,103,162,63,57,2,33,58,64,145,163,63,76,156,153,145,33,211,177,191,0,242,186,150,29,184,176,191,238,151,96,179,10,52,177,63,64,221,62,131,198,105,177,63,53,236,147,119,145,24,155,63,226,251,187,202,124,99,155,63,127,121,228,190,56,200,155,63,54,183,188,111,180,65,178,191,24,141,160,170,76,5,176,63,32,174,172,168,151,152,177,63,63,236,78,10,206,160,178,191,199,218,127,78,149,39,149,63,50,126,207,209,94,191,176,191,48,19,64,189,157,96,177,63,230,125,54,16,100,96,176,191,28,88,74,36,171,225,176,63,233,200,157,99,135,219,178,191,190,77,9,4,153,123,178,63,193,223,126,82,252,223,178,191,45,77,136,35,182,5,178,63,202,195,78,85,29,27,156,191,125,106,0,171,132,208,180,191,223,145,156,7,154,169,179,63,93,238,53,11,15,166,180,63,25,230,105,251,225,101,183,191,191,111,250,132,21,225,150,191,116,235,83,168,245,186,178,191,112,249,85,20,148,31,179,191,138,43,198,48,136,241,180,63,167,128,126,157,111,255,180,63,238,223,121,193,75,37,155,191,76,144,15,37,23,239,149,191,132,186,107,182,135,157,143,63,196,137,225,37,156,193,157,191,230,201,122,249,196,234,176,191,165,166,124,73,165,191,180,191,219,234,85,11,142,42,177,191,109,224,19,43,201,144,178,191,217,254,189,123,11,114,152,63,255,216,209,228,174,227,210,63,207,0,192,111,185,225,206,63,14,46,236,173,206,36,175,191,21,109,25,123,114,102,167,191,138,193,90,110,112,203,185,191,218,117,89,218,136,2,198,191,126,161,19,166,18,214,152,191,179,10,131,223,233,200,170,191,106,159,95,94,250,123,238,63,23,21,109,32,143,164,196,63,188,67,12,119,171,66,227,63,60,242,221,81,97,104,192,63,225,64,213,131,130,150,240,191,84,127,6,143,69,146,179,191,252,102,65,115,26,249,227,191,134,22,64,205,171,96,179,63,10,119,103,214,74,223,170,191,236,145,214,147,195,79,158,191,211,19,15,140,128,141,162,63,27,145,235,61,176,120,178,191,244,167,111,6,161,143,183,63,10,186,217,56,24,195,160,63,232,109,106,215,186,120,165,63,64,247,183,209,238,227,158,191,12,36,223,125,210,190,173,191,175,160,173,7,3,66,160,63,136,98,137,193,24,127,176,63,229,135,96,36,239,127,156,191,239,140,91,31,50,3,168,191,175,1,87,146,22,123,164,63,235,175,210,185,65,210,129,63,249,118,44,16,133,207,146,191,249,185,32,134,112,127,176,191,100,131,231,110,87,50,178,63,115,222,234,82,221,209,168,191,4,98,70,223,87,46,165,63,205,51,72,200,87,191,169,191,117,44,209,254,126,250,176,63,33,85,19,239,234,90,172,191,144,218,33,75,220,40,174,63,39,42,217,135,195,156,116,191,204,121,85,52,112,241,115,63,247,221,73,198,127,1,177,191,56,45,153,188,205,202,174,63,15,136,62,203,131,207,171,63,189,149,198,161,156,181,171,191,224,192,94,114,113,205,145,191,185,116,169,58,247,117,174,191,169,252,196,55,220,7,173,191,74,213,97,249,249,228,175,63,110,22,107,163,208,102,173,63,223,241,105,45,213,114,178,191,128,53,222,81,79,221,177,191,164,22,218,16,121,153,174,191,130,57,96,234,217,47,176,191,147,124,201,21,42,33,157,63,19,176,29,180,225,105,179,191,206,73,93,66,93,92,178,191,81,156,155,114,252,18,174,191,82,70,220,129,238,111,176,191,203,115,49,118,240,246,155,63,55,23,139,235,136,5,159,191,183,85,242,147,148,154,177,191,191,238,33,16,49,0,177,191,143,7,175,44,135,168,178,63,94,46,225,51,40,65,176,63,162,217,64,74,55,0,155,63,18,48,46,175,168,100,159,63,196,27,19,209,5,153,159,191,204,97,98,108,190,246,178,191,34,230,115,59,64,29,179,63,160,216,17,56,230,251,176,63,156,211,35,179,175,103,178,191,104,83,166,243,142,251,155,63,180,48,16,61,108,58,177,191,87,192,240,174,93,175,177,63,79,251,32,26,59,47,179,191,19,172,49,197,246,173,178,63,191,56,204,15,236,63,151,63,242,45,192,55,155,199,180,191,162,44,141,255,39,64,178,63,239,130,225,63,87,35,179,191,74,232,26,195,129,255,178,63,155,75,87,15,23,5,155,191,52,135,135,211,50,21,149,63,161,206,16,58,144,175,178,191,34,87,246,251,113,63,180,63,173,6,129,106,195,183,178,63,69,123,138,254,174,113,179,191,200,58,36,79,60,134,148,191,5,48,4,55,183,133,180,191,212,186,179,9,181,34,179,191,133,48,110,182,110,76,179,63,51,96,227,24,111,5,179,63,139,154,121,135,90,15,149,191,206,217,129,221,158,107,149,63,140,11,25,121,16,12,180,191,110,163,46,92,151,9,180,191,30,247,205,19,30,226,180,191,111,117,85,245,203,195,179,191,185,252,188,140,77,193,197,63,79,205,173,156,169,234,203,63,218,41,179,245,236,229,163,191,117,171,2,32,204,129,164,191,83,65,138,59,188,188,161,191,192,163,253,248,212,133,191,191,242,118,121,91,55,87,183,191,250,211,86,235,204,55,193,191,158,218,104,108,10,249,158,191,31,203,248,222,206,244,149,191,22,156,57,138,24,196,183,63,96,186,11,155,123,156,231,63,134,251,56,157,173,229,172,63,159,112,11,188,101,249,233,191,243,246,16,117,61,56,171,63,41,137,76,22,249,148,219,191,8,68,139,61,98,104,176,191,87,56,248,153,164,44,224,63,92,218,139,7,214,23,179,191,36,220,11,12,9,198,133,63,0,22,228,178,57,253,150,191,149,130,46,105,104,31,162,191,234,180,77,59,179,178,157,63,152,149,129,248,158,89,178,191,96,10,102,56,119,124,165,191,71,54,148,228,217,139,185,63,65,218,159,255,90,176,161,63,85,19,143,137,255,75,140,63,44,222,158,168,234,61,157,63,176,239,45,185,7,53,145,191,53,177,108,108,58,224,164,191,230,218,48,52,109,68,161,63,218,134,10,14,200,228,161,191,85,188,80,51,243,51,147,63,147,84,148,93,114,128,158,63,148,119,109,57,216,21,140,191,229,242,227,117,125,52,175,191,158,34,207,116,105,42,174,63,105,58,82,6,24,37,157,63,55,107,228,2,249,228,155,191,7,135,5,235,240,191,162,191,57,215,100,165,221,2,165,63,108,101,101,132,226,251,154,191,238,56,41,40,98,138,150,63,235,123,133,234,61,120,163,191,104,13,24,192,71,170,164,63,12,225,176,103,168,176,160,191,69,133,123,236,209,215,158,63,93,32,131,70,79,18,158,191,15,219,4,249,174,199,163,63,218,179,16,51,80,19,127,191,136,248,166,100,94,37,161,191,104,183,71,23,178,132,126,63,65,222,241,140,56,236,160,63,165,175,240,30,169,112,172,63,239,137,211,47,6,73,162,191,250,9,2,190,178,230,165,191,173,173,86,152,247,135,163,63,187,254,196,89,2,248,160,63,228,78,15,213,85,173,161,191,144,45,177,152,179,171,160,191,0,231,220,9,228,207,158,63,186,114,48,37,198,223,167,63,73,72,58,56,131,233,160,191,234,122,150,9,102,125,159,191,180,65,206,162,145,127,160,63,145,241,165,212,151,22,156,63,141,125,248,102,74,242,162,191,5,163,248,140,7,181,159,191,109,117,99,68,78,27,150,63,163,45,159,117,1,221,162,191,130,24,66,216,154,161,163,191,144,60,166,16,234,209,158,191,36,49,123,134,214,19,157,191,91,39,101,203,159,170,157,191,86,114,86,68,191,168,153,191,194,200,21,21,100,152,160,191,201,159,209,110,5,3,154,191,206,50,218,58,8,112,161,191,11,95,66,182,189,44,161,191,144,203,249,81,99,202,161,191,222,234,129,94,143,28,159,191,142,36,39,243,34,26,164,191,75,43,54,133,247,55,160,191,228,13,226,105,148,86,153,63,234,242,73,0,32,75,149,191,59,115,160,128,185,22,164,191,245,102,1,4,66,89,163,191,232,214,26,172,199,122,163,63,94,111,99,128,72,147,161,63,91,239,190,242,3,4,160,191,200,120,217,2,235,67,156,63,66,28,158,188,237,236,152,63,145,129,121,49,54,40,147,191,53,251,223,138,181,111,165,191,221,246,173,92,6,70,162,63,130,109,75,124,88,227,162,63,76,211,159,171,164,1,161,191,163,72,197,107,154,28,155,191,109,204,181,113,82,241,152,63,66,181,134,29,130,124,161,191,89,54,179,103,39,18,163,63,250,239,197,114,157,247,162,191,32,48,104,75,158,48,162,63,132,28,3,8,108,43,153,191,97,126,176,123,92,156,156,63,183,254,211,146,156,46,157,191,53,60,231,214,165,123,148,63,233,56,208,83,255,145,163,191,161,1,203,253,142,231,163,63,88,193,53,218,152,207,161,191,183,191,87,33,121,16,163,63,1,4,98,106,152,255,154,191,225,210,194,3,197,210,157,191,94,181,117,19,104,59,162,191,240,34,81,247,208,94,164,63,177,179,146,174,153,169,164,63,12,133,208,189,214,78,162,191,116,35,25,119,193,87,151,191,112,160,93,184,86,181,150,63,3,187,21,35,14,148,147,63,29,172,211,176,24,187,149,191,205,48,183,101,246,56,164,191,56,183,127,153,140,206,163,191,104,133,98,47,124,191,165,63,234,38,196,182,104,103,162,63,93,80,32,234,19,60,151,191,82,41,198,28,152,137,151,63,80,160,8,175,206,119,157,63,233,206,66,192,170,196,141,191,185,131,121,239,24,79,147,63,96,144,187,178,112,4,166,191,124,0,36,202,216,102,167,191,253,175,250,12,23,188,162,191,90,121,233,220,188,184,164,191,124,201,186,222,57,63,148,191,133,33,60,97,159,22,156,191,39,141,111,91,200,159,157,191,212,143,250,1,248,91,183,63,98,181,27,98,64,199,165,63,195,141,10,68,63,53,150,191,114,239,22,246,17,15,160,191,255,69,65,237,23,131,147,191,24,163,148,170,29,51,193,191,162,140,150,25,197,7,193,191,195,169,16,251,204,4,169,191,177,36,113,184,152,76,151,191,136,34,44,212,12,209,187,63,124,123,156,35,204,118,174,63,48,171,4,116,138,31,218,63,254,102,35,208,178,28,196,63,12,207,245,29,148,6,217,191,233,7,183,213,152,63,195,191,216,110,102,36,202,131,224,63,253,78,52,66,40,10,202,63,46,184,29,255,78,227,224,191,239,127,185,90,65,144,182,191,15,63,88,238,248,196,139,63,80,73,1,37,198,219,144,191,7,25,105,218,61,90,159,191,119,116,61,59,68,28,153,63,67,61,128,244,35,185,181,191,214,67,127,210,48,231,183,63,11,97,150,70,240,234,166,63,129,245,154,45,64,139,128,63,246,12,139,250,120,179,162,191,16,120,145,122,236,83,167,63,197,36,201,6,82,72,165,191,236,216,184,10,106,169,162,63,118,86,44,213,75,129,164,191,80,25,95,250,218,73,150,191,217,36,19,227,37,86,138,63,26,165,224,23,213,55,150,63,169,159,26,180,13,179,137,191,121,126,227,101,214,59,174,191,238,197,215,161,176,254,175,63,4,73,242,192,165,139,155,63,10,194,212,30,205,202,159,191,202,178,128,122,74,179,147,191,254,222,248,244,175,34,150,63,119,185,191,101,219,195,139,191,26,8,58,215,203,27,135,63,71,124,182,144,93,37,162,191,29,17,203,217,169,244,162,63,241,223,87,120,252,236,162,191,16,10,19,185,175,246,161,63,127,123,160,193,18,100,148,191,60,207,149,141,2,181,144,63,219,90,210,148,243,240,146,191,238,9,160,178,130,27,140,63,234,28,91,162,202,123,162,191,184,49,184,25,186,9,167,63,177,193,88,50,36,195,163,191,61,22,113,176,242,17,151,191,190,74,207,142,14,174,149,63,161,180,26,68,25,175,143,63,32,182,73,72,114,135,136,191,255,212,233,42,177,201,157,191,156,182,181,198,133,217,166,63,218,6,60,214,47,219,148,191,35,17,247,107,92,113,144,191,127,204,176,18,1,66,143,63,216,75,174,122,15,172,160,191,77,51,215,67,224,152,159,191,111,140,51,127,60,147,151,63,30,190,123,253,238,16,143,191,74,149,80,41,39,14,144,191,28,32,55,158,223,170,145,191,164,190,205,249,248,61,139,191,36,101,36,209,46,236,155,191,215,71,204,179,44,121,157,191,224,156,77,232,214,48,154,191,104,215,167,129,215,1,151,191,221,173,255,71,136,132,144,191,73,65,240,180,69,16,146,191,64,111,33,184,138,72,143,191,197,86,128,118,98,41,144,191,20,52,114,101,28,75,159,191,4,135,98,48,100,52,154,191,161,211,126,122,21,92,152,63,162,172,237,183,91,14,148,191,10,140,207,70,224,5,147,63,248,253,182,0,86,95,149,191,36,210,192,44,109,100,147,191,59,145,196,160,140,90,146,191,146,231,238,78,194,122,143,63,30,22,25,36,96,206,138,63,241,72,199,188,118,10,150,191,48,65,186,123,179,163,150,191,239,0,70,157,46,100,157,63,178,157,224,113,174,228,148,63,157,104,55,228,81,199,141,191,138,50,100,161,194,234,147,191,75,95,172,28,254,84,149,63,160,173,42,247,117,245,143,63,31,82,149,57,160,113,138,191,66,36,204,24,224,26,147,63,32,233,41,130,141,175,149,63,154,216,229,10,145,228,147,191,32,91,31,25,95,142,138,63,50,55,166,30,70,202,140,191,143,190,80,243,68,179,138,191,100,4,23,37,208,175,144,63,237,98,164,33,179,201,146,191,92,51,42,254,153,160,140,63,48,6,148,140,237,185,146,191,13,30,131,3,157,71,147,63,235,201,116,120,80,226,144,191,161,130,249,46,128,181,141,63,45,236,228,51,89,30,150,63,61,128,62,36,215,50,150,191,29,230,161,179,222,216,140,63,184,124,62,36,136,62,142,191,67,118,95,246,58,251,144,63,98,102,100,145,25,76,145,63,13,22,67,44,234,63,139,191,229,206,42,203,34,124,152,63,113,90,29,198,142,60,145,191,100,139,212,52,33,164,148,191,139,89,83,142,61,81,139,63,110,28,146,192,91,97,136,191,244,228,207,222,158,215,144,191,61,72,250,41,245,78,145,191,39,230,248,132,143,172,139,191,242,167,195,181,48,245,164,63,144,18,43,173,204,48,188,191,12,194,155,115,48,11,148,191,37,177,7,242,19,215,155,191,138,131,126,43,54,235,193,191,190,19,241,52,7,209,193,191,109,206,66,6,12,124,162,63,190,240,237,196,199,11,171,63,26,8,32,194,253,223,188,63,98,146,107,208,9,199,180,63,38,61,199,144,186,0,166,63,233,28,0,37,84,56,168,191,109,35,43,148,12,49,219,63,201,116,181,17,145,232,169,63,222,108,130,14,177,158,221,191,37,81,120,84,76,128,180,191,172,71,114,198,25,43,201,63,229,19,178,131,152,77,181,63,112,126,33,206,31,54,205,191,28,227,86,43,94,101,131,63,108,8,194,213,152,182,146,191,53,140,237,129,72,56,142,191,95,58,253,131,214,156,138,63,214,119,107,213,80,230,133,63,54,225,214,144,144,216,165,191,235,26,238,216,42,28,181,63,246,233,60,62,185,76,162,63,97,174,50,114,173,99,170,191,40,187,251,178,41,214,164,63,94,215,34,69,7,73,177,191,32,195,237,69,189,140,163,63,32,93,233,72,67,217,164,191,143,209,68,38,166,193,145,191,2,177,166,163,54,54,137,63,249,9,75,163,109,42,144,63,171,67,84,160,75,21,134,191,62,100,162,246,30,84,165,191,130,58,188,249,98,138,171,63,229,57,44,13,187,94,149,191,225,137,215,23,92,182,142,63,109,126,127,169,109,230,141,191,60,145,44,240,124,91,144,63,94,111,254,69,139,65,133,191,51,164,161,12,75,90,130,63,235,154,88,73,23,22,150,191,222,244,201,69,241,199,150,63,175,172,107,25,75,46,160,191,120,192,192,186,157,135,157,63,175,215,89,96,234,212,143,191,118,210,212,194,124,29,145,191,247,143,177,141,245,128,160,191,233,193,73,251,211,22,163,63,30,163,161,51,78,58,140,191,246,151,181,90,155,19,134,63,152,88,68,225,75,149,136,63,28,207,174,3,85,34,161,63,75,150,220,195,206,230,134,191,207,50,108,18,14,93,134,191,152,9,125,29,194,126,129,63,109,118,44,73,13,33,130,191,161,215,244,85,166,240,132,191,218,254,128,152,35,48,126,191,147,147,14,194,159,233,136,191,96,116,255,174,132,12,155,63,148,106,41,200,138,58,149,191,36,108,128,48,156,95,147,191,182,80,219,10,168,139,152,191,190,124,164,210,180,210,142,63,87,255,20,162,157,163,200,191,176,241,248,46,208,184,135,191,66,208,71,171,237,62,135,191,190,227,111,248,157,189,189,191,118,39,208,3,45,181,187,191,189,172,15,190,246,241,169,63,34,249,197,120,186,122,171,63,38,235,184,211,249,6,175,63,62,209,27,38,187,135,188,63,13,106,241,196,158,5,179,63,61,231,6,187,165,22,144,63,132,88,25,169,43,189,209,63,125,57,62,216,66,61,173,191,140,248,91,22,206,145,218,191,8,155,132,188,177,111,128,191,183,56,144,116,22,119,198,63,133,171,240,137,181,6,140,191,226,39,224,35,9,14,139,63,85,59,11,127,77,8,155,63,10,128,146,145,43,63,174,63,141,163,107,190,225,182,159,63,97,207,19,105,80,72,161,191,60,69,98,9,63,118,174,191,203,34,187,80,221,216,163,63,19,171,46,187,81,147,162,191,249,49,126,255,24,74,178,191,189,231,220,100,212,150,160,63,65,48,101,81,164,59,132,191,179,185,183,106,62,9,128,63,225,207,174,121,197,253,128,63,118,227,69,9,8,105,121,191,26,214,204,122,24,37,144,191,43,110,14,215,218,133,155,63,238,46,136,237,214,108,145,191,11,86,66,243,90,136,147,63,7,239,131,255,70,62,129,191,19,119,222,2,109,235,130,63,183,151,108,239,179,75,126,191,253,146,37,20,107,224,122,63,178,4,39,239,68,138,134,191,2,50,202,5,15,13,137,63,123,205,187,107,203,163,134,191,136,82,139,135,118,106,150,191,35,169,101,7,0,33,147,63,126,102,203,79,145,154,152,63,81,192,74,40,68,111,149,63,127,71,87,57,235,162,153,63,15,105,82,161,83,57,144,191,31,135,134,83,231,68,144,63,195,205,240,44,79,13,197,191,205,69,186,164,81,167,117,191,254,246,7,75,163,190,179,191,136,2,9,164,203,78,173,191,241,205,101,251,125,9,174,63,64,129,17,126,16,196,173,63,157,186,203,231,191,80,168,63,194,166,63,174,129,208,174,63,135,81,253,40,164,35,180,63,105,56,147,32,192,137,172,63,247,5,116,103,234,36,203,63,171,60,158,76,245,54,120,63,123,218,12,77,147,0,212,63,118,60,247,150,132,175,190,191,151,54,223,136,203,39,166,191,206,40,213,187,78,118,175,63,35,177,89,68,73,200,150,63,236,11,236,40,57,150,165,63,220,176,182,56,43,236,171,191,47,3,176,170,53,79,167,191,20,55,206,191,122,240,167,63,26,9,98,81,73,167,179,63,163,143,144,44,206,117,153,191,19,43,140,171,106,208,140,63,231,44,96,68,53,49,151,191,91,252,122,217,105,141,163,63,191,154,173,158,10,200,161,191,253,74,4,177,213,180,138,63,20,185,215,233,68,209,143,63,166,21,231,94,47,50,145,191,44,65,195,215,10,199,144,63,108,236,128,71,125,35,145,191,90,120,25,224,9,222,148,63,95,92,121,76,148,187,157,191,237,252,72,230,252,102,150,191,175,90,156,180,69,230,150,191,2,22,118,191,233,156,146,191,125,193,39,44,225,64,139,63,118,48,20,57,219,31,146,63,53,9,82,183,104,27,152,63,9,244,31,41,131,157,146,63,48,142,184,169,22,251,146,63,169,202,163,117,190,102,146,191,15,207,103,148,250,176,143,63,194,92,67,167,238,153,144,191,53,191,210,54,108,131,144,63,200,137,222,216,125,213,147,191,146,135,209,190,242,94,144,63,18,48,106,9,101,87,184,191,170,99,176,97,148,252,164,191,246,165,9,169,44,132,165,63,194,233,123,212,178,74,164,63,249,56,146,113,100,24,182,63,44,202,99,137,169,69,182,63,249,206,243,119,41,18,161,191,255,19,62,133,64,105,171,191,116,138,26,239,111,222,162,63,6,110,88,124,255,185,155,63,120,247,155,98,51,125,179,191,18,150,85,108,201,114,172,63,253,255,203,213,142,49,190,63,122,197,5,112,221,172,167,63,184,139,203,78,156,237,185,63,23,82,229,41,53,212,196,63,200,178,180,69,226,186,184,63,251,90,205,248,85,30,196,63,65,125,7,203,188,23,185,63,24,151,217,79,59,240,161,191,218,135,98,50,57,67,151,63,34,155,45,122,132,134,169,63,154,52,119,185,27,1,147,191,77,3,94,43,177,108,160,63,12,74,102,246,239,29,181,191,210,254,253,208,120,195,155,191,172,176,113,189,222,56,163,63,0,161,128,26,27,236,151,63,35,248,83,64,66,80,152,63,61,253,238,236,216,47,158,63,230,38,106,27,205,160,173,63,19,245,156,80,251,251,164,63,33,26,104,70,206,114,170,63,216,77,180,49,44,92,159,63,104,204,131,170,118,183,140,63,110,49,13,115,10,135,159,191,149,153,80,230,123,160,141,63,235,230,5,170,120,142,160,63,105,183,36,203,167,154,164,191,161,201,139,17,235,66,146,191,147,112,197,212,42,119,155,63,121,27,12,163,21,249,130,63,7,123,238,136,225,136,149,63,146,138,120,247,249,207,151,191,112,79,10,3,29,241,136,63,50,234,32,210,17,246,131,191,164,84,37,235,113,15,160,63,178,113,140,153,117,182,158,191,222,26,231,121,110,95,160,63,33,209,251,155,51,97,159,191,67,174,197,82,242,190,145,191,19,223,250,230,221,178,150,63,83,189,19,156,33,101,143,191,130,168,185,104,6,112,160,63,131,120,203,38,15,147,162,191,186,99,77,217,211,76,159,63,146,20,149,121,109,40,152,191,33,6,15,228,167,148,145,191,171,184,163,157,219,127,154,191,46,29,38,202,79,252,160,191,154,40,12,94,171,13,147,63,128,91,118,164,14,156,137,63,99,213,65,40,223,32,147,191,214,71,40,73,1,213,136,191,232,10,65,80,155,225,153,63,226,38,106,217,68,208,150,63,208,33,28,198,109,186,143,63,31,60,244,148,26,196,148,63,207,55,177,227,5,8,135,63,180,210,229,242,15,9,145,63,224,239,202,122,249,63,153,63,240,153,229,190,229,124,153,63,2,250,52,115,38,217,144,63,12,241,21,186,36,202,144,63,61,106,85,46,188,190,144,191,51,83,189,151,229,79,148,63,98,73,133,78,156,163,144,63,171,80,58,215,239,119,144,191,70,210,170,161,205,33,148,63,143,147,255,174,224,197,146,191,74,70,98,179,101,254,138,63,53,71,83,84,233,99,146,191,3,87,99,126,105,230,144,191,73,68,24,230,65,29,145,63,95,202,231,156,109,74,142,191,209,2,214,207,217,183,145,63,177,230,194,244,242,98,145,63,237,218,216,217,52,27,162,191,240,143,179,247,237,1,193,63,205,157,169,2,152,208,161,63,96,47,94,21,46,151,188,63,254,61,135,12,217,116,186,63,126,165,147,195,73,130,169,191,99,80,218,252,42,141,168,191,5,75,164,250,200,39,165,191,130,35,186,212,101,53,150,63,234,24,240,108,183,64,184,191,69,196,255,119,69,128,169,191,43,156,57,24,50,68,169,191,23,6,193,82,73,208,199,63,53,190,231,104,24,99,167,191,81,234,149,172,19,39,193,63,217,25,180,45,163,113,169,191,145,70,79,24,28,49,166,191,247,227,178,12,167,113,173,191,41,53,57,243,81,248,144,191,242,214,153,43,62,206,163,63,30,140,98,132,137,118,149,63,253,79,82,186,247,184,155,63,249,171,218,160,169,100,147,191,49,62,103,144,167,239,184,191,236,250,255,114,106,156,138,191,151,191,162,31,47,59,173,63,247,60,169,171,122,178,150,191,193,88,125,176,210,243,175,63,142,246,88,215,108,47,157,191,225,209,95,228,174,189,179,63,173,223,34,183,142,133,150,191,5,38,248,42,101,76,147,191,246,187,240,141,148,247,148,63,159,22,22,37,232,161,138,191,250,109,93,162,182,237,148,191,0,135,63,49,77,51,134,63,88,204,107,233,19,143,155,63,9,18,65,41,100,5,167,191,34,129,70,25,255,42,151,63,72,123,47,8,67,41,141,191,180,114,112,165,14,124,138,191,168,24,62,94,100,40,143,63,111,38,216,136,205,219,146,191,166,244,127,32,71,250,137,63,249,213,90,128,182,44,132,191,131,187,124,106,215,51,150,63,23,83,5,3,144,129,150,191,128,170,190,191,62,135,161,63,227,156,246,152,124,148,160,191,174,120,20,192,16,131,149,191,126,203,34,99,39,175,141,63,106,28,171,171,65,127,141,191,217,64,142,110,83,2,159,63,206,24,83,175,56,9,161,191,27,215,192,168,145,142,148,191,28,28,7,62,20,70,139,63,145,113,199,108,160,235,146,191,248,139,121,130,249,235,143,191,218,154,141,50,226,30,152,63,254,27,120,69,199,204,156,191,163,56,14,153,135,123,144,63,157,231,217,16,212,250,140,63,139,223,106,9,4,127,137,191,169,95,200,224,157,19,157,63,10,175,38,228,122,193,155,63,232,184,237,237,9,35,141,63,171,225,159,74,255,40,145,63,7,155,25,200,196,210,145,63,104,127,221,85,6,117,146,63,44,179,177,134,225,170,144,63,77,165,182,186,3,20,143,63,54,151,84,52,46,135,152,63,17,243,202,128,91,122,150,63,37,163,165,133,69,7,144,63,155,50,64,86,248,210,147,191,149,247,146,236,225,245,144,63,148,187,81,82,140,67,140,191,138,25,21,9,128,98,145,191,60,82,200,113,254,243,145,63,231,174,200,54,231,115,136,191,134,250,134,87,192,220,144,63,151,16,71,140,250,136,195,63,174,165,241,205,101,113,189,63,95,113,33,77,37,6,185,63,38,74,138,230,68,149,166,191,67,174,195,96,253,4,164,191,21,19,106,7,54,205,170,191,21,132,185,194,117,93,179,191,167,196,251,142,159,210,166,191,127,112,232,101,42,118,178,63,189,225,3,62,0,40,163,63,114,13,32,35,10,33,192,191,206,246,206,100,34,42,198,191,108,134,44,210,202,148,177,63,197,156,131,117,7,87,144,63,62,38,157,255,227,2,133,191,64,110,85,108,49,129,165,191,246,114,244,205,48,81,181,191,238,194,85,82,172,158,176,63,22,152,202,95,24,24,160,63,156,134,152,181,208,247,167,191,185,105,175,45,168,169,187,191,201,46,237,9,150,155,135,63,21,4,109,99,217,197,131,63,91,12,23,38,224,98,129,191,91,3,155,168,80,38,156,191,56,35,170,221,232,222,152,63,235,113,248,93,95,22,150,191,85,38,253,249,14,130,141,191,158,172,109,152,88,37,129,63,247,207,31,166,1,254,130,191,193,90,222,21,25,243,145,63,89,22,47,133,250,35,144,191,207,237,68,160,29,116,145,63,93,98,166,213,210,8,138,191,205,192,160,142,12,153,137,191,157,150,17,204,88,243,153,63,230,5,197,38,111,18,148,191,46,65,253,215,104,2,137,191,231,216,50,112,106,35,145,63,153,176,54,207,42,160,153,191,14,202,163,21,142,95,146,63,228,180,7,141,63,50,142,63,233,50,103,76,175,72,138,63,88,28,54,176,35,95,147,191,220,118,241,158,102,10,186,63,100,183,100,74,187,206,180,63,87,187,220,38,253,204,177,63,46,187,227,109,208,102,160,191,202,82,45,250,219,117,162,191,145,20,211,95,231,26,167,191,106,2,209,4,194,211,175,191,178,149,171,105,153,110,162,191,252,243,65,112,59,238,186,191,73,221,55,120,11,29,193,63,131,89,254,85,134,121,166,191,194,75,174,112,31,133,176,63,95,5,136,39,21,35,165,191,44,130,78,57,104,192,169,191,84,82,4,215,47,11,155,63,20,223,3,33,60,44,167,63,198,132,54,62,27,95,152,63,72,201,218,77,175,114,183,191,5,79,158,210,195,149,149,191,135,20,184,220,170,155,152,63,253,233,10,247,6,35,147,191,27,107,22,122,98,157,146,63,148,123,74,29,154,238,146,191,212,103,48,119,38,227,140,191,171,168,178,2,250,232,137,63,249,98,131,147,49,150,129,63,225,127,81,254,236,248,130,63,131,210,186,56,250,173,154,63,205,193,67,251,210,77,163,63,102,156,172,129,79,151,163,191,150,56,168,46,3,151,156,63,184,18,43,99,238,147,157,63,95,186,89,20,41,93,152,191,25,139,57,94,12,194,167,191,118,86,144,250,227,48,166,191,151,74,200,88,153,101,158,191,252,159,76,132,57,122,176,191,115,200,118,158,27,242,178,63,28,103,30,156,173,162,170,63,176,223,54,104,192,20,176,191,16,6,129,136,61,88,161,63,135,76,7,215,158,71,176,63,123,36,160,130,211,235,157,191,51,3,24,42,133,26,178,191,89,85,176,211,246,110,162,63,191,127,162,52,165,24,160,191,31,159,24,242,182,117,148,191,25,91,186,36,165,16,160,63,43,212,192,248,90,17,150,63,112,143,249,204,32,165,152,191,129,102,176,145,208,94,166,191,124,184,168,130,11,175,172,63,160,110,194,101,174,124,160,63,51,223,100,137,158,51,162,191,53,41,85,121,169,206,165,63,141,25,1,143,135,187,166,63,103,141,76,54,31,205,163,191,38,231,233,130,44,126,168,191,118,84,166,242,136,22,144,191,95,255,67,81,254,175,145,63,92,49,12,73,21,167,151,191,92,146,106,253,83,11,153,63,194,117,130,117,84,119,132,191,39,216,43,151,154,65,139,191,191,27,217,183,59,190,137,63,199,175,31,138,114,25,141,191,81,160,7,47,149,70,144,63,86,219,187,78,149,9,143,191,235,235,246,160,122,39,147,63,212,13,171,132,27,27,155,191,211,104,19,77,194,15,142,63,54,124,158,0,151,145,149,191,218,137,180,200,72,0,148,63,107,59,112,110,197,203,145,191,96,99,197,77,111,178,145,191,79,73,38,128,222,234,145,191,24,144,181,68,23,176,144,191,229,219,10,196,244,153,148,191,183,234,95,141,199,233,148,63,224,2,46,46,30,45,142,63,94,16,64,38,193,80,140,191,32,184,20,97,30,199,145,63,89,225,5,235,241,221,147,63,130,204,153,75,126,255,146,63,141,167,139,14,1,1,168,191,241,237,21,230,102,254,131,191,67,52,11,103,184,110,146,63,65,117,159,154,237,126,164,191,101,187,89,62,185,144,166,191,203,210,191,36,199,110,159,63,152,40,176,42,214,4,166,191,12,2,25,95,168,91,164,63,29,148,21,134,90,244,154,191,111,132,72,112,59,119,181,191,2,212,144,253,12,35,162,63,254,250,100,254,68,243,182,63,133,219,33,158,130,83,141,63,147,229,133,228,145,43,158,191,114,72,226,185,153,204,144,191,197,205,36,35,163,222,163,63,65,75,69,150,112,173,152,191,67,48,227,173,238,169,164,191,100,15,122,120,101,227,157,63,18,5,118,77,195,84,156,63,153,154,122,27,1,249,162,191,129,110,40,80,222,102,151,191,238,115,195,97,225,4,169,191,185,64,180,2,210,88,154,63,6,219,109,129,205,85,175,63,46,170,131,90,12,73,148,191,180,83,247,147,82,135,160,63,119,148,155,181,110,184,141,191,239,21,197,85,50,80,140,191,61,196,198,180,172,177,140,63,164,98,102,50,190,138,145,191,82,55,40,113,226,52,147,63,171,130,74,250,158,100,148,191,162,175,217,65,71,105,148,63,33,180,161,135,26,219,147,191,62,221,1,19,242,85,146,191,86,39,132,216,224,35,148,191,190,89,200,83,22,248,144,191,182,205,62,47,122,223,148,191,66,26,204,194,99,90,145,63,81,129,108,149,101,120,146,191,34,101,80,168,105,157,145,63,213,13,92,230,68,167,152,191,128,254,162,241,66,195,145,63,76,229,239,59,10,133,146,191,65,176,59,152,159,85,152,191,105,221,30,62,232,185,129,191,85,10,137,202,3,145,145,63,145,224,253,142,40,217,163,191,163,160,202,88,125,238,159,191,199,79,159,30,63,16,163,63,71,217,153,255,178,186,160,191,230,164,53,59,243,124,107,63,143,22,249,159,141,231,186,63,192,66,48,21,22,196,106,191,220,175,43,52,156,202,167,191,127,113,116,253,159,46,150,191,245,141,209,173,63,239,160,63,167,61,115,165,180,120,152,191,17,130,18,205,30,166,177,63,9,254,202,33,148,240,169,191,202,166,50,56,32,129,151,191,184,35,7,23,228,45,146,191,131,17,146,29,191,210,135,191,13,243,180,11,169,145,136,63,155,161,38,213,20,221,138,191,212,237,217,187,196,160,141,63,147,95,253,237,99,65,145,191,105,104,84,78,242,231,144,191,74,208,202,146,76,90,140,63,208,152,132,137,123,112,152,191,193,144,166,200,195,246,156,191,233,141,126,5,105,190,141,191,202,8,54,35,169,126,177,191,103,120,205,213,87,6,187,63,198,122,173,251,43,208,169,63,160,18,36,71,188,23,145,191,156,14,220,218,133,43,161,191,125,24,75,89,243,232,147,63,247,213,58,195,157,97,177,63,152,154,209,213,114,231,157,63,204,20,253,64,112,66,136,63,15,77,223,16,250,74,181,191,248,139,103,228,123,187,97,191,48,22,24,86,105,121,177,191,61,88,32,19,47,128,101,63,206,31,107,221,209,180,170,191,126,235,142,48,97,168,168,191,207,189,90,59,134,103,167,191,163,9,68,205,125,211,151,191,148,83,163,221,76,55,148,191,43,0,150,213,215,139,147,191,227,165,247,242,231,62,238,63,13,13,70,189,64,201,217,191,95,122,245,62,177,58,212,63,98,114,109,244,58,146,232,63,91,173,180,93,57,114,217,63,184,95,117,192,12,37,193,63,201,72,39,14,155,191,221,191,182,140,242,115,149,243,210,191,10,236,176,40,41,175,210,63,204,160,90,94,78,126,189,191,196,120,120,91,221,154,248,63,191,243,76,176,229,177,250,191,208,32,53,142,19,162,243,63,162,180,133,83,247,94,251,191,192,24,50,40,141,81,216,63,66,179,19,167,204,142,244,191,0,249,65,189,152,101,205,191,149,132,88,236,56,193,224,191,243,237,95,160,94,11,218,191,81,26,8,92,62,34,200,63,202,96,43,61,206,116,184,63,237,233,166,117,103,86,211,191,106,119,132,81,15,199,217,191,109,1,94,19,9,56,195,63,167,39,147,132,130,177,211,191,192,73,141,157,107,179,174,191,243,206,232,238,139,84,178,63,112,86,95,219,250,138,196,63,198,203,152,34,189,185,193,191,96,98,99,18,241,59,162,191,180,38,209,90,118,8,195,191,5,95,227,83,137,114,199,191,251,199,34,65,182,160,198,191,139,16,62,94,4,133,183,191,134,126,144,135,248,73,183,63,239,129,32,139,19,237,181,191,74,219,144,82,102,134,182,63,232,220,135,134,251,200,193,191,67,244,27,53,187,43,182,191,253,77,94,97,96,44,186,63,104,216,168,8,94,107,188,191,109,148,64,23,10,213,184,63,225,35,136,37,155,2,188,191,22,50,236,173,223,164,178,191,232,139,176,204,165,162,185,63,184,91,119,213,21,16,180,63,234,176,84,106,175,163,180,191,151,194,216,143,117,50,174,191,82,126,241,66,45,123,180,191,7,144,208,164,241,198,179,191,40,39,73,226,181,144,184,63,159,185,21,234,81,164,181,63,186,26,211,222,103,42,183,191,127,190,132,74,3,23,185,191,171,53,120,196,208,232,182,191,22,50,70,85,185,234,181,191,122,7,186,209,217,116,178,63,204,70,18,148,198,205,177,191,159,12,60,212,234,235,182,191,37,73,138,36,254,133,182,191,166,78,103,56,241,180,183,191,74,47,170,111,240,102,182,191,48,82,84,231,141,85,185,191,131,90,52,172,67,138,180,63,119,117,156,98,138,216,180,63,251,54,70,103,162,50,182,191,179,173,91,156,160,31,182,63,91,219,193,147,111,166,184,63,180,211,214,202,242,189,182,191,244,188,29,165,241,178,180,191,153,111,63,51,176,2,183,63,142,19,42,83,85,138,180,191,142,159,172,197,52,98,180,63,102,94,149,115,14,161,180,191,62,52,136,48,73,232,178,63,227,57,170,228,74,225,181,191,165,189,170,193,182,239,182,63,160,11,94,144,32,111,172,191,71,78,78,138,111,59,184,191,129,242,145,4,248,74,186,63,233,148,8,2,184,37,181,63,242,176,87,125,134,73,180,191,74,115,198,98,5,184,182,191,231,34,218,125,10,152,184,191,48,242,33,240,122,225,183,63,68,204,62,43,241,202,184,63,146,108,10,230,127,64,185,191,191,78,252,161,186,22,184,191,194,205,232,55,247,117,183,191,194,216,21,155,155,42,182,191,82,137,122,229,8,138,228,63,55,215,157,168,166,194,205,63,203,111,16,11,161,153,224,63,108,35,175,30,92,64,197,63,53,79,131,114,103,147,208,191,92,57,36,67,62,99,206,191,31,195,172,39,101,91,209,63,253,70,247,222,187,242,201,191,96,57,139,96,239,6,174,63,80,246,72,220,179,159,225,63,204,161,85,120,67,157,208,191,135,91,247,80,17,200,228,191,4,41,81,176,250,70,238,191,82,186,231,78,217,135,219,63,41,3,178,31,237,25,213,63,108,236,229,179,50,73,215,191,206,62,81,74,4,119,195,63,5,116,17,226,6,55,216,191,26,65,160,229,64,86,190,191,37,52,60,22,202,217,200,63,231,62,186,66,237,38,196,63,11,60,22,211,102,82,172,191,164,128,110,126,146,148,194,63,177,101,67,132,185,67,185,63,105,235,207,204,84,106,201,191,182,36,17,77,182,234,162,191,184,215,251,126,148,190,206,63,170,245,1,178,200,197,195,191,193,157,179,255,38,41,187,191,46,36,149,125,64,171,165,63,255,1,161,27,32,38,160,63,50,147,48,151,14,232,145,191,129,245,185,234,39,158,192,191,152,86,125,77,155,228,192,63,78,119,162,81,66,216,183,191,219,107,235,176,160,76,185,191,48,129,166,34,140,22,183,63,248,135,67,188,56,75,168,63,38,229,31,155,236,168,164,191,150,169,1,114,74,111,179,191,132,21,17,79,34,23,181,63,83,141,182,111,104,200,193,191,57,205,222,95,151,82,190,63,224,67,116,52,200,206,147,191,127,143,142,45,21,177,147,63,162,143,146,222,119,29,176,63,126,50,222,86,151,121,182,191,29,201,32,63,169,87,192,63,251,248,127,117,26,155,180,63,209,190,220,55,157,140,186,191,144,206,1,213,76,0,170,63,76,247,22,247,244,215,181,191,7,179,212,163,139,244,179,191,168,222,56,67,87,225,188,63,109,129,230,246,186,91,187,63,35,18,113,39,60,89,186,191,40,71,115,53,107,184,187,191,183,133,105,161,239,220,183,191,129,121,109,241,248,239,183,191,108,247,154,220,111,75,181,191,123,41,64,118,0,64,182,191,141,22,252,184,196,90,188,191,217,133,39,246,31,143,187,191,48,138,1,70,40,145,183,191,226,239,22,38,207,243,187,191,222,140,94,223,201,37,183,63,32,72,207,242,4,81,184,63,173,151,93,80,81,160,184,191,159,156,195,88,103,179,181,63,170,203,23,87,53,137,188,63,61,143,192,170,89,6,184,191,107,225,154,62,42,88,186,191,78,32,126,174,102,61,186,63,62,122,168,31,151,190,184,191,134,121,201,231,109,192,183,63,130,3,15,190,216,59,180,191,5,237,246,74,183,187,184,63,195,147,12,97,175,240,186,191,20,217,255,21,167,209,186,63,243,130,111,97,172,55,186,191,93,165,154,201,73,124,188,63,102,232,212,190,4,190,184,63,109,188,116,28,85,159,185,191,83,214,134,143,78,17,188,191,32,255,248,245,228,152,185,191,139,205,21,132,32,74,188,63,150,38,32,22,117,99,185,63,143,120,45,193,111,35,187,191,134,80,179,207,133,80,186,191,91,166,34,23,225,205,185,191,148,201,253,132,51,155,183,191,79,94,161,41,252,31,195,63,94,21,129,55,87,117,191,191,204,77,58,173,64,148,192,63,219,220,32,225,152,156,186,63,99,205,171,223,253,165,183,191,173,131,86,162,80,81,183,191,108,230,204,4,46,139,204,63,195,80,246,239,16,214,196,63,30,217,96,217,211,205,187,191,88,75,216,245,213,226,192,63,195,30,13,160,129,132,210,191,160,33,163,55,151,108,226,63,24,20,141,132,209,33,216,191,190,103,167,180,215,78,201,63,70,245,202,115,182,238,196,63,138,99,7,58,51,121,175,63,119,96,44,99,214,180,202,191,89,253,181,33,237,14,196,191,193,16,227,99,53,46,181,63,122,188,139,222,94,62,190,63,130,36,161,178,68,255,160,191,149,109,72,95,0,117,194,63,218,110,147,111,213,35,208,191,22,98,93,38,164,89,181,63,120,125,250,182,137,47,149,63,59,40,212,222,112,253,182,191,226,252,74,53,131,225,196,63,68,54,205,89,5,103,176,191,165,48,28,153,107,56,185,191,202,246,39,76,156,205,165,63,42,99,113,217,13,8,156,63,30,180,170,41,232,106,156,63,220,166,18,0,6,43,170,191,23,25,191,19,111,216,150,63,25,96,174,146,254,242,178,191,211,88,129,150,205,16,179,63,149,230,172,40,145,153,177,191,106,135,251,177,41,155,180,63,120,160,251,197,202,203,174,63,185,156,48,121,48,54,166,191,173,186,78,111,199,37,176,191,224,127,198,246,119,100,145,191,160,176,242,225,161,94,182,191,216,66,10,119,120,247,175,63,18,57,45,217,109,62,151,191,72,166,98,66,90,27,176,191,195,237,13,108,78,219,150,63,171,9,178,32,63,107,173,191,208,156,70,249,86,104,180,63,89,86,111,7,164,174,181,63,238,114,251,40,218,131,168,191,40,219,106,214,116,95,169,63,87,178,157,40,147,174,166,63,221,16,34,89,174,121,177,63,3,64,215,25,239,200,170,63,12,53,212,130,144,248,170,191,189,238,183,77,190,139,174,191,154,161,70,58,204,218,162,191,73,242,132,82,9,6,162,191,230,168,91,107,35,157,171,191,33,188,148,125,195,1,175,191,71,21,130,184,182,103,168,191,41,86,195,89,46,210,175,191,31,139,65,27,68,170,172,63,226,132,235,117,16,23,166,191,147,26,96,41,99,206,176,63,238,185,1,204,202,115,167,191,188,193,195,164,122,196,170,191,226,58,147,207,47,100,172,63,134,94,211,127,246,122,165,191,105,50,25,229,250,117,164,63,192,244,167,207,170,13,169,63,10,145,50,94,164,170,173,191,29,154,42,137,203,206,174,63,105,128,11,195,177,253,169,191,217,245,197,252,7,230,174,63,121,180,136,220,168,123,164,63,67,143,230,193,113,235,164,191,253,248,252,222,7,98,168,191,171,5,82,153,172,91,163,191,151,217,49,77,58,95,174,63,155,140,32,118,144,68,169,63,239,27,115,52,24,238,172,191,35,52,39,183,224,102,170,191,196,135,1,143,203,108,167,191,247,133,217,163,210,116,166,191,75,92,202,124,87,29,158,63,112,220,169,24,52,80,208,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71680);
/* memory initializer */ allocate([66,216,141,251,37,107,171,63,75,36,145,26,31,176,163,191,117,251,112,248,72,194,198,191,146,98,175,71,31,94,197,63,239,236,34,89,252,195,202,63,186,232,58,141,83,181,161,191,226,226,217,193,56,132,200,63,51,175,246,230,117,230,213,191,136,147,5,128,247,125,202,63,219,31,201,33,158,2,213,63,161,118,59,26,79,123,192,191,149,78,69,236,74,204,195,191,219,209,114,239,16,112,187,63,221,155,207,151,48,149,196,63,175,127,54,66,85,207,203,191,40,65,55,170,222,208,178,63,119,221,80,84,101,246,185,191,241,29,23,255,95,33,169,63,235,200,60,224,52,8,183,191,143,3,181,132,141,88,176,191,44,196,174,81,71,124,198,63,81,50,156,79,50,153,194,63,236,162,78,73,156,153,190,191,51,232,93,83,57,188,177,63,158,142,231,187,2,64,153,191,67,62,73,254,114,102,195,191,117,128,115,72,123,138,190,191,194,49,167,48,179,140,182,63,181,155,50,148,206,231,185,63,245,192,169,184,126,196,199,191,232,170,101,68,82,97,178,63,230,128,220,62,106,108,201,63,159,125,249,209,144,197,177,191,199,167,36,200,103,24,195,191,215,130,88,244,99,123,160,63,76,148,119,205,170,240,179,191,7,42,94,117,252,68,177,63,42,230,243,160,250,149,181,63,203,110,179,129,194,233,190,191,231,181,119,185,0,144,173,63,238,54,166,17,222,10,174,191,104,237,18,201,118,108,153,63,109,177,151,191,6,145,145,63,85,41,130,134,153,255,180,63,23,216,45,133,178,188,176,191,136,129,89,180,188,6,166,63,120,60,148,247,62,243,184,63,240,3,53,175,2,92,168,191,144,49,83,245,162,119,168,191,240,164,192,133,27,254,166,63,92,132,51,190,129,21,173,191,55,174,194,167,123,83,184,191,86,24,213,22,97,162,160,63,5,98,130,90,219,110,157,191,88,9,218,29,140,10,145,191,68,157,82,206,15,114,145,63,147,176,149,23,181,78,145,191,106,231,232,96,122,74,168,191,69,146,49,150,185,254,144,63,157,230,174,28,115,135,177,63,215,219,21,50,97,176,178,191,141,200,237,242,92,88,167,63,123,6,201,107,245,70,164,63,154,244,21,96,128,254,172,191,232,199,151,12,137,125,156,191,182,180,180,227,132,116,208,191,243,196,180,230,172,128,197,191,158,254,63,210,127,120,196,191,232,15,167,98,208,158,192,63,70,240,145,171,134,98,199,63,42,146,126,43,166,138,202,63,167,186,222,209,36,16,164,191,170,145,176,167,85,79,162,63,213,187,111,13,188,189,195,63,30,141,67,102,86,86,159,191,110,182,93,60,228,127,211,191,241,187,206,179,90,182,159,63,206,190,220,253,10,137,213,63,212,224,110,47,53,36,145,63,191,75,218,9,14,1,204,191,220,226,187,202,71,45,160,191,163,213,142,191,64,20,178,191,161,81,121,197,188,56,206,63,178,142,25,76,68,237,204,63,224,253,64,13,130,54,186,191,13,199,40,77,220,249,145,63,238,171,2,84,255,112,201,191,131,182,232,167,144,27,175,63,191,143,19,184,77,165,183,191,145,245,78,250,193,239,182,63,21,40,189,80,27,26,181,191,153,110,6,178,0,60,184,191,191,145,44,120,169,174,205,191,175,28,112,83,219,10,184,63,54,44,144,184,183,40,204,63,211,145,109,223,199,252,141,63,46,79,118,87,134,137,186,191,167,74,121,238,45,23,159,191,103,162,178,251,182,163,154,63,151,100,84,251,199,245,192,63,149,203,78,32,190,156,195,191,20,90,94,133,49,165,132,191,231,102,173,210,197,128,194,63,170,179,13,14,55,248,179,191,149,92,72,147,72,2,164,191,70,71,116,219,13,144,162,63,51,44,121,220,204,250,187,191,236,175,219,126,217,191,163,191,1,186,126,124,14,51,175,191,179,28,101,113,155,231,164,63,149,237,117,97,25,124,168,191,39,180,119,198,121,155,149,63,196,220,102,247,101,84,150,191,85,56,226,17,193,198,172,63,46,76,135,109,148,66,179,191,99,86,162,101,238,216,188,63,14,247,63,162,137,155,165,191,181,96,75,128,189,143,185,191,49,74,14,246,79,52,166,63,175,254,205,196,1,57,181,63,212,152,172,36,169,49,181,191,117,27,67,231,74,190,177,63,208,58,168,104,156,252,185,63,38,44,42,160,61,130,165,191,46,134,147,76,34,134,179,63,216,123,56,70,191,226,160,63,247,194,44,245,7,10,162,191,135,37,164,170,29,236,180,63,127,79,212,63,25,2,163,63,196,36,38,75,123,138,184,63,223,240,161,65,55,144,161,191,153,218,223,229,203,21,162,63,168,226,91,224,83,162,188,63,72,204,213,59,53,249,161,191,211,159,34,131,85,131,179,63,233,36,223,96,214,15,181,191,68,74,24,180,117,111,173,63,14,81,102,213,185,169,188,191,99,230,163,91,238,121,178,63,82,167,16,31,87,209,168,191,145,132,82,7,11,76,177,191,252,147,162,137,33,101,177,63,196,178,215,94,131,197,166,191,231,91,101,141,219,253,163,191,191,170,202,20,255,114,172,63,250,84,12,6,28,176,173,63,60,48,249,43,88,83,196,191,144,128,159,157,214,12,184,191,122,247,231,41,43,241,194,191,40,149,24,107,250,0,178,63,203,179,108,115,244,74,189,63,130,247,178,120,55,160,196,63,60,128,65,247,197,44,190,191,235,97,248,202,134,204,208,63,201,204,153,212,219,248,185,63,26,187,125,154,173,57,204,191,32,81,134,202,161,26,203,191,76,168,35,183,62,154,181,191,143,208,249,117,126,207,200,63,84,79,221,158,3,139,203,63,134,88,16,133,132,14,179,191,57,205,150,56,43,141,198,191,180,35,80,132,130,110,173,63,194,91,175,7,250,244,213,63,188,245,92,188,25,154,184,191,208,2,73,50,126,244,195,191,130,191,62,207,89,148,192,191,81,87,248,226,189,115,195,63,46,128,81,205,185,95,195,191,33,140,101,23,113,218,193,63,52,26,137,135,234,124,178,191,124,221,222,134,80,176,190,63,94,12,169,91,149,19,188,191,254,31,251,111,144,209,175,191,208,22,153,162,150,162,182,63,139,55,241,210,120,186,176,63,173,196,59,151,140,109,179,191,233,242,207,211,143,244,179,191,139,6,154,38,220,230,188,63,196,179,29,181,83,24,177,191,95,128,38,151,63,67,191,191,208,112,17,135,3,27,176,63,110,85,131,255,194,221,183,191,6,39,154,241,214,197,177,191,70,149,250,203,242,52,180,63,149,130,193,76,12,206,180,63,111,145,252,80,127,81,172,191,74,220,3,92,128,165,189,63,82,152,249,198,41,163,169,63,13,4,48,192,113,239,170,191,83,78,165,205,119,26,181,63,207,85,121,42,206,181,170,63,32,80,42,119,119,186,184,63,253,106,123,81,64,23,170,191,76,214,73,125,126,155,163,63,179,199,230,64,22,212,187,63,238,115,74,42,112,192,164,191,239,54,44,192,1,191,179,191,78,186,170,69,220,172,175,191,231,239,164,8,51,123,181,63,233,183,31,89,201,249,185,63,69,139,194,139,27,130,186,191,90,26,217,122,66,161,182,63,199,110,198,181,151,41,193,191,110,209,187,49,199,137,169,191,92,126,77,209,64,88,180,63,186,49,20,250,125,2,175,63,32,84,8,64,99,32,179,191,145,54,91,64,73,131,182,191,112,43,82,57,122,112,183,63,44,18,117,154,226,41,170,63,57,83,126,215,143,139,163,63,247,153,116,148,17,159,173,63,74,243,123,121,50,136,177,191,70,44,29,127,109,8,172,191,146,75,160,69,31,71,168,191,54,73,31,99,228,53,173,63,88,39,114,101,49,43,173,63,21,186,104,176,135,75,173,191,235,85,243,128,213,19,177,63,163,22,225,68,188,203,169,63,25,195,21,139,8,240,173,191,74,225,211,196,64,142,170,191,217,92,14,234,210,162,175,191,235,212,82,110,62,150,165,191,238,179,109,92,155,177,164,63,180,112,19,70,234,188,163,191,153,135,232,87,81,113,177,191,150,200,55,10,136,107,183,191,96,29,23,92,132,140,178,63,102,108,233,86,182,147,185,63,229,125,68,41,218,113,194,191,103,9,216,184,23,205,189,191,25,118,2,203,149,179,203,63,103,240,41,210,23,78,198,63,119,41,195,225,188,135,192,191,12,45,201,101,105,28,187,63,241,197,253,29,195,175,194,63,53,248,210,154,4,141,170,191,146,158,105,231,49,230,189,191,15,81,93,0,207,82,166,63,64,53,18,200,209,73,185,191,15,147,18,136,103,192,211,63,218,211,109,103,110,204,197,63,23,134,193,59,169,159,185,191,200,28,158,179,35,113,190,63,232,5,237,80,129,221,188,191,253,25,70,176,194,138,187,63,6,225,94,214,54,131,173,191,95,240,223,41,222,40,189,63,252,64,198,218,128,236,194,63,215,229,132,176,54,41,164,63,130,203,102,208,148,44,172,191,143,205,120,114,114,141,180,63,255,14,248,140,227,25,173,63,113,172,142,56,35,174,174,191,60,34,186,215,156,156,185,63,51,69,162,51,35,80,176,191,237,151,37,233,69,100,186,191,154,176,228,22,227,197,171,63,231,12,23,87,75,119,178,191,133,142,143,57,115,40,176,63,7,42,239,87,57,226,182,63,98,187,220,40,239,13,174,63,102,168,48,9,18,152,166,63,182,135,128,83,138,207,175,191,107,116,169,110,5,138,184,63,40,73,173,208,43,150,170,63,220,58,19,244,106,254,170,191,25,12,136,185,133,234,178,63,93,149,132,133,200,226,169,63,98,74,192,123,79,149,178,63,148,139,86,200,171,35,168,191,136,178,64,232,94,248,160,63,103,77,182,75,210,243,182,63,92,148,219,226,161,48,161,191,98,38,9,57,202,43,177,191,28,252,50,14,86,182,178,191,92,211,150,53,226,113,180,191,115,23,220,50,142,91,183,63,133,117,93,103,42,12,186,191,179,8,75,210,254,84,181,63,151,242,200,226,49,202,189,191,124,84,38,193,179,34,179,191,30,36,128,144,97,131,176,191,228,126,68,211,81,20,174,63,225,109,252,119,43,149,179,191,228,243,119,243,60,146,179,191,186,58,73,165,185,7,180,63,178,32,255,154,244,61,168,191,127,189,52,184,227,122,167,191,22,64,196,95,161,243,163,63,177,194,66,68,90,137,171,63,56,30,239,140,194,168,171,191,110,173,156,219,35,49,171,191,150,118,177,99,157,83,166,191,232,168,122,25,89,187,169,191,20,5,196,181,198,34,160,63,108,139,78,178,75,98,156,63,24,27,12,193,254,220,168,63,254,232,166,127,166,69,171,63,248,195,129,172,184,225,174,63,249,251,72,101,211,137,171,63,221,218,188,171,183,135,174,191,38,80,82,73,126,179,167,63,153,234,50,112,232,159,165,63,182,66,131,251,109,213,172,191,50,232,32,146,233,17,166,63,85,84,121,215,93,146,196,191,81,226,167,187,124,37,197,191,95,196,96,162,88,133,190,191,54,223,90,87,121,120,192,191,122,197,133,3,118,171,169,191,31,131,221,94,213,211,181,63,110,214,192,244,126,209,167,63,62,238,22,74,91,233,175,63,126,150,203,165,233,24,183,191,165,181,241,169,207,24,180,191,204,224,132,163,198,114,169,191,118,233,18,92,71,38,201,191,126,236,207,90,143,204,186,63,57,206,79,50,9,54,204,191,1,227,207,88,146,15,185,63,191,49,159,22,142,191,180,191,254,40,34,215,85,166,182,63,35,65,201,197,221,42,184,191,201,9,60,11,37,127,181,63,184,64,34,34,122,72,169,191,112,186,198,191,26,37,175,63,25,124,180,136,190,121,176,63,234,54,13,75,81,97,175,191,187,160,65,189,101,104,178,63,42,164,87,67,232,55,171,63,12,148,237,104,198,24,160,191,157,47,114,211,52,97,183,191,116,84,83,68,110,143,173,63,118,47,178,159,82,148,184,191,35,51,152,11,126,72,181,63,164,243,218,216,57,35,181,63,183,136,248,225,219,15,181,63,118,86,167,158,127,44,160,191,233,157,101,203,11,100,157,63,175,141,131,95,184,250,159,191,128,165,13,119,25,178,171,63,174,37,52,101,1,7,164,191,225,198,19,230,175,240,173,191,77,76,84,87,51,194,162,63,185,27,48,19,164,221,179,191,42,219,141,13,120,211,165,191,37,99,135,30,73,219,161,63,230,163,93,164,112,13,171,63,55,238,199,234,174,70,167,63,52,35,255,62,206,60,169,63,131,79,232,39,10,69,166,63,90,218,235,205,170,171,175,63,113,197,252,64,242,123,159,63,37,54,59,77,13,61,160,191,184,92,201,51,91,211,166,63,14,2,254,138,113,220,157,63,120,209,78,49,230,233,156,191,179,119,55,11,172,67,175,63,155,228,51,27,57,244,168,63,41,170,63,116,59,89,179,191,185,207,231,111,119,196,174,63,142,199,17,138,139,165,174,191,252,224,32,46,40,241,174,63,42,120,250,177,230,179,173,63,14,182,193,198,127,46,177,191,87,102,97,7,33,104,175,63,166,83,233,170,125,16,169,191,29,78,133,150,4,239,165,191,78,175,18,235,175,44,176,191,180,197,168,216,96,44,163,63,2,205,125,107,32,218,169,191,245,229,160,43,236,144,170,191,173,118,16,134,186,191,168,63,28,4,16,143,162,32,170,63,37,31,92,45,169,131,162,191,200,74,35,109,45,45,181,63,43,11,149,230,115,223,177,63,10,214,61,156,120,229,182,63,134,228,204,15,225,85,178,191,82,2,75,208,38,184,178,191,88,75,213,174,91,63,184,191,115,253,253,178,39,226,187,191,110,104,93,117,51,233,195,191,148,13,80,164,170,99,197,191,118,140,236,133,130,212,196,63,246,37,17,83,136,48,177,63,102,213,208,138,180,102,192,191,225,72,212,17,120,164,194,191,72,241,46,135,160,222,177,63,25,239,112,16,177,150,190,63,193,84,135,113,240,235,170,191,25,132,200,154,152,207,172,191,53,209,245,26,242,149,182,191,154,6,29,175,14,54,174,191,204,167,35,240,232,202,206,191,108,194,162,207,46,157,171,191,253,15,105,69,64,61,207,191,62,30,43,243,177,184,183,63,18,196,118,231,115,116,155,63,41,39,88,58,15,182,189,191,81,21,171,202,66,39,189,63,81,196,42,124,176,12,186,191,191,79,71,201,172,169,176,63,192,143,220,222,115,138,171,191,247,116,162,91,132,124,174,191,65,7,9,32,223,131,175,191,168,162,249,89,82,72,184,191,88,209,195,120,42,102,171,191,178,116,102,129,4,158,189,191,12,20,0,13,71,128,177,63,239,157,83,130,156,65,168,63,99,94,96,149,158,178,184,191,109,153,2,57,91,115,169,63,196,132,176,187,127,202,182,63,88,140,64,244,183,103,172,191,127,100,190,130,204,178,178,63,35,231,108,22,220,94,175,191,167,207,237,164,26,242,179,191,2,126,10,215,110,123,155,191,102,74,199,57,204,205,175,63,189,88,197,218,97,211,158,191,43,163,93,171,13,193,161,191,120,83,117,120,206,224,159,191,21,68,26,142,115,101,179,63,200,137,103,65,108,184,182,191,205,99,248,244,119,7,163,191,191,45,140,222,18,188,166,63,180,147,50,107,67,49,183,191,169,199,211,16,8,204,165,191,181,247,186,254,254,149,177,191,233,77,110,247,246,189,162,63,108,21,181,139,248,7,185,191,44,202,215,52,5,136,179,63,94,87,122,98,190,105,184,191,17,227,195,96,116,204,177,63,47,148,165,163,176,9,182,191,17,252,85,116,244,229,185,63,242,101,240,27,191,3,177,191,154,120,83,82,170,175,173,63,54,176,62,222,77,70,177,191,10,224,221,150,70,55,178,63,72,183,245,221,200,231,177,63,113,78,160,88,130,165,178,191,251,65,79,53,20,214,168,63,172,245,32,191,143,50,166,63,109,9,147,120,176,66,173,191,77,187,248,249,36,14,170,191,33,213,219,30,97,20,171,63,145,235,107,50,110,7,170,191,106,172,23,3,87,25,170,63,237,83,15,138,14,222,171,63,155,141,37,161,156,62,186,63,19,208,225,207,202,221,171,191,203,143,141,69,35,4,192,191,65,161,201,100,200,149,195,191,67,100,230,5,180,208,184,63,18,14,156,161,124,165,192,63,247,132,52,225,105,50,194,63,210,67,94,210,188,252,182,191,139,100,209,117,220,223,194,191,73,49,13,85,39,211,178,63,212,159,128,168,159,196,190,63,80,77,254,69,105,201,169,191,165,191,142,168,11,73,189,191,54,190,217,195,78,126,211,191,49,53,247,180,174,168,199,63,204,117,118,131,136,72,190,63,98,217,135,1,142,240,167,63,8,144,243,87,117,198,193,191,241,121,22,166,69,237,189,63,125,202,93,92,185,240,189,191,208,101,3,101,101,235,177,63,175,151,76,142,60,2,201,191,211,229,189,181,62,252,187,191,178,130,121,68,197,7,173,63,96,2,210,35,103,135,181,63,251,247,141,48,18,187,176,191,184,13,7,180,8,253,165,63,21,133,116,67,176,86,184,191,120,95,165,240,171,115,179,63,185,71,189,51,164,83,182,63,136,229,113,216,163,112,179,191,181,93,211,47,11,39,180,63,187,118,227,191,127,154,176,191,185,56,21,184,66,61,178,191,196,68,252,138,2,127,177,191,185,55,255,33,207,127,184,63,229,247,139,86,223,64,181,191,13,38,189,62,54,128,186,191,73,2,194,65,37,194,165,191,239,1,149,37,18,178,167,63,238,214,225,130,90,79,182,191,39,3,107,110,63,125,166,191,226,138,90,175,69,236,175,191,68,151,18,57,87,112,162,63,160,78,12,88,86,153,160,191,36,222,208,137,207,244,181,191,213,195,251,90,236,95,161,63,128,243,161,133,45,156,178,63,196,3,242,245,13,242,188,63,44,15,136,114,128,117,160,191,90,69,123,245,14,246,184,63,102,139,58,200,65,9,188,191,217,200,78,97,64,175,178,63,56,162,25,96,144,204,186,191,64,147,1,63,19,222,189,63,252,255,54,237,244,198,184,63,202,200,72,54,144,88,185,63,162,105,150,55,164,12,180,191,43,169,83,109,232,217,182,63,68,84,13,149,132,180,179,63,244,87,173,150,73,200,182,191,225,94,87,155,71,252,173,63,159,252,2,202,45,148,178,63,11,164,53,222,150,220,163,191,121,239,159,135,88,179,164,63,143,149,255,254,53,82,176,63,135,90,248,96,149,49,172,63,145,246,176,210,108,201,166,63,147,62,251,160,23,234,163,63,193,228,237,90,255,43,173,63,224,149,186,214,2,70,174,191,249,27,60,72,147,9,172,191,83,5,255,114,80,249,169,63,28,179,238,183,17,127,176,191,109,151,228,217,177,195,179,191,148,95,24,85,90,161,176,63,30,37,233,71,129,189,175,191,233,235,204,48,250,1,176,191,56,100,2,92,131,64,175,63,113,230,217,37,7,47,167,191,86,22,198,255,172,183,167,191,172,156,52,43,112,3,168,63,210,89,1,23,69,25,178,63,222,48,127,210,221,222,170,191,120,65,226,126,89,20,189,191,138,123,133,108,131,212,180,63,220,173,215,20,60,7,196,63,13,141,59,120,245,106,192,191,8,146,189,198,198,46,187,63,16,241,191,209,173,91,167,63,32,219,197,255,69,65,176,191,16,219,36,184,247,30,191,191,8,155,62,155,156,60,184,63,23,178,245,101,98,113,172,191,68,196,188,173,17,70,194,191,69,139,255,67,189,10,167,63,0,50,177,4,60,126,211,63,206,56,148,178,31,76,199,191,146,45,116,137,55,1,182,63,2,160,184,138,59,211,186,191,115,183,202,141,218,9,183,63,63,35,47,224,156,243,184,191,83,93,209,0,98,12,168,63,129,69,73,181,96,90,192,191,33,255,228,66,39,208,200,63,18,107,16,245,192,136,173,191,237,71,221,195,153,30,172,63,251,239,158,162,200,7,178,191,49,73,172,114,14,78,173,63,5,200,174,111,59,216,176,63,29,68,110,160,63,62,172,191,99,132,7,110,81,204,173,63,233,17,115,194,148,128,169,191,33,113,80,25,141,154,180,191,49,144,175,80,28,66,173,63,59,131,254,207,88,14,179,63,52,39,126,125,205,240,179,191,48,225,133,140,66,15,179,191,91,193,190,250,29,237,160,191,132,179,38,126,240,142,162,63,134,201,145,10,53,81,176,191,46,73,146,250,10,215,162,191,22,110,226,185,56,14,162,63,20,246,177,194,42,68,179,191,73,206,173,79,185,244,158,191,162,78,205,158,236,153,185,63,227,20,70,196,169,17,187,191,193,135,242,175,114,80,183,191,187,255,180,182,12,8,175,63,103,252,154,41,247,242,180,191,205,86,52,7,235,75,181,63,225,137,171,111,41,159,186,63,230,209,148,44,32,58,185,191,164,130,8,206,166,157,176,191,174,222,102,64,226,10,179,63,247,117,247,255,237,167,176,63,240,187,224,158,108,107,177,191,14,159,56,71,249,85,178,63,59,119,23,28,230,244,177,191,186,76,177,42,253,31,161,191,107,108,150,244,205,247,162,63,203,131,162,210,16,103,167,63,74,154,34,39,61,163,165,63,252,8,160,197,162,132,161,63,4,165,20,203,196,137,161,191,175,220,11,150,91,194,170,191,36,195,72,155,194,38,166,63,153,39,239,158,32,155,168,191,43,98,239,65,35,100,175,191,221,61,231,237,71,118,169,63,216,12,135,198,115,135,171,191,109,7,182,159,4,1,171,191,192,167,78,181,177,21,170,63,208,213,174,77,82,104,190,191,81,121,145,134,118,129,188,63,218,106,201,206,26,144,183,191,61,230,234,145,61,97,181,63,72,11,102,214,202,18,166,63,121,137,30,21,74,119,178,191,27,176,219,70,96,46,166,63,72,62,103,52,128,235,203,191,100,220,236,132,48,122,182,63,29,209,179,194,46,141,203,63,132,150,5,192,119,188,186,191,218,221,251,58,243,174,184,63,175,59,237,214,204,68,178,191,7,172,189,25,249,209,170,63,24,253,197,150,98,99,171,191,78,98,45,195,254,115,165,191,89,166,234,51,183,34,194,191,130,56,66,113,114,33,185,63,20,195,194,4,109,67,192,63,46,133,184,152,62,167,175,191,169,51,39,85,254,52,173,63,197,15,168,175,162,43,185,191,230,234,151,28,22,51,167,63,239,229,39,98,83,36,162,191,102,17,91,30,150,122,164,191,106,189,119,251,148,86,177,63,73,216,17,141,194,160,159,63,235,210,45,19,206,159,167,63,205,179,147,170,110,111,168,191,113,210,123,173,141,186,174,191,116,221,75,42,162,94,176,63,141,147,29,186,13,2,180,191,14,201,77,141,234,201,172,191,163,170,110,200,255,220,181,63,252,200,57,156,176,94,170,191,133,96,48,172,8,117,169,191,119,217,240,140,213,49,167,63,29,72,174,115,227,3,175,63,119,59,168,95,100,219,179,191,137,49,236,56,188,244,166,191,251,186,205,227,228,172,167,191,186,91,170,192,160,150,167,63,110,65,193,19,123,8,178,63,123,24,235,21,98,65,165,191,68,56,67,244,0,233,163,63,231,0,8,207,155,199,162,191,63,85,35,115,55,28,171,191,205,222,124,38,92,168,162,191,33,25,1,109,17,49,168,63,216,133,60,102,254,153,168,63,118,233,132,224,182,229,180,191,123,106,184,187,122,78,179,63,40,75,114,81,51,114,186,191,165,244,159,114,229,66,192,63,198,16,72,20,15,172,170,63,103,186,139,139,165,136,164,191,116,73,10,246,210,65,184,191,189,79,247,251,157,174,187,63,238,62,222,96,132,155,198,191,53,149,236,176,13,242,162,63,108,8,104,135,137,11,200,63,132,235,10,34,69,184,167,191,203,61,75,70,44,35,160,191,99,25,181,177,254,166,177,63,146,226,98,245,20,248,179,191,194,156,139,4,209,166,173,63,243,61,28,13,248,215,172,191,144,54,145,80,103,221,192,191,57,51,61,185,15,53,177,63,137,196,18,198,94,133,193,63,187,177,209,142,200,1,167,191,63,30,2,39,141,168,171,63,4,209,37,226,20,204,161,63,177,137,101,75,4,129,161,191,230,83,184,211,86,184,162,63,27,30,209,133,79,226,167,63,202,232,236,94,45,146,177,191,144,229,23,230,48,131,167,63,225,137,188,31,21,166,174,191,48,211,45,45,72,164,172,63,157,228,98,171,165,194,180,191,1,225,32,79,15,68,170,191,225,197,82,197,139,223,173,63,18,251,72,75,78,51,176,191,171,150,101,132,25,25,169,191,74,170,182,223,31,138,165,63,66,112,164,178,121,178,170,191,224,208,98,109,250,57,176,191,73,153,145,74,240,109,169,191,30,176,197,55,158,5,181,191,20,166,210,246,36,250,190,63,103,219,220,38,70,71,178,63,192,179,238,205,240,176,185,191,93,202,194,156,111,42,171,63,172,86,179,126,165,127,193,191,202,231,52,238,140,50,201,63,36,75,170,40,66,89,181,63,234,95,189,112,58,134,192,191,138,78,140,135,99,168,173,63,57,157,196,182,62,11,179,191,187,66,51,158,200,28,200,63,115,168,61,1,158,216,173,191,27,43,43,27,140,246,181,63,189,215,134,89,105,238,178,191,117,248,50,57,248,23,178,191,255,109,186,123,208,91,185,191,140,10,180,42,246,11,167,191,117,230,181,80,16,106,186,63,204,188,167,178,220,225,170,63,42,200,161,46,22,110,183,191,1,125,215,233,9,8,186,63,22,221,74,225,152,249,164,191,107,240,225,97,180,224,175,191,25,117,58,79,82,186,178,63,212,68,200,230,3,181,162,63,181,138,138,161,102,138,168,191,51,45,73,195,180,137,181,191,227,218,255,120,52,244,175,191,72,121,212,7,122,227,183,63,95,244,59,255,81,17,182,63,82,163,253,137,95,254,193,191,239,175,64,100,255,139,182,191,199,245,3,225,37,25,197,63,217,54,125,250,101,36,192,63,213,159,95,88,191,45,183,191,110,64,64,61,120,157,194,63,119,98,241,41,221,161,171,63,152,168,77,65,17,252,168,63,194,255,202,172,130,95,170,63,12,71,213,108,180,212,174,191,119,42,99,146,153,142,182,191,195,39,117,179,216,4,180,191,71,120,251,174,198,250,177,191,239,4,235,145,86,38,174,191,66,241,135,244,143,189,167,191,229,129,35,208,221,181,183,191,236,22,16,160,15,75,183,191,32,87,203,155,151,45,180,191,219,216,86,194,226,213,177,191,41,243,45,61,135,153,194,191,184,105,151,192,255,60,193,191,214,196,187,158,8,181,190,191,85,48,130,223,133,58,187,191,55,107,118,170,62,166,190,191,179,255,91,239,24,173,186,191,91,82,211,22,171,31,176,191,213,119,161,186,99,251,164,191,177,8,9,36,90,134,169,63,42,195,135,237,234,218,242,63,5,219,249,26,171,204,210,63,93,174,244,241,167,164,217,63,194,220,216,132,33,86,227,191,33,38,142,188,232,125,209,191,24,174,197,143,171,30,197,191,204,157,119,182,116,0,228,63,115,120,188,176,235,127,225,63,115,145,237,114,57,46,234,63,44,92,78,123,10,46,205,63,98,57,157,70,185,125,233,191,29,94,188,151,60,1,225,191,75,184,144,65,251,145,225,191,189,110,161,95,21,249,228,63,69,172,145,249,218,229,200,63,88,6,110,93,221,210,192,191,135,209,149,141,203,76,197,63,33,128,185,190,26,167,220,63,84,108,182,112,107,126,229,191,29,59,119,159,167,144,209,63,27,168,23,247,36,175,219,63,201,129,3,60,249,10,209,63,145,54,118,173,134,54,227,191,199,92,177,1,53,204,2,192,66,246,155,90,204,84,208,63,254,212,121,68,88,243,219,63,135,194,37,169,188,109,206,63,185,163,0,158,182,40,229,63,25,79,37,136,24,50,226,63,243,65,88,117,74,67,232,191,183,196,36,70,202,35,236,63,33,41,103,4,140,139,229,63,64,131,252,65,208,104,234,191,123,144,65,179,230,64,203,63,131,175,143,40,186,65,207,191,243,23,67,36,98,188,225,191,187,141,32,241,34,199,200,63,212,237,112,170,239,195,204,63,134,47,61,40,162,119,185,63,10,113,151,220,103,84,213,63,89,164,121,215,212,104,225,63,112,181,141,178,167,40,178,63,176,53,48,145,168,6,226,63,132,222,244,94,103,110,177,63,12,15,140,10,211,131,214,63,22,127,184,62,167,215,198,191,155,1,232,199,124,25,198,63,18,125,113,61,231,142,199,63,133,164,187,79,36,142,196,191,79,249,67,247,195,233,188,63,153,53,220,38,2,168,161,63,19,71,189,207,235,136,186,63,211,121,236,103,69,99,156,63,185,29,121,120,91,198,208,63,221,173,210,150,36,26,195,63,241,158,149,180,218,142,191,191,150,240,93,114,62,30,193,63,0,70,157,161,204,130,191,191,202,78,168,95,17,19,188,63,182,64,9,92,102,228,141,63,122,17,23,234,42,140,187,63,43,253,20,219,141,113,182,63,27,123,201,181,123,170,181,191,169,2,123,124,169,148,186,63,208,201,197,252,109,49,189,191,56,199,103,12,72,246,186,63,126,144,128,163,154,220,176,63,208,55,178,39,64,34,186,191,20,180,123,210,172,123,192,63,182,192,103,37,203,16,186,63,227,78,96,222,98,245,186,191,198,245,28,218,155,255,186,191,44,191,236,238,81,192,185,191,157,149,148,127,25,122,187,63,142,35,236,13,175,202,184,63,144,183,224,209,3,134,163,191,236,45,95,134,232,231,185,191,155,227,169,96,159,121,187,191,128,120,195,63,251,196,185,191,45,203,89,225,122,173,183,191,40,93,184,157,11,72,154,191,203,210,16,89,243,235,170,191,116,110,192,97,161,251,182,191,66,122,228,80,85,154,182,191,243,79,20,65,28,208,185,191,100,46,228,23,64,203,185,191,90,153,89,20,53,64,186,191,69,47,70,170,173,22,192,191,170,18,252,38,229,153,187,63,91,16,186,114,61,57,184,63,21,242,239,38,108,198,165,63,176,44,226,200,199,10,188,191,138,142,64,101,154,181,186,63,231,252,170,41,20,207,187,63,155,180,28,21,154,245,182,191,185,255,127,78,121,181,167,63,246,31,255,38,241,204,164,63,3,27,126,214,122,170,184,191,76,226,128,73,161,44,186,63,117,242,59,67,80,101,183,191,23,230,184,106,164,122,181,63,91,209,8,225,15,233,161,63,165,74,166,44,55,27,184,191,66,148,130,231,74,182,185,63,194,55,18,165,7,209,184,191,139,103,121,231,195,69,183,63,107,7,139,14,241,76,156,63,234,210,6,80,118,167,185,191,153,60,31,220,16,74,187,63,208,165,116,105,207,93,184,63,157,166,24,176,76,43,183,191,21,129,2,2,245,98,189,191,36,81,91,243,230,253,188,191,49,107,2,148,255,23,188,63,136,208,136,110,157,175,183,63,9,71,156,132,130,186,186,191,8,128,237,192,128,109,189,191,149,64,157,83,166,113,188,191,239,104,211,79,208,12,184,191,204,217,75,127,254,150,207,63,209,8,100,38,219,235,179,63,137,83,202,235,190,113,215,63,144,166,116,47,0,103,220,63,12,224,71,175,56,48,216,63,245,203,102,35,53,131,227,63,44,124,143,86,162,23,227,63,85,225,92,108,54,166,216,191,252,23,212,20,209,125,187,63,191,238,47,70,249,90,188,63,51,23,6,189,243,93,179,63,117,51,196,142,40,233,198,63,85,224,115,58,177,205,202,63,133,106,105,62,47,27,190,191,246,106,202,30,210,214,228,191,171,109,157,166,195,215,205,63,134,27,149,91,57,138,207,63,238,236,49,227,192,116,209,191,136,85,29,63,161,43,203,63,184,187,242,100,229,144,213,63,23,58,24,233,23,70,214,63,49,130,91,231,157,252,187,63,15,237,6,148,62,212,195,191,143,222,21,37,151,187,210,191,74,236,75,7,201,242,196,191,199,242,186,33,156,197,192,63,121,143,215,236,225,33,192,63,114,252,132,232,233,24,202,191,247,186,71,100,155,3,171,63,181,223,84,57,68,167,175,191,208,112,79,106,123,56,192,63,213,44,30,225,198,77,197,63,56,136,92,152,127,252,208,191,8,170,144,14,220,178,195,63,97,17,129,185,186,137,193,191,222,248,18,17,144,214,206,191,166,193,204,138,62,144,168,63,156,151,133,169,190,113,198,191,46,237,190,201,204,217,176,63,101,157,96,203,207,119,195,191,195,66,209,108,160,25,208,63,150,248,67,170,12,174,193,191,137,63,124,175,7,160,147,191,28,64,46,72,221,250,178,63,189,20,246,45,203,129,200,63,197,210,200,13,96,94,182,191,201,201,153,46,186,52,187,191,250,53,243,43,159,75,192,191,232,171,179,52,166,255,195,191,154,236,151,187,85,66,198,63,90,32,155,4,98,115,184,191,87,203,240,216,134,84,183,191,215,129,12,36,168,70,181,63,130,140,10,252,119,28,153,63,172,236,92,234,88,167,152,191,49,96,29,51,136,16,149,63,197,110,9,244,94,202,186,63,1,85,179,187,202,45,159,191,175,182,230,80,106,209,182,191,17,96,110,39,103,108,173,191,50,55,230,110,196,108,183,191,43,75,89,13,254,115,186,63,217,46,238,65,15,179,190,191,95,116,255,166,54,230,191,63,35,33,40,4,114,185,161,191,199,96,122,85,133,34,188,191,126,33,176,36,41,160,192,63,101,136,98,74,82,30,184,63,93,124,183,28,90,39,187,191,239,139,102,81,138,117,167,63,126,100,119,87,57,249,187,191,94,230,179,111,88,176,183,191,123,29,177,85,124,155,190,63,46,189,129,177,142,208,185,63,63,131,165,147,157,12,168,63,170,98,191,167,87,82,188,191,193,160,115,131,27,148,187,191,80,125,150,148,78,176,184,191,188,202,220,249,54,215,184,191,145,254,3,162,218,251,158,63,53,27,168,116,76,164,185,191,161,3,231,125,13,7,188,191,35,52,123,59,69,111,190,191,213,38,220,211,29,226,187,191,213,123,80,154,155,174,186,191,173,80,234,237,69,118,191,191,90,108,197,181,172,209,187,63,0,72,175,79,30,36,184,63,127,75,103,246,167,89,165,191,33,97,155,100,166,5,187,191,114,248,243,74,108,138,185,63,184,232,141,158,191,89,192,63,196,84,247,61,184,255,186,191,58,138,95,44,66,55,165,191,99,123,22,216,72,249,188,191,74,200,35,203,99,87,188,63,226,199,170,72,45,248,184,191,138,30,146,241,248,64,186,63,117,239,214,116,211,176,162,191,65,122,137,75,58,134,185,191,199,206,114,54,210,247,188,63,139,90,214,194,254,85,188,191,69,30,234,4,125,196,188,63,108,195,33,99,42,66,189,191,26,193,81,148,236,176,192,63,131,218,172,39,168,142,187,63,226,241,224,7,109,239,186,191,229,69,51,60,14,55,189,191,164,152,38,222,110,112,187,191,235,223,27,140,56,72,188,63,221,103,39,227,103,54,188,63,81,237,63,18,106,93,189,191,44,192,220,167,45,150,190,191,204,221,126,235,136,110,190,191,148,77,141,210,245,30,187,191,71,21,214,21,251,145,162,63,145,121,156,26,38,201,164,63,166,33,121,84,65,42,191,63,83,243,29,32,62,210,188,63,135,180,196,88,18,153,200,63,216,230,216,49,12,235,205,63,197,232,155,56,192,155,171,191,219,204,153,43,213,144,195,191,215,201,220,58,68,181,197,63,195,77,152,129,219,85,198,63,228,168,78,233,189,251,197,191,168,92,72,111,10,68,202,191,18,150,117,8,175,84,178,63,38,173,73,138,49,60,179,63,51,109,162,44,192,161,185,191,188,120,123,188,96,178,184,63,168,94,178,158,69,56,198,63,212,24,205,65,243,77,186,191,166,131,129,24,60,113,197,191,130,95,187,134,104,136,194,191,126,255,44,169,77,4,181,191,203,221,152,228,145,202,201,63,32,245,6,146,201,207,195,63,65,202,199,44,241,106,193,191,33,78,204,45,74,221,180,191,47,239,168,169,171,191,179,63,250,243,13,2,189,160,159,63,162,142,63,44,254,103,188,191,119,32,155,248,4,41,178,63,255,178,66,211,33,109,154,191,129,144,46,215,7,44,191,191,150,93,95,112,77,104,182,63,123,185,246,246,33,9,162,191,150,81,3,188,165,52,155,63,73,130,196,204,221,16,160,63,160,104,145,225,86,166,183,63,182,122,46,138,187,135,187,191,13,88,229,94,242,84,178,191,74,24,227,128,130,228,163,63,156,171,76,143,5,115,195,191,176,1,146,52,156,71,186,63,234,130,70,38,7,48,144,63,147,47,102,238,172,104,169,191,198,167,240,203,239,143,181,191,253,52,192,114,126,220,176,63,177,143,179,2,101,41,180,191,108,4,240,14,83,183,144,63,216,164,223,242,179,94,180,63,84,162,54,158,84,32,150,63,91,186,220,240,41,214,153,191,72,127,71,75,233,118,164,63,144,196,173,90,174,209,167,191,123,192,248,194,210,141,188,191,131,45,97,226,154,217,180,63,242,35,163,169,252,189,168,191,239,32,29,72,210,183,158,191,124,138,187,150,132,86,161,63,33,17,243,114,191,75,160,191,198,180,200,8,44,124,180,191,138,81,213,106,160,195,155,63,8,182,83,174,204,8,174,63,247,66,173,27,207,104,165,191,56,168,68,46,163,149,135,63,101,166,7,194,178,22,138,191,215,15,233,125,72,210,162,63,29,176,139,149,15,226,177,191,108,219,251,35,43,234,163,63,179,64,191,246,191,139,167,191,49,54,28,23,206,95,162,191,212,121,111,192,207,161,181,63,49,182,158,114,131,145,164,191,207,166,97,230,68,120,162,63,2,132,167,87,130,54,159,191,157,132,232,25,206,5,175,63,92,129,65,70,181,15,156,191,182,222,98,6,41,207,153,191,109,172,11,117,104,23,157,191,48,73,167,231,209,18,178,63,53,96,14,199,113,156,164,63,180,236,244,202,79,128,157,191,179,111,22,252,88,199,168,63,54,229,106,123,71,241,167,191,122,166,136,76,240,158,170,191,253,97,132,117,109,221,155,191,156,99,190,182,254,34,160,191,20,15,217,178,135,63,153,63,145,77,84,77,102,249,165,191,177,50,115,113,19,45,167,191,196,255,45,58,127,250,170,191,104,230,111,173,57,228,163,191,31,202,49,238,28,176,170,191,165,49,52,233,230,255,166,63,234,12,137,123,222,0,159,63,179,63,181,251,68,16,166,191,81,187,172,42,243,160,160,191,142,81,204,191,190,44,174,63,71,239,215,124,198,116,167,191,156,209,204,156,159,165,157,63,207,67,86,109,113,164,161,191,159,132,69,211,120,91,169,191,50,170,23,24,120,52,169,63,18,33,60,158,243,244,162,191,97,30,238,191,114,202,160,63,49,20,243,36,128,27,150,191,244,81,70,177,254,30,163,191,162,120,26,219,25,215,162,63,251,168,156,173,86,11,167,191,184,107,180,158,66,166,168,63,109,80,237,89,99,163,166,191,149,47,171,61,216,44,171,63,160,136,183,239,227,226,159,63,233,33,92,109,120,136,165,191,251,2,92,19,26,15,169,191,160,177,73,19,194,192,163,191,174,45,35,176,231,156,170,63,62,244,95,122,49,27,168,63,205,170,155,155,191,245,163,191,101,126,101,4,231,66,170,191,219,51,191,146,75,32,167,191,195,33,245,99,29,128,166,191,99,187,200,37,116,244,148,63,253,34,70,65,236,198,181,63,147,221,31,223,237,241,189,63,209,199,209,10,70,22,191,63,101,58,90,108,14,74,144,191,213,2,145,57,203,228,188,191,168,75,41,78,112,192,190,63,233,218,0,51,46,78,177,191,211,105,242,159,74,177,186,191,213,11,18,124,152,156,184,63,183,26,55,83,77,112,155,63,131,157,130,204,19,248,165,191,173,171,139,102,67,65,192,63,255,212,169,210,76,207,192,191,6,208,63,140,79,127,144,63,141,160,191,181,209,170,195,191,181,148,224,7,1,13,196,63,16,24,186,84,6,150,182,191,88,28,118,168,144,43,185,191,68,196,181,46,133,8,188,63,176,243,24,218,151,50,146,63,171,58,11,165,84,4,167,63,63,24,181,142,146,64,176,191,218,84,196,74,45,242,144,63,189,175,214,154,96,122,192,191,224,106,70,206,69,232,188,63,134,161,145,108,255,67,167,63,164,24,1,172,251,26,177,191,21,116,57,87,137,34,176,63,195,142,95,215,32,58,166,63,55,131,80,253,68,90,177,191,245,49,179,159,231,59,182,191,83,3,248,102,225,16,165,63,34,190,253,246,231,37,177,63,19,106,16,104,56,70,170,63,14,192,79,203,8,242,149,191,227,247,68,168,124,26,172,191,215,171,187,171,225,30,146,63,179,235,226,65,6,71,137,191,79,203,103,18,154,246,164,191,121,86,115,221,60,184,167,63,34,47,33,52,10,83,172,63,41,105,35,186,84,173,164,191,95,73,53,242,99,78,182,63,54,130,190,185,81,139,180,191,126,17,79,109,233,210,180,63,16,53,160,88,233,124,143,191,127,245,151,135,246,225,182,191,83,255,163,100,156,231,186,63,218,234,120,221,113,19,167,63,226,116,88,184,153,37,172,63,241,210,64,230,122,189,162,191,172,232,56,225,194,31,169,191,117,250,185,38,75,253,178,63,78,30,35,24,148,162,158,191,153,66,27,247,248,212,158,63,41,228,89,221,59,101,170,191,38,98,3,160,54,127,147,191,123,197,5,235,102,32,146,63,212,94,113,123,9,18,186,63,254,220,181,85,129,96,178,191,48,131,98,99,97,119,160,191,215,190,126,232,43,75,169,63,159,10,247,110,217,247,173,191,17,228,192,40,104,182,185,63,106,62,227,241,9,194,139,63,24,231,56,219,79,237,172,191,208,160,143,141,208,187,136,191,106,168,197,157,51,64,165,191,228,145,102,176,29,149,158,63,234,7,20,141,9,132,172,191,191,162,197,128,155,110,183,191,253,193,196,9,36,144,178,63,56,130,23,176,104,62,163,191,235,47,209,190,6,150,175,191,53,81,148,205,174,146,162,63,199,81,35,151,139,250,161,63,8,251,47,159,118,210,156,63,171,3,238,54,30,60,176,191,156,110,2,187,159,56,163,191,124,230,126,129,124,65,166,63,46,39,54,184,207,102,163,191,112,13,12,161,87,239,163,191,162,110,16,247,241,110,160,63,125,158,182,90,233,129,150,191,153,58,196,5,252,213,148,63,32,75,219,238,147,150,163,63,221,78,116,142,181,76,160,191,69,231,27,65,189,74,160,63,116,144,226,91,33,116,159,191,194,161,243,59,121,67,178,63,225,244,17,199,57,159,184,191,179,228,69,61,139,54,182,63,250,132,195,54,6,75,193,191,149,168,178,122,199,34,174,63,203,192,209,15,154,19,175,63,6,197,199,54,255,90,169,191,6,40,243,26,140,253,186,191,110,196,232,117,33,80,186,63,16,221,130,190,40,119,197,191,110,166,110,135,159,210,181,63,18,161,129,132,53,192,177,191,169,104,146,1,30,64,144,63,50,170,36,201,126,150,146,191,235,253,49,225,33,179,163,63,128,252,134,122,24,238,183,191,0,139,193,119,112,52,172,63,92,247,241,108,26,14,160,191,245,107,74,115,72,248,163,63,165,108,237,177,61,198,155,191,179,10,133,216,247,27,183,191,196,161,245,69,185,86,180,63,129,114,65,226,39,211,147,63,171,78,149,74,45,225,170,191,179,85,166,4,44,58,181,63,209,100,112,124,208,19,146,63,129,1,250,33,68,215,145,191,244,162,138,223,96,6,172,63,202,193,22,198,62,110,173,191,128,165,212,200,115,69,176,191,68,132,191,11,51,34,182,63,76,25,212,57,26,10,181,191,7,107,59,105,201,239,162,191,104,196,219,204,140,81,160,63,228,121,46,147,154,251,158,191,146,25,228,207,111,13,160,63,16,8,255,202,95,39,172,191,77,177,205,24,99,40,144,191,135,167,23,175,69,62,192,63,112,22,183,10,22,2,141,63,96,59,1,18,157,68,188,63,239,25,155,30,181,208,164,191,190,93,184,226,92,130,164,63,134,84,60,59,81,50,166,191,70,217,169,113,165,156,163,63,73,45,200,166,70,8,184,63,119,224,30,165,19,82,160,191,91,192,246,191,159,125,173,191,233,1,40,80,11,74,169,63,236,198,36,189,200,116,158,63,234,149,36,182,88,53,164,191,73,138,119,69,163,222,160,191,212,104,206,10,204,149,163,63,159,111,151,117,25,141,184,63,170,43,206,177,67,149,161,191,99,247,217,15,59,15,186,63,132,97,17,54,202,237,163,191,184,20,124,65,81,9,191,191,129,24,19,157,93,172,163,63,66,91,8,149,168,17,173,191,121,76,128,215,19,50,160,63,121,144,166,209,174,143,165,191,103,205,98,164,60,135,162,191,185,168,43,57,170,162,174,63,97,7,175,4,190,81,156,63,72,108,22,77,222,36,174,63,234,148,168,39,151,190,153,191,178,184,188,235,214,0,177,63,6,61,96,190,253,43,155,63,159,140,212,83,245,33,162,191,26,96,163,47,219,137,186,191,66,174,36,30,53,116,164,191,178,224,67,82,185,235,163,63,63,235,12,189,44,141,162,191,104,68,227,186,171,129,172,63,239,115,234,41,94,39,157,63,225,6,134,6,218,127,148,63,124,211,155,40,146,17,168,63,127,88,216,168,232,116,176,63,160,115,226,104,158,103,175,191,145,221,38,132,248,255,161,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81920);
/* memory initializer */ allocate([129,12,21,156,50,51,176,63,99,114,246,195,144,162,172,63,249,25,14,120,163,212,178,63,244,37,30,154,96,131,168,191,105,70,38,53,114,252,148,191,31,136,128,200,250,128,174,191,5,26,86,40,234,37,162,63,213,55,12,111,179,49,167,191,125,10,17,212,69,112,163,63,29,247,87,14,176,178,161,191,93,32,124,251,142,219,168,63,120,121,53,74,65,130,165,191,59,10,9,104,195,140,164,191,203,71,145,189,220,49,161,63,22,51,194,60,189,139,159,63,148,146,108,160,234,47,181,191,73,20,201,55,118,82,190,63,229,15,102,83,133,175,185,63,86,186,164,41,87,173,179,191,5,234,212,230,134,224,161,191,217,117,104,84,234,71,163,63,71,181,182,136,236,232,181,191,48,208,226,106,1,99,192,63,160,70,107,194,167,42,188,63,176,246,139,248,194,95,184,191,47,132,55,163,43,239,165,191,157,73,95,61,239,192,164,191,175,127,6,21,164,172,175,63,240,47,77,55,167,240,162,191,165,53,127,192,112,108,158,191,3,50,208,95,178,249,178,63,57,96,84,248,142,254,169,63,38,66,198,236,203,21,168,191,65,33,67,247,192,101,175,63,36,197,94,44,38,68,182,63,4,31,89,237,145,65,162,191,212,111,238,147,120,220,175,191,240,108,247,81,76,70,158,63,107,66,1,161,241,150,159,63,172,151,94,98,79,155,187,191,139,76,158,221,85,189,129,191,214,234,113,219,85,40,169,191,18,208,198,125,194,187,129,63,167,24,22,155,190,115,150,191,151,98,124,70,205,182,187,63,200,155,129,67,134,202,160,63,106,2,216,131,227,188,165,191,199,49,174,218,37,179,178,63,217,207,232,13,160,156,160,63,79,73,196,247,198,205,176,63,251,182,16,148,139,75,155,191,113,6,199,111,175,29,167,63,155,7,217,119,244,175,165,191,61,154,210,106,102,210,191,191,62,38,41,165,222,103,161,191,252,154,111,65,199,214,191,63,232,83,25,210,99,23,183,191,11,87,214,110,65,83,179,63,46,224,152,18,194,129,171,191,55,107,114,106,16,70,177,191,15,96,203,89,249,173,178,63,179,137,124,57,13,222,181,63,45,242,87,159,119,130,179,191,209,19,78,8,160,168,180,191,13,134,154,154,59,131,164,63,43,179,186,231,57,233,178,63,203,244,219,9,195,32,167,63,39,72,235,100,179,206,168,191,89,106,102,7,20,83,168,63,138,237,126,252,247,109,172,63,175,114,96,158,252,13,178,191,240,196,5,133,194,59,159,191,47,70,50,65,79,61,170,191,38,70,243,38,139,24,162,191,46,206,41,184,59,183,162,191,188,77,54,95,37,196,166,63,63,24,52,135,217,8,164,63,103,114,162,217,250,129,175,191,125,87,51,154,191,22,157,63,73,45,78,200,194,33,165,63,134,181,112,20,204,110,160,63,189,96,167,121,239,117,169,63,213,21,250,242,115,179,155,63,190,80,208,36,219,181,166,63,128,105,235,25,44,206,172,191,222,165,109,126,2,131,181,63,110,72,168,195,68,137,163,191,179,221,218,35,103,135,174,191,66,190,192,62,93,63,160,191,212,248,229,98,73,163,160,63,109,185,238,36,210,47,177,191,44,78,223,28,186,84,168,191,137,34,217,170,50,21,166,63,13,234,161,47,109,235,164,191,36,203,136,212,252,173,162,191,46,87,222,187,71,224,166,63,216,36,46,165,135,67,170,191,58,219,37,105,207,207,161,191,147,7,160,117,140,78,162,191,121,213,89,86,193,154,180,191,121,59,20,54,202,108,185,191,175,95,179,252,101,159,183,191,246,163,86,255,93,230,187,63,218,209,41,7,223,197,184,63,138,32,38,190,101,50,166,63,225,164,186,46,5,102,184,191,109,42,37,112,29,255,182,191,141,106,217,98,118,119,187,63,56,12,98,68,165,124,185,63,46,115,132,240,57,32,159,191,117,93,17,200,18,18,165,191,143,212,13,244,155,191,170,63,162,120,93,49,55,182,160,191,146,48,191,108,218,69,155,191,99,92,128,14,131,229,166,63,38,207,108,182,53,207,167,63,12,181,188,177,172,35,150,191,137,95,242,223,185,174,168,63,15,250,62,145,19,161,164,191,111,185,145,101,193,50,171,191,50,146,13,14,62,159,162,63,100,86,74,189,224,131,160,63,63,228,180,38,37,187,171,191,49,41,42,235,162,89,180,63,78,134,12,60,145,175,179,63,20,61,234,181,215,123,163,63,179,241,202,208,125,83,164,63,185,237,251,196,0,220,159,63,87,215,60,22,218,11,169,191,197,118,93,242,166,250,181,191,30,183,229,27,110,204,185,63,203,26,233,235,14,204,160,191,192,7,192,83,89,113,180,63,159,47,238,52,9,49,166,191,230,252,149,178,169,217,180,191,70,39,200,218,170,91,178,191,181,191,116,239,141,12,180,63,221,194,184,69,7,113,178,191,239,126,167,196,252,75,169,191,41,166,142,143,233,41,162,63,77,147,2,215,153,43,178,191,176,18,18,114,15,210,162,191,211,24,65,215,160,207,161,63,153,176,211,77,189,40,172,191,10,173,197,19,214,99,171,191,189,206,243,87,185,25,164,191,20,83,56,100,101,207,161,191,145,108,122,126,181,32,155,191,43,188,8,221,8,244,156,191,211,242,193,237,58,233,161,191,178,179,208,101,132,79,173,191,39,208,47,218,194,242,160,63,53,216,104,245,87,59,170,191,225,230,215,96,128,60,164,63,225,10,156,138,142,48,150,63,210,138,46,120,229,133,150,63,139,2,123,3,237,163,162,63,234,57,197,196,124,150,164,63,152,204,168,107,47,152,164,63,171,51,171,144,203,59,168,191,237,110,96,102,129,66,172,63,47,23,168,166,145,70,176,63,130,202,248,198,25,124,160,191,255,80,23,153,137,182,168,63,174,0,235,137,182,213,162,191,43,27,174,127,71,244,176,63,147,189,124,54,160,159,168,191,15,136,237,87,173,169,164,63,213,101,141,165,0,129,154,63,88,250,7,61,210,96,159,191,238,181,195,46,40,250,153,63,242,42,43,197,111,15,162,191,127,131,132,229,213,96,155,191,88,100,98,182,104,193,171,191,213,32,32,52,176,176,184,191,57,251,188,133,22,23,185,191,116,117,133,73,78,8,186,191,152,250,99,48,129,184,183,191,32,1,186,182,91,101,159,63,139,136,136,224,92,234,185,191,26,99,117,100,47,251,186,191,73,29,213,133,83,199,183,191,180,171,176,143,66,137,183,191,84,126,51,103,139,91,149,191,137,83,73,59,79,13,159,63,249,135,13,180,7,135,164,191,252,19,72,44,158,200,166,191,179,214,57,83,76,242,157,191,202,50,118,169,9,206,163,191,242,80,217,30,156,174,153,191,73,166,7,211,34,113,153,63,245,51,73,132,239,212,148,63,84,243,203,150,208,255,161,63,16,23,137,128,148,157,166,63,84,143,238,12,223,230,168,191,71,105,109,192,242,88,168,63,27,31,162,17,131,124,171,191,220,100,64,64,170,33,176,63,206,211,7,183,126,131,180,191,101,165,38,6,231,56,151,63,186,185,214,216,13,209,165,63,212,74,146,127,52,34,169,63,252,42,144,108,190,51,169,63,7,41,102,175,43,152,155,191,146,193,212,88,218,251,166,63,100,237,232,169,129,207,171,191,161,145,157,242,54,78,169,63,134,135,243,26,39,23,168,191,230,202,128,209,25,215,161,191,226,192,140,15,129,131,165,191,188,151,75,193,210,137,167,63,114,221,114,139,105,252,164,191,220,37,167,244,17,104,165,191,252,160,206,2,138,94,166,63,18,79,132,95,241,69,167,191,42,73,53,46,135,155,170,191,211,181,77,56,211,24,164,191,221,255,161,75,212,78,156,191,109,104,210,207,153,216,154,63,90,14,122,181,66,158,162,191,160,71,15,92,150,105,158,191,220,183,203,234,162,203,157,191,254,127,241,136,131,149,160,191,199,163,174,0,63,211,166,191,152,126,102,205,165,9,166,191,228,239,132,57,241,193,161,191,49,156,17,70,211,235,173,63,252,158,96,63,12,174,169,191,146,220,176,239,160,108,161,63,154,24,60,167,218,240,170,63,71,195,226,248,230,61,163,63,21,160,231,165,13,6,161,63,18,177,226,61,129,218,160,191,67,190,229,177,35,178,155,63,40,198,101,132,105,211,165,191,8,176,11,141,238,1,160,63,18,181,45,108,93,81,183,191,35,138,217,17,147,228,184,191,203,189,37,201,158,98,190,191,46,223,222,5,218,14,182,191,94,221,117,53,140,166,184,191,223,65,155,20,116,169,183,191,108,250,208,244,184,26,189,191,176,234,131,64,73,23,184,191,74,2,245,132,91,61,166,191,62,108,123,164,99,10,166,191,183,21,86,28,104,205,169,191,159,218,181,22,228,36,171,63,121,150,240,79,117,16,166,191,51,59,167,194,122,0,166,191,137,185,91,15,199,249,154,63,159,45,73,120,200,156,182,63,123,104,105,131,50,203,178,191,202,170,30,207,212,168,168,63,61,2,38,245,95,19,168,191,85,15,152,222,167,201,162,63,46,169,16,57,91,97,164,63,247,35,40,56,232,14,157,63,189,7,79,91,15,157,176,63,68,185,126,0,245,42,153,63,10,99,161,252,127,112,169,191,31,134,117,154,188,43,165,63,109,181,224,216,239,36,167,63,221,95,9,24,220,20,159,63,66,8,22,197,61,5,169,191,13,162,97,73,199,250,164,63,62,113,30,237,250,206,169,63,254,156,182,70,58,185,160,191,191,164,211,214,180,126,148,63,255,75,146,61,128,186,161,191,43,23,154,63,211,47,166,191,254,222,161,211,240,48,170,63,189,221,81,243,0,192,167,191,196,147,74,194,210,52,165,191,250,49,101,164,175,254,166,63,4,133,60,172,4,34,175,191,182,83,157,222,120,8,168,63,132,16,227,222,106,158,166,191,153,147,187,192,182,159,166,63,45,168,151,234,202,15,161,63,119,102,56,144,170,45,163,63,174,22,28,208,139,131,159,191,105,153,29,42,33,182,161,63,190,242,6,47,5,0,160,63,43,251,175,151,236,157,164,191,196,176,100,230,99,8,168,63,85,107,239,169,24,72,164,63,217,55,82,188,114,42,184,191,181,21,95,223,14,64,188,191,22,76,144,11,23,142,186,63,13,55,110,143,178,171,185,63,40,13,25,79,44,137,166,191,51,152,133,88,241,190,184,191,118,199,10,98,92,37,191,191,147,197,171,203,182,200,183,63,47,65,157,12,195,211,183,63,139,53,233,128,168,84,161,63,81,109,241,255,92,78,165,191,196,56,162,179,12,189,160,191,37,36,100,229,8,167,169,191,128,41,64,186,221,215,157,63,166,125,2,85,14,87,165,63,177,113,198,17,153,177,158,63,216,50,223,23,241,132,159,191,59,170,54,236,166,198,173,191,7,205,189,206,151,67,179,63,232,148,105,71,145,20,176,191,250,110,181,41,7,156,176,191,247,16,231,188,253,36,184,63,92,163,209,32,26,102,163,63,239,184,168,155,148,228,177,191,8,211,95,52,71,81,171,63,153,175,2,50,171,72,173,63,87,190,134,108,32,121,176,63,255,176,93,22,18,88,164,191,93,84,157,147,136,170,164,63,229,166,48,79,172,170,170,191,107,37,228,125,212,222,171,63,169,108,226,131,27,160,167,63,39,21,39,121,116,96,167,63,93,172,164,97,16,198,170,191,185,111,80,70,64,69,166,191,85,64,232,98,85,179,174,63,174,84,46,195,152,174,169,191,209,185,100,111,208,135,172,191,19,102,13,154,20,177,161,63,157,28,170,114,236,56,162,191,205,177,195,97,249,233,175,191,181,173,110,7,151,209,163,63,3,143,55,115,31,223,173,191,45,138,117,172,207,241,168,63,234,148,82,105,229,160,171,191,66,232,39,255,39,153,167,63,92,8,144,236,65,46,158,191,151,96,63,227,197,60,164,63,210,140,28,217,3,213,161,191,255,46,233,96,152,69,165,63,144,114,56,149,132,159,166,63,75,66,72,228,34,68,186,191,19,44,107,31,60,15,185,63,72,214,111,68,2,204,187,63,55,98,184,132,61,202,184,191,216,227,150,174,9,43,168,191,26,127,252,227,41,206,182,191,35,141,163,135,92,73,180,63,231,218,118,106,22,200,190,63,245,243,118,60,126,230,187,191,217,135,28,18,184,195,158,63,9,185,60,119,147,131,163,191,98,187,245,241,28,54,167,191,231,66,105,68,137,159,154,63,59,14,81,121,217,101,169,63,9,236,90,246,172,62,168,191,156,31,17,22,230,145,159,63,78,180,38,24,124,101,158,191,239,49,19,100,14,7,164,63,212,255,126,157,57,77,164,191,166,214,195,123,149,125,166,191,120,236,221,217,19,150,160,63,185,214,136,180,44,242,160,191,34,187,189,119,63,110,172,191,180,205,215,24,110,136,161,63,226,85,48,224,139,220,175,191,227,190,17,100,98,203,158,63,251,107,135,16,19,187,165,191,43,200,80,67,158,6,167,63,193,129,2,20,205,221,177,63,7,69,154,215,93,231,164,191,21,96,136,169,230,137,158,191,110,132,196,172,129,16,163,63,123,231,206,212,69,251,157,63,76,102,78,24,212,158,168,63,174,47,18,116,221,217,162,63,220,46,139,164,244,10,167,63,144,211,247,221,237,108,164,63,53,8,231,69,115,10,165,63,96,199,48,86,241,74,164,191,109,77,113,170,86,185,164,63,125,241,132,26,73,244,172,63,132,136,159,128,75,49,174,191,127,196,114,34,141,35,171,191,188,32,27,179,183,39,161,63,181,102,167,15,236,236,163,63,96,252,101,150,84,45,168,191,157,64,205,88,172,217,160,63,172,90,124,118,177,140,167,191,211,42,40,40,190,203,161,63,133,84,189,123,152,118,157,191,98,59,229,111,209,209,151,191,5,244,193,72,150,129,160,63,71,22,131,21,31,230,163,191,182,152,211,41,41,207,156,63,68,41,66,102,89,212,186,191,51,203,138,233,18,233,183,63,174,200,234,240,199,225,186,191,214,118,30,68,116,133,185,63,176,82,115,33,64,133,160,191,114,92,179,172,200,157,188,191,124,156,73,200,166,150,189,63,57,133,78,134,177,95,184,191,136,131,204,28,246,155,185,63,202,189,252,40,198,221,158,63,158,240,22,57,38,255,161,191,242,232,143,136,174,213,164,191,133,106,91,254,97,27,163,63,157,75,66,106,246,136,162,191,249,111,201,129,141,38,163,63,42,93,181,49,227,132,151,63,200,21,77,201,63,23,151,191,65,132,200,44,105,215,160,191,78,56,182,132,148,42,163,191,107,149,211,34,220,185,163,63,121,54,131,113,80,92,163,191,195,237,171,33,39,222,159,63,191,3,242,24,241,112,164,63,67,103,30,131,122,198,157,191,234,112,207,126,234,69,163,191,251,234,173,174,184,125,161,191,122,8,114,108,214,195,160,63,61,196,136,146,210,24,160,63,239,43,193,71,187,252,166,191,125,150,141,109,79,6,158,63,60,171,126,242,148,223,161,191,49,18,91,159,15,246,163,63,0,79,207,107,81,12,162,63,88,12,73,193,2,185,155,63,30,163,91,206,62,52,156,191,77,8,251,246,71,234,161,63,174,79,117,8,121,213,155,191,159,246,192,131,105,229,155,63,36,97,230,191,39,14,160,63,251,63,142,151,58,122,184,191,198,12,144,123,28,112,183,63,24,207,60,188,121,232,185,191,182,59,53,56,214,201,182,63,53,94,5,81,65,243,183,191,75,218,163,101,69,40,185,63,5,123,135,74,254,153,188,191,71,93,196,173,245,104,184,63,118,71,128,26,221,85,161,191,68,142,245,48,19,89,164,63,117,127,96,30,116,225,167,191,229,136,59,156,214,43,167,63,30,94,88,199,28,171,168,63,88,210,61,38,163,226,163,63,49,234,107,127,38,168,155,63,207,69,152,130,48,210,153,191,137,238,107,99,58,228,152,63,172,3,186,247,79,243,154,191,53,104,30,43,86,91,156,191,102,205,90,202,119,236,162,63,100,202,205,13,52,58,165,63,114,158,217,60,114,88,185,191,131,194,210,131,21,161,186,63,197,7,208,82,237,190,184,63,155,35,21,222,109,30,184,191,173,182,201,86,93,70,186,191,230,77,82,80,155,64,190,63,142,113,148,32,74,86,186,63,48,218,83,253,246,56,185,191,228,98,110,191,213,65,168,191,7,68,116,223,188,47,168,63,60,140,78,124,172,121,166,63,218,52,143,19,78,68,166,191,215,194,112,7,96,232,161,191,110,61,5,56,11,123,162,191,149,151,158,186,153,133,166,63,61,31,103,176,178,132,168,63,12,36,190,17,94,199,164,63,36,220,117,154,183,225,164,191,12,148,245,129,112,199,163,191,122,121,74,202,40,170,163,191,163,167,95,98,41,211,185,191,27,79,205,201,165,15,187,191,185,179,213,86,17,53,187,63,255,68,136,240,97,21,186,63,86,95,166,218,121,14,186,191,210,131,52,70,33,103,184,191,13,192,106,24,108,50,188,63,27,59,162,243,192,118,185,63,101,199,99,163,118,198,165,191,204,107,148,103,241,237,162,191,158,70,9,241,115,234,168,63,158,239,234,250,43,223,167,63,146,39,226,206,21,95,160,63,190,216,78,25,182,42,160,63,157,217,9,45,17,8,160,63,66,87,186,135,157,150,184,191,140,118,228,161,145,2,187,191,204,66,142,157,179,220,188,191,94,82,99,171,248,1,190,191,95,44,117,65,143,129,188,191,193,63,105,47,218,133,187,191,23,184,227,20,177,203,187,191,28,161,217,170,101,202,187,191,108,145,1,64,159,80,164,191,108,111,222,198,203,185,162,191,246,179,26,152,96,92,164,191,162,163,98,60,253,214,161,191,207,184,143,178,49,146,234,63,69,15,82,128,70,236,210,63,191,179,229,236,164,10,217,191,141,12,205,160,178,15,245,63,253,62,116,223,137,48,244,63,177,121,202,90,128,176,220,63,64,67,82,20,248,228,247,191,88,57,98,170,62,106,0,192,233,117,219,213,160,184,255,191,114,189,88,39,212,184,232,63,199,86,101,226,115,99,245,63,223,135,175,194,245,140,242,191,34,112,93,169,114,232,214,191,47,158,27,25,213,151,184,63,28,247,202,176,192,119,192,63,126,128,179,64,223,68,213,191,145,6,116,251,253,7,231,63,150,47,17,239,33,69,236,191,198,3,135,205,52,16,231,63,220,166,116,142,185,91,206,63,147,96,42,241,59,7,201,63,192,153,152,175,171,236,220,191,115,212,221,202,69,82,203,191,85,137,33,213,179,51,217,191,48,3,16,21,105,165,224,63,168,10,245,132,255,121,224,63,199,37,121,89,84,124,201,191,109,91,222,24,16,75,224,191,106,48,25,252,126,163,238,191,163,227,247,203,110,25,180,63,109,46,207,80,31,81,219,63,173,12,44,99,153,3,214,63,229,229,3,29,180,50,194,191,105,232,174,164,207,73,178,191,229,92,120,92,86,127,222,63,170,58,70,135,143,149,202,63,118,238,184,19,80,25,200,63,23,232,102,24,86,40,209,63,2,66,24,253,189,159,197,191,67,221,82,220,81,102,212,191,65,189,47,41,185,249,188,63,189,238,255,51,125,63,212,191,236,48,33,139,53,98,220,63,9,206,105,44,153,121,199,191,1,212,217,17,71,8,208,191,225,237,253,198,29,199,190,63,154,100,0,188,171,141,163,63,8,250,190,103,192,233,188,63,202,34,198,9,17,1,182,63,99,136,192,71,18,24,174,191,193,245,99,202,20,248,203,63,224,20,12,76,237,1,185,191,117,104,113,252,155,181,206,63,8,242,10,70,83,237,205,191,243,51,117,177,220,0,208,191,87,172,212,27,56,181,198,63,179,97,91,145,237,26,205,63,146,227,118,139,18,46,200,191,125,87,79,105,241,81,193,63,193,210,135,254,31,248,190,191,188,138,78,164,52,219,194,63,11,109,107,35,122,183,185,191,246,28,177,108,131,183,191,191,199,130,210,217,82,222,162,191,65,213,64,243,190,69,195,191,220,141,154,47,127,162,165,63,70,49,101,87,115,101,198,63,75,112,100,153,235,52,153,191,219,61,229,49,177,230,200,63,97,158,234,6,150,109,208,191,159,238,118,162,56,185,174,191,176,100,69,247,202,73,171,63,162,187,170,116,229,196,171,191,151,175,178,233,111,4,210,191,224,18,253,96,58,239,172,63,70,136,12,164,236,146,203,63,101,68,153,17,165,162,177,191,97,62,255,101,235,254,186,191,202,18,63,128,233,14,172,63,71,82,118,231,27,223,183,63,138,226,191,249,227,148,146,63,50,213,200,135,161,148,197,191,154,242,187,154,23,63,191,191,103,210,233,202,165,161,189,63,198,191,10,192,80,25,194,63,162,240,146,97,173,94,198,191,65,41,156,166,221,46,148,63,174,250,148,156,165,153,177,191,251,59,210,4,9,62,149,191,55,123,92,128,148,182,209,63,167,68,190,88,42,51,197,191,174,186,60,246,150,231,192,63,143,141,66,63,234,48,191,191,81,130,189,47,134,211,191,191,172,185,139,78,188,51,183,63,166,226,206,119,95,85,185,191,254,164,188,166,53,68,184,191,70,231,9,185,4,190,166,191,73,155,141,83,186,62,205,63,231,51,105,29,155,205,195,63,64,46,49,234,102,199,181,191,113,193,42,95,66,42,173,191,106,250,72,89,234,216,179,191,8,111,249,239,87,221,178,63,129,105,215,255,47,33,195,191,68,226,132,216,238,32,198,191,189,222,48,229,218,7,178,63,151,78,15,5,90,3,184,191,179,193,119,213,222,138,184,191,106,49,105,113,83,123,174,63,134,200,22,201,83,213,166,63,94,136,251,99,41,230,164,191,118,203,135,185,234,6,186,63,251,30,87,47,32,169,176,191,252,238,193,215,75,176,183,191,138,219,158,212,86,55,196,191,50,160,103,51,125,23,197,191,38,137,190,77,103,198,178,63,58,37,244,55,218,52,177,63,240,89,128,147,35,73,180,63,117,149,57,247,20,104,184,191,163,97,151,193,211,109,199,191,71,104,239,159,59,172,176,63,10,201,245,243,61,180,188,63,211,215,217,79,199,76,169,63,86,15,162,248,255,60,176,63,184,137,184,6,192,249,180,63,11,251,43,166,221,127,169,63,96,82,96,229,157,49,184,191,87,165,224,44,28,246,170,63,57,126,6,22,215,182,197,63,200,128,118,159,220,218,189,191,202,31,25,157,129,86,166,191,153,118,129,105,117,181,166,63,211,208,156,49,149,133,173,63,174,157,208,103,93,182,192,191,176,183,188,247,113,131,192,63,87,22,115,122,16,187,185,191,243,251,95,151,247,91,181,63,145,207,233,4,9,34,179,191,28,37,179,77,230,186,184,63,38,12,175,182,73,159,192,191,76,215,84,136,232,10,190,63,193,73,224,0,75,247,185,191,98,157,241,19,241,132,194,63,56,74,204,17,132,115,180,63,83,208,72,1,233,140,188,191,254,222,249,154,17,91,186,191,43,146,62,81,198,23,181,191,171,141,26,36,210,180,192,63,129,160,112,208,22,69,187,63,78,220,131,190,203,196,186,191,67,207,113,139,239,141,186,191,108,90,41,43,169,32,187,191,58,255,225,36,108,26,184,191,53,105,59,147,122,95,178,63,200,145,195,119,50,55,195,63,238,51,26,33,38,235,213,191,44,24,189,136,97,124,222,191,20,247,134,76,166,11,217,191,25,132,71,16,68,35,201,191,74,45,133,192,68,102,166,191,51,198,183,183,173,223,218,191,248,199,89,169,188,72,209,63,203,13,140,146,17,193,197,63,180,94,92,21,72,250,193,63,145,86,212,72,14,41,173,63,77,233,94,17,136,208,195,191,27,124,94,208,45,67,185,63,189,97,212,121,29,91,169,191,185,41,36,191,210,8,215,191,41,62,132,234,37,146,202,191,114,200,180,84,46,4,212,63,250,45,225,60,106,221,194,63,16,61,4,130,173,49,188,63,35,252,231,186,87,171,198,191,77,172,225,176,73,108,177,63,251,107,170,27,152,160,189,191,24,140,28,15,202,124,178,63,99,252,146,154,206,164,155,63,149,81,151,72,57,237,179,63,98,195,166,12,143,145,198,191,45,197,140,91,172,127,195,63,254,207,159,68,36,63,193,191,3,4,179,255,183,137,183,63,191,131,80,137,157,21,194,191,20,27,197,104,144,93,175,63,68,209,128,73,131,157,184,191,89,46,249,39,128,227,185,191,211,198,33,110,222,209,180,63,8,114,158,235,225,33,195,191,84,160,135,215,49,86,171,63,220,68,153,252,105,154,197,63,129,82,243,121,54,89,168,191,219,245,240,237,75,136,180,191,75,139,157,182,125,71,181,63,65,163,144,119,110,199,180,63,83,227,253,188,153,133,175,191,54,249,21,210,98,71,187,191,60,183,244,179,80,159,147,191,133,254,183,134,188,169,161,63,214,42,194,46,219,1,173,191,134,38,217,195,138,115,202,63,79,235,23,46,151,117,176,191,43,203,174,186,11,211,193,63,138,150,85,27,237,79,158,63,75,226,239,208,1,63,195,191,32,224,220,248,107,28,143,63,226,8,219,17,254,75,199,191,209,224,72,108,137,231,178,191,13,200,37,148,251,217,178,63,198,74,47,179,9,254,177,191,200,75,123,24,246,104,178,191,42,123,222,54,234,138,200,191,93,229,100,33,207,85,178,63,169,11,155,99,24,75,193,63,208,213,60,86,116,171,163,191,40,251,124,24,210,224,193,191,23,229,196,211,186,85,163,63,168,132,78,213,213,27,181,63,200,160,36,29,84,107,176,191,170,62,53,218,176,182,144,191,251,88,42,147,119,2,204,63,34,170,235,15,129,159,203,63,76,229,192,245,144,191,185,191,241,65,237,91,27,120,197,191,27,222,24,43,20,39,208,63,107,96,27,185,20,199,179,191,178,160,39,213,116,195,184,191,149,29,78,226,76,35,197,63,225,154,21,47,142,255,181,191,245,239,83,23,128,151,196,63,35,175,169,72,253,41,199,63,76,169,19,61,123,190,185,191,212,114,6,1,216,80,178,191,252,34,238,58,119,163,164,63,99,207,225,58,28,100,205,63,217,242,163,43,156,227,187,63,55,19,111,171,73,19,191,191,66,243,192,211,232,41,167,63,208,83,145,255,182,27,179,63,205,42,232,32,72,57,192,63,148,17,30,216,200,43,167,191,195,102,7,176,180,225,194,191,178,224,168,103,92,134,181,63,24,86,197,226,2,52,196,191,47,157,26,56,107,33,181,63,170,37,201,39,147,246,177,63,46,253,202,177,203,48,163,191,55,60,88,95,45,155,179,63,175,149,10,4,183,109,180,63,173,89,225,170,138,184,177,63,53,13,190,72,23,32,177,63,24,214,205,183,70,15,186,191,138,109,224,223,15,8,178,63,117,191,131,84,161,102,184,63,166,223,89,188,126,8,168,191,115,64,187,196,188,226,171,191,180,225,176,24,211,182,170,191,206,234,68,243,145,95,172,191,210,221,63,43,89,254,198,191,175,73,156,14,54,218,168,191,33,116,30,183,237,241,198,191,16,103,58,243,133,50,158,191,116,214,73,172,16,33,177,191,220,184,203,189,49,209,164,191,160,243,15,131,39,67,174,191,187,150,223,76,160,14,181,191,210,203,79,80,183,239,153,63,128,191,26,37,239,155,186,191,5,217,21,222,64,16,184,63,239,94,53,199,98,130,184,191,163,127,245,81,251,196,205,191,179,18,81,147,134,53,191,63,62,138,28,241,156,100,182,63,242,158,158,117,118,102,168,191,7,189,185,235,150,100,192,191,50,57,47,139,133,35,176,63,118,170,2,75,8,229,184,191,15,3,213,168,13,10,205,63,148,59,7,159,153,154,192,191,209,217,150,115,163,68,176,191,244,84,100,218,155,252,183,191,126,245,190,207,2,47,197,191,183,179,190,174,67,9,180,63,192,131,116,6,16,158,196,63,171,54,8,141,161,3,175,191,50,224,207,131,113,238,179,191,110,240,8,202,22,241,178,63,217,24,152,7,213,197,177,191,10,239,36,85,240,233,171,191,81,99,64,57,21,110,167,191,35,120,231,224,125,73,178,191,240,77,107,25,29,132,161,63,210,29,159,29,147,72,183,63,178,215,124,179,21,148,163,191,81,54,116,98,21,48,197,191,32,28,81,77,160,64,169,63,99,117,111,211,247,87,197,63,152,112,127,53,155,249,190,191,106,245,220,131,132,61,200,63,146,198,24,164,39,191,172,63,70,104,91,79,109,130,190,191,96,69,243,51,197,148,166,63,199,67,229,20,206,131,192,191,239,102,85,58,197,162,179,191,239,29,27,224,67,254,196,63,30,35,224,188,142,21,189,63,148,81,13,109,174,14,194,191,141,123,85,129,115,126,192,191,114,213,114,255,69,139,190,191,146,29,172,11,244,21,187,191,145,26,242,99,198,56,152,63,188,122,10,73,217,106,189,191,247,183,254,119,121,170,200,191,7,233,224,159,79,119,205,191,154,180,203,231,48,185,144,191,96,184,240,28,142,189,170,191,246,205,250,168,80,68,172,63,148,118,49,219,26,51,199,63,182,170,32,106,143,97,200,191,46,4,20,10,224,40,161,191,118,245,243,155,237,46,147,63,119,254,56,155,11,158,165,191,120,157,163,182,132,186,209,63,163,217,200,111,102,223,203,191,154,35,131,120,205,91,155,63,185,135,171,142,110,210,152,63,250,220,102,57,48,252,166,191,137,189,17,195,245,147,151,63,85,153,69,246,85,19,164,191,102,85,237,143,30,205,155,63,224,59,178,147,233,184,183,191,40,205,204,239,247,91,195,63,242,136,79,210,33,60,180,191,42,157,100,25,112,211,178,191,193,227,244,39,124,14,180,63,73,206,193,207,122,146,156,63,36,77,105,61,45,37,176,191,88,177,132,136,77,180,158,63,97,113,69,177,110,49,182,63,242,31,137,144,204,199,162,191,191,69,138,248,123,52,160,63,117,56,5,81,173,117,158,191,120,103,240,156,172,26,176,191,5,198,111,124,94,104,177,191,117,15,87,41,71,254,179,63,214,167,36,56,1,207,167,63,171,22,237,56,228,140,196,191,250,110,240,169,26,52,183,63,82,245,182,115,165,83,136,63,2,5,163,217,117,223,183,191,229,135,138,131,161,149,161,191,106,40,125,90,201,63,161,63,135,9,138,78,242,76,178,191,13,166,190,98,51,50,157,191,125,65,228,209,8,53,175,191,188,53,22,219,111,219,155,63,246,196,75,50,104,18,145,191,77,192,52,188,91,104,179,191,94,163,125,158,185,1,145,63,22,38,109,204,69,230,166,63,2,147,150,111,97,27,154,191,231,116,206,70,248,202,192,63,127,255,19,242,219,122,144,63,195,65,253,168,116,223,198,191,192,60,240,21,226,31,169,63,235,158,123,241,73,55,189,191,243,100,213,229,193,28,185,63,231,109,1,9,227,126,178,191,95,243,65,7,103,197,186,63,25,134,147,148,214,149,161,191,105,186,191,128,50,246,195,63,60,49,135,221,78,19,193,191,177,27,185,94,66,88,180,191,166,173,140,165,210,200,181,63,75,254,174,184,252,144,189,63,8,98,44,242,167,216,162,63,77,157,3,17,240,57,183,191,41,228,60,180,64,250,162,191,171,133,2,199,84,134,187,63,9,197,120,229,32,33,182,191,201,222,66,60,63,243,161,191,118,184,87,133,192,234,177,191,83,216,156,64,163,182,169,63,219,228,76,47,224,160,178,191,80,214,122,101,55,54,173,63,190,154,195,62,190,143,170,63,167,2,251,37,151,109,174,63,9,255,139,211,211,244,171,63,207,111,254,157,116,70,169,63,96,247,101,6,6,56,173,63,194,116,80,194,254,168,174,63,160,122,208,182,142,174,172,191,190,251,135,81,33,28,165,191,72,220,157,241,90,32,179,63,247,141,235,189,74,77,177,63,106,177,232,231,177,31,164,191,135,187,11,125,92,234,165,191,219,108,101,29,46,198,165,191,165,241,84,187,193,72,180,191,100,47,230,146,20,26,162,191,75,42,49,167,147,211,181,191,164,215,206,62,74,55,150,191,155,193,183,141,194,75,174,191,245,40,244,169,14,163,160,191,63,57,218,238,4,196,168,191,111,40,31,233,89,122,151,63,192,142,233,90,254,163,184,191,78,203,75,6,144,52,183,63,29,101,83,171,33,159,179,63,249,127,78,160,48,163,193,191,51,41,77,46,252,1,176,191,49,121,173,176,119,207,163,63,134,34,242,212,22,48,179,63,221,64,168,161,182,91,166,63,61,132,232,237,92,4,190,191,137,18,13,150,111,57,177,63,152,181,100,139,70,77,168,63,38,37,8,60,243,161,161,191,134,230,204,227,186,186,176,191,195,220,33,93,9,68,193,63,110,56,14,245,132,243,168,191,186,214,110,251,222,42,172,191,116,70,37,218,227,128,178,191,86,24,102,133,156,216,164,63,35,65,9,94,66,184,182,191,187,227,58,237,170,236,178,63,132,247,246,56,114,110,180,63,242,184,121,155,108,59,169,63,82,186,148,19,52,171,170,191,163,120,175,132,73,104,159,63,43,142,158,106,44,164,158,191,184,9,57,33,0,237,167,191,131,239,13,7,27,91,157,63,92,6,153,61,86,100,168,191,91,3,100,48,98,194,162,63,20,128,132,206,30,149,160,191,65,199,32,5,117,224,181,191,142,125,162,96,202,132,164,63,253,169,54,78,75,191,183,63,243,170,80,228,55,146,164,63,112,157,151,169,128,108,169,191,143,154,244,222,99,75,190,63,4,157,168,75,101,75,165,191,244,229,172,217,31,63,175,191,1,99,237,87,200,210,185,63,105,2,159,132,72,164,168,63,187,107,29,8,91,99,179,191,109,10,241,56,137,207,176,191,160,230,2,159,36,224,161,191,61,87,47,34,125,151,187,191,208,85,189,235,96,71,194,191,205,125,67,163,111,184,185,191,171,234,253,16,54,140,184,63,216,201,42,11,123,34,182,191,243,111,2,156,208,201,183,63,162,88,46,213,249,253,192,191,32,201,243,107,126,65,184,63,54,30,207,76,122,19,193,63,83,131,169,94,192,84,188,191,223,11,229,169,208,100,184,63,4,136,122,66,53,243,187,63,246,239,180,244,66,149,171,191,53,15,168,91,239,22,180,191,152,71,79,53,246,151,178,63,223,255,143,107,243,95,180,63,42,29,245,219,70,140,182,63,143,109,41,224,176,136,183,63,62,115,208,51,70,0,162,191,153,41,58,12,151,82,161,63,168,61,62,161,219,233,170,191,14,25,99,94,101,121,185,63,233,81,195,150,135,5,156,63,140,10,160,48,192,85,154,191,83,217,89,109,90,48,193,63,153,51,248,143,50,225,166,191,60,116,162,134,99,36,177,63,188,86,61,78,128,131,161,63,113,215,8,78,135,53,174,63,120,6,113,208,39,121,178,191,204,114,45,2,28,131,190,63,210,59,5,4,169,99,145,63,184,86,163,212,145,189,166,191,114,49,196,166,69,90,185,191,205,25,77,222,152,55,145,191,35,176,138,100,162,161,167,63,4,114,28,117,219,135,185,63,196,25,11,142,239,147,173,191,175,239,135,4,5,152,179,63,185,150,20,39,206,144,164,191,156,243,132,57,77,52,167,63,121,231,41,134,177,91,176,191,41,192,121,80,111,176,172,63,82,187,161,246,184,89,176,191,27,107,181,228,102,234,176,191,236,230,82,224,178,149,185,63,246,29,108,81,75,212,178,191,17,141,11,228,252,121,184,191,226,29,37,228,179,186,177,63,196,219,49,170,127,37,179,63,134,122,17,244,101,89,168,191,90,134,159,54,233,184,176,63,108,197,88,21,151,245,168,63,229,106,50,59,74,133,162,63,94,101,69,74,131,198,161,191,5,78,126,189,64,189,166,63,239,72,181,205,198,255,166,191,72,102,128,197,60,69,182,63,30,85,16,158,104,51,177,191,123,164,216,165,161,146,179,191,82,245,225,157,28,101,176,63,177,177,50,251,36,186,155,191,102,202,5,24,145,218,158,63,85,155,34,48,71,217,152,63,246,199,163,199,127,76,167,63,105,55,4,230,74,70,157,63,137,111,237,206,17,135,156,63,196,87,175,224,141,10,168,63,4,151,222,214,240,189,165,191,86,163,11,118,51,221,164,63,162,224,126,54,240,194,167,63,12,124,234,132,182,23,170,63,152,28,159,189,25,103,165,191,124,100,251,229,8,213,163,63,109,162,234,110,53,248,182,191,194,253,4,221,235,254,168,63,1,30,72,6,243,240,179,63,51,158,159,165,12,85,172,191,200,30,87,53,208,172,167,63,114,109,104,92,151,10,170,191,8,178,70,38,5,17,173,191,175,66,107,70,91,28,176,63,116,138,237,25,162,64,167,63,69,46,5,50,160,31,179,191,119,225,5,57,9,107,177,63,6,26,105,255,174,209,177,63,183,241,241,128,159,242,177,191,132,171,8,190,53,7,163,63,11,239,208,16,160,161,172,191,251,75,93,102,141,17,173,63,117,152,14,214,8,135,169,191,53,189,254,218,70,8,160,191,119,177,186,85,185,26,171,191,1,143,90,245,64,39,173,63,4,66,55,3,178,153,173,191,189,255,192,122,97,96,154,191,68,206,44,1,171,71,166,191,82,240,15,182,101,155,161,63,152,119,10,9,121,50,160,191,99,223,182,130,0,42,151,191,220,43,102,45,199,83,163,63,12,33,52,111,28,99,166,191,241,104,254,185,104,85,185,191,239,76,102,51,193,58,178,191,80,138,4,67,109,74,184,63,240,33,34,235,43,51,191,191,37,110,43,252,126,26,186,63,237,219,154,146,70,231,176,63,41,246,19,203,167,204,177,191,236,42,17,5,218,119,175,63,126,164,146,9,14,97,195,191,187,176,128,88,222,213,189,63,54,94,227,224,81,118,168,191,179,55,23,215,204,49,168,63,241,172,165,241,181,125,147,191,49,96,227,154,206,48,147,63,47,172,35,60,196,123,152,191,182,34,246,8,156,237,182,191,249,83,68,106,242,74,152,63,127,89,178,1,227,64,179,63,117,255,32,99,27,170,163,191,180,103,122,92,121,237,149,191,212,113,181,58,118,51,151,63,209,204,235,138,100,223,176,63,207,72,96,223,71,2,156,191,12,197,120,242,73,138,154,63,208,62,210,232,169,154,182,191,115,175,207,57,139,107,180,63,249,227,194,41,133,196,178,63,113,212,198,118,179,94,140,191,194,176,20,203,3,213,162,63,162,129,104,24,150,163,141,63,55,118,254,140,220,67,165,191,181,252,88,173,94,13,184,63,14,104,235,86,25,7,138,191,37,252,52,8,17,45,166,63,211,127,98,221,73,36,180,63,47,166,42,85,220,125,137,63,6,33,1,224,183,84,165,191,110,53,252,225,49,252,179,191,248,71,229,129,23,206,187,63,123,129,30,13,45,115,171,191,234,165,84,223,123,184,176,63,51,232,1,24,43,188,182,191,253,74,7,152,155,105,169,63,210,134,164,30,151,179,175,191,166,192,6,129,33,153,170,191,62,2,189,184,235,29,181,63,55,73,174,45,7,44,171,63,5,98,190,177,129,72,179,63,228,251,206,238,236,228,170,191,192,110,206,40,111,112,175,191,108,115,222,241,22,91,182,63,126,228,208,160,252,171,172,191,220,121,5,24,139,164,175,191,244,29,236,241,179,97,177,63,185,188,8,119,158,41,169,63,247,177,145,85,55,124,170,191,215,3,194,39,175,161,175,63,242,157,195,179,165,204,169,63,39,48,68,125,251,183,170,63,18,31,2,92,165,134,169,191,238,38,17,76,165,151,170,63,8,227,216,138,16,187,163,63,78,209,37,46,251,23,170,191,140,187,170,247,180,135,167,191,147,237,42,135,124,229,159,63,121,79,146,15,26,51,160,191,78,57,86,120,1,154,163,63,203,244,33,87,3,177,156,63,97,2,154,213,247,20,156,191,167,195,146,251,197,86,180,191,82,230,245,44,62,56,177,191,249,240,50,242,161,35,177,63,208,73,32,29,35,24,177,63,233,229,42,43,66,4,176,63,96,171,194,26,133,152,178,191,231,68,176,200,202,70,176,191,80,80,46,10,238,163,182,191,55,36,71,143,144,44,156,191,161,107,161,161,37,15,185,63,251,95,100,115,99,137,179,63,38,5,249,173,99,53,180,191,67,26,89,51,221,181,162,191,29,155,244,93,171,117,172,63,215,16,132,90,124,161,165,63,193,141,136,98,98,5,179,191,89,240,199,90,204,196,167,191,68,191,122,68,182,156,163,63,49,68,241,71,219,46,173,191,233,65,10,110,1,176,179,63,115,71,95,186,223,94,184,191,218,48,91,107,116,178,168,63,125,113,19,57,72,155,160,191,18,81,12,14,254,242,161,63,198,36,57,20,154,39,176,191,255,108,73,149,195,24,158,191,105,43,43,251,77,43,156,63,187,253,39,224,17,63,173,63,31,220,248,81,9,59,174,191,231,64,121,10,14,147,167,191,30,124,123,91,76,114,163,191,252,76,74,67,76,56,165,63,69,219,168,48,168,46,162,191,53,117,255,45,126,190,174,191,14,197,99,133,82,214,158,191,192,99,32,166,196,108,179,191,198,224,228,132,11,188,171,191,34,8,228,251,26,171,176,191,53,149,99,127,97,62,180,191,40,50,142,246,244,44,187,63,244,148,7,220,166,51,178,63,40,230,240,6,148,182,183,191,159,208,218,96,95,243,172,63,82,126,134,204,164,161,180,191,111,89,165,186,150,127,192,63,196,208,249,212,144,43,179,63,108,130,64,14,149,79,187,191,94,212,141,186,210,88,166,63,4,156,203,101,61,84,163,191,182,127,7,189,217,185,180,63,224,117,11,59,164,154,171,191,81,55,214,20,11,19,177,63,77,208,204,223,85,11,163,191,108,201,178,84,72,140,173,191,212,41,205,130,187,76,162,63,16,1,42,128,15,101,169,63,209,107,37,119,32,95,173,191,234,150,153,9,85,132,180,63,109,190,253,154,81,46,172,63,171,90,220,236,245,47,176,63,97,58,253,237,35,97,183,191,71,221,49,247,72,241,181,63,76,67,225,131,182,74,188,63,167,81,167,6,83,121,171,191,125,47,55,20,248,103,174,63,214,65,233,210,247,138,180,191,196,254,206,52,134,195,186,191,105,236,222,247,218,80,186,63,63,133,3,186,78,251,181,63,76,131,137,200,102,128,173,191,114,109,35,40,20,32,174,191,247,52,81,176,254,41,178,63,205,145,175,103,50,233,181,191,185,162,14,142,113,68,184,63,170,147,189,101,182,54,171,63,24,126,138,122,33,127,172,191,40,249,111,84,8,134,174,191,69,247,182,25,231,135,170,191,35,44,128,88,112,238,164,191,12,124,234,173,82,9,170,191,11,49,51,41,185,21,176,63,179,36,226,144,196,53,173,63,97,136,92,73,90,17,182,191,48,51,178,114,29,58,175,191,89,149,102,77,239,4,176,63,159,130,227,89,84,247,177,63,34,121,205,89,43,238,168,63,247,151,85,151,209,40,180,63,25,139,231,140,135,31,185,191,107,36,118,12,62,199,185,191,48,104,221,102,120,246,182,63,47,26,182,83,46,245,179,63,95,135,75,226,201,220,179,191,91,245,160,91,22,48,177,63,253,31,225,60,193,84,187,191,139,28,49,41,218,183,178,191,73,62,199,73,50,180,181,63,214,40,48,17,93,51,182,191,250,254,246,6,231,229,173,63,55,41,165,136,243,170,165,63,44,210,229,65,26,184,180,191,23,95,53,198,11,61,161,191,78,210,225,57,124,158,173,63,106,204,195,102,88,122,172,191,132,163,4,2,51,162,165,191,249,176,137,109,77,181,176,63,152,64,7,203,64,251,168,191,204,105,5,69,176,237,170,63,176,226,181,192,233,134,168,191,166,154,198,102,116,206,161,191,32,168,223,252,198,42,163,191,201,199,91,190,24,170,176,191,18,204,223,90,30,112,179,191,54,207,147,44,80,129,173,63,31,133,166,101,237,197,166,191,212,246,31,87,64,84,171,191,168,167,231,131,124,69,163,63,95,185,243,133,46,176,180,63,42,228,125,179,70,107,181,191,215,19,142,103,156,114,179,191,178,67,149,83,154,118,185,63,88,140,7,184,101,87,184,63,241,216,220,144,51,227,183,191,65,114,111,51,18,65,180,191,232,230,28,148,81,206,191,63,159,19,240,148,241,38,188,63,205,120,44,158,158,87,158,191,204,167,90,239,229,141,179,63,196,100,247,224,150,93,171,63,255,13,139,219,1,154,168,191,242,61,255,193,16,123,158,63,212,182,252,244,57,138,170,63,148,26,223,148,75,67,166,63,216,143,57,221,78,11,167,63,140,69,199,56,166,98,176,191,130,221,0,44,15,151,183,191,202,217,114,233,149,243,176,63,154,4,14,205,93,239,163,191,56,51,3,125,108,214,168,63,181,177,168,140,11,136,173,191,84,191,58,123,167,178,181,191,201,200,192,186,239,244,186,191,108,194,111,30,50,125,174,63,141,82,107,60,148,203,164,191,4,208,200,179,96,21,166,191,40,234,9,163,98,64,171,63,239,88,89,127,205,205,181,191,16,167,92,182,32,228,181,191,92,94,96,112,98,224,163,63,168,69,19,204,4,122,162,191,118,78,92,177,236,160,158,191,208,250,162,167,44,94,171,191,136,71,131,234,73,230,169,191,209,176,230,82,214,85,168,63,46,162,218,195,35,73,177,191,177,174,204,85,249,24,172,63,186,28,75,7,150,73,179,63,200,255,21,137,156,170,177,63,184,172,231,248,231,126,178,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92160);
/* memory initializer */ allocate([137,124,248,164,91,78,173,63,205,166,107,172,196,125,174,63,240,237,21,93,215,22,173,191,41,11,98,234,201,123,181,63,108,110,14,189,31,111,177,63,17,111,149,217,9,94,174,191,253,91,34,4,220,100,177,63,56,19,97,87,177,44,177,191,62,195,79,233,77,157,166,63,29,124,199,181,123,188,178,63,246,202,191,253,169,249,167,63,240,132,188,155,190,120,172,191,209,62,255,182,230,179,160,191,235,112,9,52,47,119,162,63,140,159,122,44,102,149,163,63,218,162,120,227,47,21,160,63,148,123,11,238,208,246,164,191,163,200,196,82,152,4,158,191,39,125,83,213,199,12,172,191,201,203,107,67,220,188,167,63,175,2,214,62,149,17,166,191,23,118,234,67,247,135,177,63,212,117,181,116,161,243,183,191,7,52,126,220,246,72,183,191,86,182,166,226,214,212,182,191,9,23,68,207,226,182,182,191,167,187,149,93,15,230,185,191,213,78,162,235,63,68,187,191,235,184,21,21,204,116,183,191,4,9,154,238,123,9,184,191,161,218,191,168,63,213,170,191,161,8,114,113,112,198,171,191,7,223,97,244,90,237,160,191,191,93,33,205,159,56,163,191,179,125,170,13,224,88,173,191,51,120,72,158,56,73,160,63,21,207,202,250,191,240,160,191,134,166,104,52,59,132,168,63,65,154,207,149,206,2,176,63,124,255,165,105,143,224,176,191,246,19,234,136,74,121,172,191,196,56,211,49,156,76,173,191,50,112,112,242,65,83,161,63,214,15,6,105,123,81,166,63,9,201,49,155,32,1,169,191,229,225,190,36,135,201,165,191,247,37,244,6,79,29,164,191,90,45,43,255,164,195,172,191,205,18,208,20,108,240,161,191,237,99,88,22,245,180,158,191,120,207,95,178,91,254,171,63,118,209,89,88,158,50,164,63,7,70,41,177,191,127,173,63,88,218,222,5,93,100,161,191,117,154,64,5,69,33,162,63,34,64,3,3,190,5,175,63,36,166,32,76,68,137,171,63,218,156,115,185,97,110,171,63,143,219,230,116,135,117,167,63,41,108,157,95,72,54,159,191,149,177,199,115,35,170,168,63,77,150,236,87,43,80,164,63,189,238,253,184,240,131,158,63,49,185,151,139,7,75,177,63,253,210,221,55,88,199,178,63,172,52,19,140,202,157,179,191,189,45,71,203,175,35,181,191,7,56,115,225,199,46,186,191,77,165,37,73,207,176,184,191,68,156,248,110,61,6,172,191,239,162,120,147,55,93,179,191,228,28,147,245,7,188,182,191,130,86,73,2,195,129,189,191,205,56,234,189,23,101,186,191,32,255,191,41,157,162,166,191,46,96,140,238,158,135,175,191,23,120,182,237,23,202,174,191,1,125,54,2,136,46,171,63,109,16,96,141,215,252,168,191,36,1,95,19,214,215,161,63,249,39,127,241,38,168,169,63,1,187,167,5,233,99,159,63,240,145,57,109,165,83,172,63,199,119,33,45,243,213,166,191,86,193,46,175,152,148,161,63,125,108,41,97,234,1,163,63,107,62,60,125,49,54,166,63,181,52,58,241,88,229,163,63,108,68,194,99,167,123,169,63,199,123,133,219,233,133,152,63,107,169,55,171,25,80,155,63,61,98,194,236,35,132,158,63,201,125,153,243,50,142,154,63,93,131,112,140,15,189,173,63,53,6,149,217,163,154,170,63,67,7,197,27,87,198,170,191,186,36,129,137,46,118,160,191,236,81,33,149,93,13,168,63,50,78,45,181,101,201,160,191,188,100,101,49,166,110,166,63,234,157,60,147,247,68,164,191,140,130,126,244,95,1,160,191,68,244,124,151,14,77,167,63,18,35,234,84,155,51,157,191,192,139,25,199,48,141,158,191,6,125,116,9,208,251,171,63,96,19,82,43,51,198,179,191,254,189,58,53,121,2,187,191,20,7,203,97,57,230,180,63,2,52,132,177,25,229,184,63,148,136,219,83,130,223,166,191,50,215,162,36,107,73,183,191,163,61,71,67,26,209,189,191,26,172,11,28,238,135,178,63,176,108,148,142,202,91,184,63,56,8,140,104,218,66,162,191,247,55,7,183,109,194,167,191,105,77,230,142,245,163,176,191,215,255,81,124,144,254,171,63,216,215,216,111,255,171,169,191,42,158,52,100,238,226,176,63,182,122,38,132,127,221,167,191,237,23,185,132,101,188,171,191,164,153,186,77,131,37,179,63,25,9,184,57,7,59,171,63,141,2,163,10,61,89,166,191,179,28,32,160,170,198,169,63,24,147,57,84,149,63,177,63,9,153,48,222,217,154,176,63,252,69,15,225,206,150,164,63,175,234,14,247,39,11,168,63,171,27,230,133,5,243,171,191,231,105,66,206,151,171,176,191,92,209,45,197,198,8,170,63,82,122,73,33,89,154,171,191,84,105,0,68,108,197,176,191,86,194,113,235,3,56,180,191,206,226,207,235,162,44,165,63,115,203,55,236,27,65,168,191,47,188,118,208,155,63,167,191,123,6,105,198,130,172,176,191,136,33,21,60,219,220,163,191,18,54,144,181,138,5,166,63,227,4,230,72,244,252,182,191,19,219,127,153,95,43,183,63,95,108,61,92,161,219,185,63,215,229,226,180,91,76,185,191,167,120,185,114,234,237,182,191,17,46,80,200,13,16,180,63,111,204,249,59,221,247,189,63,6,146,27,42,186,175,186,191,212,191,252,111,87,187,168,191,155,45,63,250,218,157,160,63,108,4,216,144,198,139,177,63,133,177,128,241,210,101,167,191,80,118,232,224,160,174,166,191,87,49,92,161,185,223,167,63,186,161,193,155,255,152,175,191,198,163,6,163,205,13,173,63,118,197,112,130,201,150,177,191,60,8,150,201,249,175,164,63,93,58,170,232,183,13,166,191,207,70,122,131,113,16,177,191,232,23,27,0,181,8,173,63,129,12,44,19,108,152,164,191,19,134,159,226,196,181,177,191,107,169,59,3,99,172,176,63,117,168,169,51,6,42,162,63,35,26,4,210,208,96,167,191,101,111,192,151,243,165,176,191,210,32,76,18,204,46,171,63,226,69,244,107,164,152,162,191,176,89,48,111,218,162,185,191,162,142,150,58,237,218,185,63,232,207,188,143,26,180,182,191,175,80,230,155,56,36,184,63,230,162,8,103,150,147,188,191,27,193,14,241,108,225,187,63,25,21,204,217,4,251,184,191,123,13,212,186,146,169,184,63,201,215,30,163,237,71,176,191,177,33,155,36,121,37,175,63,197,38,156,153,112,51,165,191,62,16,118,180,97,70,166,63,74,22,71,180,239,73,167,63,113,112,58,254,108,98,165,191,219,86,108,152,17,83,160,63,240,160,116,201,209,124,160,191,81,38,73,97,195,93,167,191,194,126,254,129,155,118,178,191,154,206,112,245,98,27,183,63,6,243,152,93,14,225,183,191,195,153,175,142,159,70,184,63,246,25,187,103,197,181,181,191,169,170,154,127,99,69,181,63,82,95,154,35,178,21,189,191,179,124,42,72,134,218,186,63,193,73,178,218,26,92,165,63,252,42,23,70,91,248,172,191,223,218,163,63,216,63,170,63,53,129,88,128,228,77,182,191,213,193,89,122,125,140,187,63,14,116,108,22,134,238,181,63,164,140,76,32,126,180,181,191,23,60,11,98,58,85,184,191,11,27,28,60,93,163,186,63,8,74,196,124,253,160,184,63,54,75,169,97,203,217,184,191,30,141,0,86,40,151,170,191,224,91,93,13,242,240,171,63,97,32,103,84,201,164,164,63,214,160,255,138,176,17,169,191,217,151,58,97,240,47,167,191,92,217,22,145,41,204,165,191,137,244,66,43,128,28,165,63,18,200,100,184,254,87,164,191,68,224,99,244,143,138,165,191,186,103,26,29,186,165,182,191,53,26,194,208,150,252,181,191,152,63,49,42,189,33,185,63,214,44,187,182,1,107,183,63,38,246,134,146,157,145,186,191,175,205,78,177,122,210,184,191,205,156,55,99,8,139,188,63,11,26,93,40,34,162,185,63,51,80,110,35,44,9,170,191,125,45,110,86,202,233,167,191,117,149,112,241,239,128,173,63,167,116,72,225,43,126,168,63,81,187,114,14,105,1,163,191,26,4,46,73,232,137,161,191,162,175,161,233,28,151,183,191,210,76,12,88,83,38,185,191,137,84,80,94,143,152,183,191,78,117,20,37,204,130,181,191,1,144,192,72,81,164,186,191,189,39,190,7,22,24,186,191,61,134,11,218,43,96,187,191,77,230,20,123,29,170,185,191,5,32,185,154,219,242,170,191,54,169,137,250,209,125,171,191,7,208,225,253,240,19,169,191,148,98,233,238,15,237,165,191,131,81,252,232,39,169,193,63,148,0,196,239,110,43,205,63,20,119,13,226,203,158,237,63,144,178,185,58,184,240,187,63,200,186,102,160,202,150,237,63,140,255,86,221,174,36,193,191,169,195,189,57,233,205,240,63,205,176,54,47,230,181,240,63,145,112,250,36,240,255,210,63,33,237,20,141,164,206,222,63,61,103,18,59,177,40,245,63,246,76,15,204,157,119,172,63,3,48,156,195,127,57,182,63,241,145,202,56,2,154,193,63,95,180,201,178,186,152,217,63,171,190,82,193,237,169,185,191,111,249,212,60,240,208,189,191,109,102,215,226,224,116,210,191,42,45,209,200,65,163,208,63,68,171,94,132,224,164,198,63,135,39,163,170,179,109,209,63,99,180,39,237,189,238,233,63,202,223,144,49,217,200,187,63,72,147,251,202,221,190,237,63,123,129,65,28,190,228,178,191,27,166,207,24,193,211,229,191,10,94,109,65,236,46,237,191,158,20,15,45,125,120,191,63,84,49,50,15,12,175,201,191,58,90,34,78,66,135,193,191,218,187,229,186,49,119,179,63,213,239,94,136,7,94,168,191,144,63,208,141,230,43,177,63,78,165,208,170,91,193,176,191,142,252,61,253,97,198,163,191,34,121,219,88,64,4,188,191,5,61,111,202,78,77,184,191,192,135,226,178,125,134,193,191,63,235,252,71,185,27,181,191,34,251,29,113,64,47,202,63,234,2,172,194,21,196,185,63,80,126,221,203,26,87,210,63,221,22,146,118,150,220,228,63,196,220,184,12,120,171,177,63,183,166,230,29,42,66,225,191,225,150,217,251,91,4,233,191,59,16,240,80,171,222,229,63,5,3,254,199,47,85,196,63,206,67,44,70,239,34,178,191,131,255,79,11,185,42,179,191,146,176,139,162,52,148,173,191,38,210,111,13,198,94,173,63,67,149,131,109,189,188,164,191,14,241,213,111,139,233,160,191,95,110,185,153,80,211,193,191,187,5,173,97,137,19,175,191,165,21,252,182,102,201,187,191,146,160,57,198,162,170,177,191,147,215,209,245,118,108,173,63,42,48,27,93,178,58,205,63,228,26,32,185,39,215,226,63,45,14,118,111,173,244,225,191,208,60,251,11,169,39,194,63,182,149,104,230,50,133,219,63,115,174,176,75,163,17,188,191,76,253,145,241,70,209,219,191,41,169,68,79,85,135,178,63,248,41,69,198,102,5,193,191,166,32,161,166,35,97,187,63,115,187,219,51,76,193,179,63,50,63,119,209,154,238,180,191,153,92,62,54,102,125,158,63,93,108,204,44,175,192,157,191,232,127,223,78,48,109,149,191,164,69,145,238,117,201,189,191,71,159,46,162,152,170,159,191,178,68,208,166,32,72,184,191,18,43,245,211,121,161,181,63,71,60,227,27,223,183,161,63,63,102,203,144,140,11,195,63,195,249,110,71,239,87,180,63,89,139,232,17,209,109,214,63,129,53,191,2,38,140,174,191,111,108,200,11,4,124,211,191,186,90,0,11,122,95,167,63,36,194,220,205,239,24,222,63,25,7,213,84,206,84,170,191,80,215,180,59,248,194,219,191,150,191,79,119,127,78,176,63,169,214,97,118,31,72,176,63,150,28,148,145,251,124,176,191,159,127,153,209,209,229,194,191,53,73,128,62,93,252,160,63,156,211,31,246,17,111,159,191,169,138,203,15,39,47,170,191,98,199,8,45,184,39,160,191,83,134,22,246,44,178,180,191,104,128,231,51,166,76,176,63,207,245,34,0,171,237,146,191,185,172,79,224,45,79,176,191,37,124,15,178,171,46,180,63,72,249,230,224,55,8,147,63,218,136,78,85,1,130,177,63,245,206,106,195,186,219,172,191,133,246,132,113,203,42,146,63,219,163,157,80,70,84,211,63,93,161,106,25,137,140,219,191,235,208,174,175,32,120,171,63,24,182,229,97,112,211,198,191,142,140,199,94,38,160,128,191,64,147,134,204,122,188,211,63,131,84,200,252,102,115,192,191,96,9,184,79,95,36,130,63,125,176,228,201,120,79,177,63,107,137,74,61,150,32,173,63,38,144,236,25,159,104,146,191,161,109,132,189,205,133,168,63,21,203,43,191,202,104,137,63,250,189,248,115,153,66,160,63,171,231,93,193,237,207,147,191,249,99,86,174,51,69,188,63,116,236,228,5,232,42,136,191,96,28,84,191,117,24,169,191,115,181,246,170,200,252,156,63,154,48,213,38,189,82,181,191,18,130,141,249,38,112,127,63,150,208,93,219,115,10,206,63,223,20,114,200,237,19,191,63,44,133,75,252,195,63,214,191,206,114,3,204,119,1,208,191,137,171,210,241,132,249,192,63,202,87,253,175,171,84,160,63,231,36,176,107,166,18,171,191,191,62,189,164,20,74,126,191,173,223,221,214,94,208,177,63,235,73,178,147,30,117,168,63,26,164,23,99,180,217,187,191,148,86,8,233,3,141,208,63,126,149,249,233,119,232,173,191,52,243,189,176,118,214,208,63,71,85,241,209,11,228,170,191,63,208,68,112,38,249,194,63,5,74,147,23,147,251,177,191,233,75,229,29,56,150,195,63,98,185,227,226,224,3,166,191,209,36,135,36,118,27,180,191,180,190,161,212,143,249,177,191,97,156,139,190,221,148,164,191,135,52,91,64,127,7,153,191,181,94,22,88,116,138,161,63,51,55,133,245,125,119,175,63,208,208,229,80,52,98,176,191,143,161,219,161,33,32,171,63,194,166,192,76,32,139,147,191,126,125,64,140,133,190,180,191,16,79,176,218,31,141,167,63,69,207,66,90,127,89,191,63,221,191,233,12,167,114,167,63,95,15,74,211,165,239,189,63,148,54,64,83,201,36,168,63,193,63,150,101,14,103,203,63,211,143,117,13,1,36,171,63,64,140,33,79,218,58,207,63,33,141,192,28,78,105,163,63,115,159,116,87,219,19,178,63,11,115,77,231,152,211,169,63,63,87,81,67,239,118,181,63,110,77,220,227,218,175,173,191,89,35,118,64,32,66,149,63,255,46,189,73,209,91,161,63,48,135,56,217,125,237,145,63,143,252,117,239,31,105,168,63,51,158,38,71,221,26,174,191,227,205,41,189,3,200,168,63,168,144,80,210,47,171,142,191,169,93,4,105,202,111,171,191,37,181,13,173,147,193,192,63,162,91,233,111,100,184,206,63,37,57,236,59,7,10,195,191,214,218,161,163,65,119,190,191,31,57,190,140,188,127,171,191,22,63,88,20,88,218,173,191,214,237,186,42,238,190,141,63,95,97,36,254,96,142,174,63,157,123,61,192,187,230,172,191,28,67,49,151,49,224,168,63,139,197,169,216,153,162,184,63,92,241,130,216,144,143,201,191,195,3,147,239,49,141,186,63,46,38,244,242,249,96,179,63,76,183,254,232,11,243,159,191,203,77,131,214,65,46,170,191,171,190,59,150,161,8,167,63,167,69,206,207,17,185,159,63,161,71,29,104,226,224,139,191,42,231,15,152,4,44,193,63,118,72,146,128,94,186,164,191,73,142,171,141,168,97,193,191,93,241,222,161,193,36,162,63,231,178,37,181,252,178,167,63,255,24,32,247,237,146,170,191,16,189,161,37,59,110,138,191,247,7,77,68,17,181,163,191,21,149,116,160,175,208,167,191,18,219,36,73,255,238,162,63,224,163,139,166,156,208,164,191,168,100,217,88,65,197,169,191,33,148,2,24,233,96,148,63,250,196,202,209,139,47,164,63,50,7,43,120,170,247,167,63,48,235,179,207,31,179,162,191,248,18,85,97,28,212,156,191,187,91,43,227,216,103,157,63,94,43,100,67,1,167,184,63,143,255,50,94,189,13,172,191,238,208,22,116,74,25,187,191,115,39,53,228,206,136,148,63,106,163,197,155,147,153,160,63,6,212,66,204,121,181,150,191,74,138,182,200,3,151,161,191,120,189,54,208,13,250,160,191,145,88,165,19,80,145,166,191,9,101,145,34,14,102,180,63,194,147,248,205,252,186,186,191,96,123,226,61,251,48,165,63,152,191,139,134,229,182,162,191,58,240,100,229,54,58,176,63,95,97,2,127,245,79,183,191,172,107,146,240,4,219,144,191,190,156,120,44,241,181,170,63,245,251,229,123,20,131,161,63,110,142,188,235,56,59,139,63,73,107,217,25,243,138,144,191,122,125,67,69,120,195,166,63,23,218,81,31,168,87,184,191,172,8,222,47,143,194,167,191,162,238,111,247,204,29,188,63,146,196,86,179,220,2,200,191,159,80,227,51,77,29,157,63,192,3,92,18,41,144,163,191,84,21,195,39,238,91,137,63,40,111,12,63,68,153,186,191,214,134,81,110,222,92,172,191,102,9,168,124,83,199,169,63,17,112,96,7,112,139,189,63,105,211,250,141,246,174,192,191,156,139,162,74,110,33,160,63,14,157,106,51,237,156,161,191,186,226,212,86,105,25,155,191,82,214,139,230,161,145,160,63,252,233,116,117,129,44,138,191,170,148,207,185,211,124,135,63,3,5,37,150,187,17,181,191,4,128,98,195,209,80,155,191,179,244,202,212,180,118,167,191,247,110,252,231,201,11,180,63,76,179,162,20,13,85,152,63,232,156,14,175,206,201,178,63,98,40,94,183,119,9,165,63,167,82,223,80,158,124,164,191,120,220,33,221,144,128,166,63,235,51,73,223,48,252,166,191,95,242,77,198,186,249,182,191,43,47,239,237,187,190,154,191,100,171,207,201,241,77,163,191,186,215,242,239,129,134,153,63,52,35,228,212,231,184,178,63,59,207,5,176,245,174,178,63,123,5,109,242,5,28,161,63,237,45,228,95,130,58,168,191,249,255,232,138,58,89,176,63,233,129,141,207,119,171,165,191,107,40,236,111,231,205,136,191,80,49,203,155,3,24,176,191,50,44,109,102,199,14,164,63,149,21,184,251,150,0,142,191,232,108,224,251,207,21,153,191,76,4,168,11,144,196,142,63,121,45,28,51,204,59,177,63,255,0,176,244,17,164,167,191,104,73,243,5,126,245,134,63,209,117,249,7,94,234,154,63,212,28,222,168,212,78,160,63,225,163,44,65,57,12,178,191,140,117,93,186,173,240,162,191,122,86,113,221,166,195,168,63,183,115,189,214,121,26,156,191,112,232,98,72,238,229,139,191,144,69,166,75,28,28,169,63,212,221,55,11,95,1,139,63,210,89,7,188,30,174,160,63,106,246,86,185,226,150,176,191,205,46,33,127,148,28,163,63,31,90,243,157,132,76,156,63,87,82,144,157,70,93,176,191,197,129,30,22,86,15,169,191,168,56,103,177,108,157,149,63,4,247,145,56,182,239,168,63,172,217,28,22,76,226,116,191,210,159,109,240,186,235,149,63,163,93,2,163,61,186,160,63,133,153,139,209,92,42,115,63,145,101,40,251,248,116,175,191,233,53,10,102,245,44,147,191,223,233,48,196,35,100,159,191,180,73,55,116,88,107,150,191,172,93,149,202,102,247,165,63,102,57,6,197,227,62,171,63,64,229,23,75,54,196,160,191,73,185,8,203,115,41,160,63,203,201,228,14,135,14,158,63,5,12,104,147,149,166,150,191,109,107,120,231,117,200,144,191,94,174,173,240,231,189,146,63,252,13,183,153,144,55,168,63,247,123,163,63,62,47,157,63,26,245,129,60,203,78,161,63,34,63,72,171,107,159,147,191,84,222,149,153,91,240,177,191,91,121,62,63,229,214,151,191,118,4,214,182,65,220,150,191,59,159,225,241,192,181,157,63,233,4,72,253,81,74,142,63,213,108,154,123,12,221,173,63,53,182,141,116,175,185,140,63,10,91,24,38,234,221,168,63,252,75,85,255,11,67,135,63,216,86,95,195,40,133,138,63,36,90,109,69,166,151,149,63,242,77,13,16,208,235,146,63,192,191,96,198,0,189,163,63,185,166,152,238,22,16,163,191,107,101,94,47,73,155,149,63,105,189,188,61,38,6,159,63,111,169,26,181,198,146,144,191,244,223,185,66,25,166,168,191,155,117,192,46,152,13,165,63,79,222,164,74,218,83,143,191,28,69,184,210,125,253,152,63,233,234,184,194,17,80,176,63,117,190,240,242,35,44,161,191,78,27,40,21,50,82,163,191,161,58,148,117,168,118,146,63,211,147,134,211,15,137,149,63,95,57,103,115,153,172,156,63,237,222,84,148,3,241,160,191,0,145,149,9,188,68,135,191,187,60,99,56,151,48,156,191,66,102,45,190,34,156,164,63,238,92,132,120,32,157,146,63,244,148,122,48,234,5,176,191,188,195,119,105,143,215,148,63,145,9,239,210,88,106,156,63,63,203,154,81,29,33,160,191,176,250,140,216,164,4,163,63,173,100,194,75,41,110,159,63,26,193,248,1,233,4,153,191,239,132,33,179,219,219,164,191,146,23,250,100,95,50,154,191,61,72,61,51,52,92,145,191,107,47,131,45,26,241,163,191,95,198,149,191,17,105,152,63,229,26,219,73,204,169,152,63,3,201,133,117,213,91,149,63,237,131,92,162,134,191,152,191,49,235,201,119,171,140,158,191,89,244,200,230,212,17,157,191,145,86,171,199,231,180,147,63,202,94,110,119,139,242,161,191,212,217,25,99,44,122,151,63,172,45,199,179,238,35,148,191,75,235,246,182,180,203,146,191,196,58,36,55,2,251,153,191,144,201,76,198,96,75,142,191,222,40,145,95,63,15,163,63,158,105,130,252,241,126,152,191,60,6,103,126,160,88,168,191,251,91,201,211,149,170,149,63,131,56,223,77,182,232,167,63,235,182,10,4,207,234,165,63,55,9,169,112,72,248,147,191,230,147,92,244,130,83,166,191,151,62,211,206,37,208,161,191,29,95,232,210,148,133,144,191,160,187,3,177,231,126,172,191,68,229,166,126,85,144,172,63,27,173,225,183,210,253,156,63,170,140,223,95,106,78,168,63,146,12,190,16,43,195,137,191,250,66,26,15,32,195,169,191,73,173,13,108,110,218,144,191,36,43,2,108,167,135,170,191,147,141,202,207,45,101,130,63,236,132,172,235,22,229,175,63,48,37,239,216,17,34,146,63,35,73,63,78,22,155,165,63,175,31,231,202,94,192,132,191,141,80,206,203,246,145,171,191,22,108,32,131,57,97,143,191,98,135,124,75,78,6,166,191,118,203,17,32,33,250,135,63,130,178,58,181,11,117,172,63,18,19,21,24,153,183,141,63,49,106,25,153,102,220,151,63,30,0,243,105,79,1,134,191,221,118,77,214,192,142,163,191,116,52,82,128,144,147,128,191,85,219,160,50,28,46,143,191,53,135,70,181,73,179,156,63,51,6,240,160,48,99,126,63,83,168,77,96,158,160,160,63,61,56,248,213,35,241,159,191,139,56,112,101,171,47,125,63,195,229,219,67,109,5,122,191,254,152,117,70,69,95,146,191,230,194,111,172,52,188,141,63,202,41,241,99,102,57,165,63,231,236,163,148,70,91,166,191,165,208,126,192,174,176,148,191,30,60,100,134,82,149,154,191,230,107,4,149,60,179,153,63,108,247,45,42,228,51,151,63,71,156,140,162,180,97,169,63,178,30,129,242,21,186,139,191,244,130,140,114,81,235,170,191,143,222,56,213,142,156,156,191,4,27,214,124,16,13,159,191,4,227,233,110,220,27,142,63,109,248,86,49,150,242,159,63,109,249,2,47,92,182,148,63,62,161,243,1,85,87,168,63,124,48,59,123,37,16,144,191,214,59,155,168,14,110,169,191,13,26,19,157,102,169,148,191,64,135,255,226,34,212,151,191,244,169,174,197,249,158,137,63,20,104,159,6,2,55,158,63,101,251,66,208,211,236,122,63,233,37,36,109,97,106,153,63,164,72,236,62,34,218,152,191,81,241,40,200,103,61,160,191,71,76,13,135,48,116,152,63,242,20,148,91,79,69,129,191,164,27,90,170,86,195,138,63,237,241,156,214,105,197,155,191,241,193,118,145,160,127,153,63,141,70,69,143,42,18,152,63,250,245,147,35,44,251,148,191,119,76,23,195,174,75,152,191,251,198,59,166,57,32,155,63,99,249,101,75,12,177,147,63,98,232,81,199,93,177,149,191,223,101,254,8,226,62,152,191,15,200,77,24,5,157,149,63,160,95,178,151,220,142,147,63,112,22,204,192,184,120,145,191,96,135,41,216,3,29,119,191,112,157,178,37,215,199,174,191,148,213,122,206,230,199,166,191,85,53,208,93,40,59,166,63,159,227,55,236,136,205,151,191,29,51,246,51,219,188,156,63,221,166,79,167,43,173,171,191,181,0,24,42,89,14,175,63,228,112,191,79,246,250,160,191,237,235,226,144,83,29,155,63,208,20,63,110,134,16,159,191,167,167,24,156,222,171,165,191,251,89,133,17,76,196,160,63,101,182,198,217,49,104,166,63,180,244,129,29,196,111,143,191,2,111,106,69,122,162,166,191,255,34,29,98,148,156,138,63,132,102,122,204,38,51,165,63,9,116,165,64,91,251,144,191,172,211,169,175,37,145,168,191,24,77,153,70,146,87,146,63,160,15,251,136,216,193,168,63,118,5,48,76,157,91,134,191,135,148,32,86,156,97,171,191,15,178,241,231,136,206,131,63,0,141,253,131,31,251,171,63,213,82,141,212,151,149,139,191,122,254,169,1,66,148,155,191,131,164,173,118,62,70,142,63,168,8,74,68,110,205,155,63,24,34,190,92,13,138,134,191,121,61,152,96,139,139,165,191,53,223,149,88,5,162,131,63,11,158,136,137,220,72,165,63,212,76,42,21,125,42,128,191,78,160,221,50,249,77,130,63,98,125,250,161,237,12,128,191,82,207,142,227,32,128,149,191,76,190,97,186,203,174,123,63,190,218,20,172,178,216,149,63,128,149,80,216,8,200,141,63,19,186,193,111,79,124,155,63,194,222,51,51,157,31,145,191,88,132,104,169,49,231,155,191,39,60,74,237,61,16,154,63,173,49,102,52,191,42,153,191,159,246,49,170,92,57,149,63,81,238,11,193,107,141,160,63,169,139,212,224,120,200,151,191,66,103,166,37,249,124,161,191,211,56,120,77,235,243,140,63,172,42,114,1,87,224,162,63,114,131,205,32,219,15,134,191,62,166,105,27,12,95,163,191,22,192,48,219,51,126,145,63,54,37,107,84,190,138,155,63,95,123,161,216,181,200,145,191,172,199,130,61,154,126,156,191,16,248,197,89,100,121,135,63,31,200,253,108,22,212,161,63,248,217,11,49,190,128,136,191,177,57,22,172,64,255,160,191,212,118,255,191,96,58,141,63,159,156,90,123,167,54,137,191,212,207,241,104,183,3,150,63,3,145,129,85,204,217,146,191,80,220,110,42,50,65,152,191,22,102,13,210,126,101,147,63,234,87,93,69,130,218,152,191,139,203,156,222,68,134,149,63,76,81,68,38,199,78,147,191,157,249,191,1,230,222,150,63,224,226,111,132,35,183,132,191,114,58,189,22,104,62,148,191,87,144,234,68,161,123,134,63,149,53,49,189,222,19,145,63,98,5,65,216,210,116,151,191,36,247,234,196,5,110,155,63,202,212,96,137,64,82,146,191,132,105,184,37,236,24,145,63,247,126,6,40,43,56,149,191,15,208,105,214,190,124,149,63,245,241,99,147,215,68,138,191,225,73,11,247,234,43,138,63,241,207,7,229,81,7,112,191,155,55,22,235,64,168,165,191,247,188,28,17,19,0,170,191,72,80,208,182,125,77,163,191,243,233,175,125,43,225,168,191,18,181,115,184,165,111,156,63,40,144,85,133,4,68,167,191,88,119,7,139,39,21,176,63,124,46,92,136,61,220,120,191,169,251,52,234,71,213,117,63,160,127,130,237,48,136,156,191,75,70,4,54,41,211,154,63,79,155,172,200,24,151,166,191,183,73,226,77,122,209,171,63,112,144,43,244,89,95,171,63,83,158,117,163,114,168,132,191,112,207,177,120,148,224,171,191,60,122,147,52,152,245,133,63,125,124,151,137,78,197,163,63,248,88,164,47,237,153,151,191,226,234,32,71,153,235,155,63,177,166,163,115,130,200,170,63,112,221,90,115,244,30,127,191,234,197,238,206,108,68,159,191,38,23,112,63,230,224,125,63,37,204,200,13,25,213,144,63,219,44,67,132,171,149,166,63,193,86,21,153,80,93,145,191,175,22,173,122,109,134,164,191,66,110,8,187,3,106,167,63,199,136,85,218,74,102,150,191,181,71,169,188,181,117,166,63,205,62,154,245,207,108,158,191,9,186,18,4,62,7,146,63,204,44,102,45,63,155,157,63,150,86,232,204,244,178,141,63,119,140,246,57,121,171,157,63,231,120,147,211,160,2,150,191,85,230,205,234,113,167,134,63,51,32,128,227,24,59,133,63,120,198,135,17,28,137,161,191,141,192,134,42,221,66,160,191,214,18,29,176,230,146,149,191,190,44,72,196,111,237,169,191,29,189,38,248,239,170,146,63,128,215,175,175,137,47,146,191,133,161,31,84,224,59,165,191,47,24,46,39,138,102,165,63,212,63,137,129,105,153,148,191,73,145,7,126,140,68,165,191,38,170,99,169,217,227,145,63,190,232,131,52,212,141,153,63,16,46,41,167,37,33,141,191,209,195,17,114,199,181,154,191,81,118,27,141,173,30,149,63,229,171,42,152,29,122,159,191,75,88,193,158,57,226,151,191,188,74,191,67,148,182,153,191,152,17,58,209,230,78,155,63,64,78,54,246,197,67,152,191,32,158,166,244,93,148,159,63,0,201,194,221,95,231,151,63,17,222,239,158,228,248,169,191,231,245,203,133,174,180,171,63,86,13,249,244,211,185,166,63,19,250,172,104,203,158,176,191,119,37,159,115,134,2,174,191,50,180,196,190,126,113,175,63,250,28,255,2,238,178,167,63,170,15,41,143,77,118,167,191,145,97,132,111,60,87,158,191,223,240,104,150,220,173,165,191,109,208,119,3,5,121,162,63,210,45,71,23,247,158,152,63,143,233,9,63,136,39,162,63,131,108,159,231,28,156,141,191,105,124,73,110,142,30,159,191,129,159,100,196,48,116,147,191,21,177,89,66,255,236,166,191,139,213,198,70,129,197,149,63,236,128,139,141,244,176,143,63,16,139,254,71,164,218,163,63,101,13,204,160,60,211,157,191,193,117,146,153,59,126,135,191,217,84,93,79,100,80,158,191,97,213,96,23,16,150,134,63,115,233,85,222,218,120,137,63,92,145,65,59,242,206,159,63,141,54,230,238,121,194,131,63,163,76,112,147,45,60,153,191,236,148,139,140,21,249,143,63,124,198,236,47,107,190,160,63,22,103,190,201,251,183,146,191,111,32,221,48,186,229,154,191,247,237,106,213,130,105,154,191,182,181,251,57,189,40,145,63,252,150,165,229,160,92,157,63,109,121,50,101,165,18,140,63,215,151,171,90,92,109,160,63,222,153,16,141,253,50,147,191,126,137,147,103,243,255,148,191,83,152,238,46,133,183,144,191,245,169,164,218,212,137,162,191,219,250,115,163,22,132,156,63,141,54,148,121,195,89,150,63,102,93,236,113,254,125,160,191,137,144,249,178,18,37,151,63,20,163,133,141,48,42,144,191,248,226,181,168,140,225,149,191,69,72,159,239,102,73,155,63,48,132,74,164,176,235,153,191,102,126,228,3,75,112,150,191,192,111,197,90,73,6,149,191,141,252,80,77,184,222,147,63,228,159,233,92,251,137,151,63,27,128,119,184,152,95,178,191,73,34,53,57,49,212,177,191,118,114,125,88,136,148,177,63,178,10,198,232,149,90,178,63,216,137,79,108,83,140,173,191,216,170,123,101,85,197,167,191,128,83,210,195,109,190,173,63,22,70,120,107,166,58,168,63,184,27,57,40,140,16,163,191,24,23,110,85,52,149,162,191,220,133,229,239,17,151,153,191,48,19,40,183,24,214,157,191,216,95,28,159,51,189,161,63,254,89,72,184,184,79,156,63,2,168,75,193,8,185,138,63,186,60,225,1,59,239,137,191,14,51,122,182,173,85,151,191,82,133,204,193,71,185,162,191,140,53,6,172,169,68,146,191,2,128,167,69,31,92,161,191,218,139,85,124,27,148,135,63,53,192,244,231,14,54,131,191,35,118,158,104,168,161,156,191,69,230,244,83,12,48,159,191,238,116,40,51,57,211,135,63,154,112,180,137,130,70,155,63,37,89,82,182,75,219,157,63,213,171,54,215,80,36,146,191,22,47,176,46,220,142,148,191,115,197,171,37,55,235,145,191,122,196,181,124,233,47,145,63,2,172,231,133,231,209,156,63,244,183,177,220,58,125,135,63,82,67,184,182,203,145,158,63,134,251,15,179,241,121,144,191,41,104,42,104,152,112,149,191,23,181,217,11,54,3,136,191,166,138,187,10,211,43,147,191,211,118,58,129,15,236,147,63,234,208,1,38,1,77,149,191,198,23,242,62,80,133,151,191,220,5,215,4,111,84,154,191,76,222,151,215,136,17,146,191,100,30,182,162,192,74,150,191,174,228,109,127,33,23,149,63,171,32,218,0,172,88,177,191,237,17,38,74,136,211,176,191,178,230,11,190,11,233,177,191,111,109,202,253,97,148,178,191,124,148,196,18,77,189,144,191,183,246,71,125,215,180,174,191,55,90,112,55,165,138,172,191,158,18,91,185,163,148,174,191,227,93,173,151,222,238,175,191,164,127,113,42,10,208,160,191,104,220,8,208,97,245,154,191,218,28,167,209,61,201,161,191,250,204,99,193,129,94,161,191,52,2,143,250,250,4,161,191,139,69,213,16,241,63,160,191,86,123,98,251,186,129,142,191,38,208,156,118,216,243,154,191,36,15,122,177,51,219,145,191,220,35,101,91,152,71,158,191,238,39,134,183,17,203,146,191,223,162,51,132,150,193,148,191,69,173,92,4,36,194,147,191,2,16,132,127,227,111,148,191,45,89,53,54,212,215,128,191,62,241,235,10,208,50,130,191,98,167,27,164,82,238,144,191,24,136,240,108,66,245,151,191,161,178,5,140,45,228,148,191,108,169,59,221,152,85,144,63,205,31,216,243,34,207,145,63,224,185,118,159,231,149,151,63,44,208,254,220,17,214,147,63,140,184,232,152,151,222,135,63,67,232,194,138,13,75,149,63,70,150,201,143,137,18,139,63,177,206,148,117,172,251,148,63,124,203,113,26,185,59,138,63,75,175,61,8,84,218,151,63,164,140,199,26,211,212,136,63,177,153,231,2,9,143,146,63,51,4,201,140,244,87,144,63,203,0,43,12,102,61,141,63,93,223,10,10,144,87,146,191,7,240,84,106,127,51,150,191,74,6,64,14,205,225,144,191,223,248,201,228,154,181,146,191,197,58,31,135,93,152,144,191,159,75,173,14,7,191,145,63,117,69,49,10,107,4,162,63,229,27,69,207,208,35,158,63,211,79,132,217,218,120,154,191,114,165,58,201,213,115,173,191,120,246,153,16,186,142,172,191,207,250,103,178,84,175,177,191,224,244,244,13,54,138,180,191,190,12,64,193,41,73,160,63,118,188,111,187,82,111,159,191,8,67,215,27,51,240,176,191,46,185,240,102,39,73,172,191,42,172,150,15,26,59,177,191,87,203,180,215,242,118,175,191,163,68,44,18,115,14,148,191,174,190,180,248,19,57,147,63,165,233,149,217,0,55,159,191,28,108,148,179,74,0,160,191,22,135,103,36,57,121,165,191,148,66,227,85,167,77,159,191,149,175,35,3,70,113,155,191,174,217,142,36,51,41,160,191,184,194,6,55,14,34,146,63,181,84,214,17,90,223,149,191,223,103,100,49,185,42,150,63,244,252,143,34,121,179,148,191,163,161,5,204,124,6,144,191,130,108,229,133,57,117,159,191,80,227,32,138,191,37,150,191,199,18,225,191,252,70,153,191,141,188,107,165,95,17,156,63,193,199,107,204,36,37,155,63,191,160,115,40,25,113,154,191,113,161,156,90,65,178,155,191,106,66,77,29,217,191,156,63,189,9,49,15,47,45,148,63,121,187,209,48,54,69,152,63,105,119,55,187,32,138,145,63,20,64,105,58,22,49,156,63,94,37,220,15,213,82,144,63,241,69,170,203,251,141,147,63,33,248,134,224,174,211,160,63,20,247,188,26,225,33,145,63,62,243,132,209,202,166,147,63,205,218,176,78,224,6,148,63,249,113,99,106,190,236,152,63,10,113,205,123,32,210,160,63,217,230,40,202,142,128,172,191,212,34,11,147,168,223,183,191,98,198,193,125,132,196,172,63,178,84,27,56,175,104,182,63,153,61,35,227,174,239,148,63,61,34,44,237,128,42,161,191,245,92,104,41,199,58,181,191,93,152,183,233,153,157,181,191,45,163,180,76,81,91,176,63,244,0,143,112,62,99,179,63,84,143,37,135,100,193,162,191,88,80,20,240,235,176,160,191,134,158,37,165,1,197,161,191,65,167,100,103,204,146,154,63,8,75,189,200,131,186,160,63,91,234,151,55,208,7,158,63,214,103,223,189,236,17,145,63,90,204,248,209,105,157,146,191,120,87,221,238,240,146,147,63,222,1,105,135,52,214,143,191,42,39,31,241,113,90,145,191,185,218,154,166,173,110,154,191,166,149,92,35,92,5,145,191,198,113,58,116,74,132,157,191,47,73,77,47,254,216,141,63,180,151,118,211,184,18,157,63,196,63,220,106,217,252,149,191,188,169,97,207,211,214,153,63,250,155,233,90,67,136,152,63,66,147,89,144,83,1,151,63,9,203,208,146,81,21,154,63,173,228,103,19,158,250,143,63,89,181,204,219,77,60,149,191,165,62,80,161,167,150,150,191,21,73,177,218,22,132,149,63,199,49,249,118,104,130,150,63,193,96,167,87,152,226,152,63,60,46,166,93,155,116,177,191,102,208,252,182,63,4,177,63,168,88,23,237,93,239,179,63,21,21,92,52,45,243,182,191,7,17,206,198,75,86,151,63,31,61,190,250,62,0,159,191,92,73,251,9,100,90,150,63,87,193,14,184,210,12,176,191,213,185,208,22,205,153,165,63,87,120,95,9,67,54,183,63,103,67,169,252,173,31,178,191,162,150,123,172,171,193,146,63,223,123,10,141,53,45,143,191,104,1,47,46,156,70,147,191,141,192,16,83,168,48,147,63,114,22,188,63,218,217,163,191,10,221,74,184,172,225,152,191,139,212,42,91,217,102,156,63,45,38,89,129,120,246,156,63,50,19,35,225,18,172,162,63,151,239,69,96,150,147,155,191,241,191,74,125,40,231,143,191,173,147,93,178,129,59,154,191,249,24,191,90,203,66,157,63,30,19,233,134,119,168,144,63,212,134,243,112,211,127,147,191,1,196,183,237,169,208,148,63,38,137,243,203,81,153,156,191,252,7,121,110,238,234,142,191,147,129,0,218,99,211,142,63,130,35,134,49,1,28,143,191,197,25,31,26,234,153,150,191,155,2,171,236,161,195,146,63,200,198,17,153,10,81,144,191,108,93,135,54,102,19,146,63,89,92,105,0,232,239,146,191,61,143,75,59,202,66,147,191,182,3,238,58,247,174,145,63,40,160,41,11,44,212,144,63,37,226,0,123,86,19,158,191,17,179,76,56,13,52,146,191,121,25,204,111,2,238,178,191,155,186,149,56,75,54,179,63,246,143,129,108,8,81,173,191,231,192,23,73,240,192,171,63,110,217,196,136,81,105,153,191,123,74,78,18,234,134,177,191,244,103,105,188,193,150,178,63,30,249,193,91,167,196,174,191,21,28,84,28,36,185,171,63,201,158,225,115,187,151,164,191,149,6,1,2,5,53,162,63,206,54,245,253,145,105,155,63,63,84,67,34,10,196,156,191,245,178,239,136,104,77,156,191,156,188,171,116,215,226,156,63,190,63,56,203,79,5,152,63,149,195,92,44,69,15,145,191,148,126,241,230,231,197,145,63,155,88,34,142,40,212,137,191,233,21,100,76,69,97,135,63,232,99,181,255,233,34,144,191,40,55,74,125,208,69,139,63,125,239,120,177,147,186,148,191,107,57,163,117,11,133,147,191,225,45,187,235,231,118,140,63,123,53,1,18,234,205,139,191,244,153,186,188,106,126,146,63,54,42,158,189,15,93,147,191,8,203,253,118,236,63,145,191,255,193,20,90,45,184,145,63,124,132,205,234,33,19,140,191,201,150,31,35,190,8,149,63,236,226,240,92,225,249,146,191,82,229,160,225,11,124,153,191,162,255,39,245,42,209,157,63,19,20,68,212,244,118,153,191,44,133,196,127,33,240,153,63,190,19,76,24,43,216,163,191,94,158,121,190,11,127,160,191,141,242,121,204,71,93,161,191,42,232,70,149,107,156,174,191,32,52,171,74,238,164,176,63,68,242,147,192,32,171,178,191,88,241,37,137,23,201,184,63,100,151,44,7,91,63,156,191,54,71,234,188,116,227,153,63,248,144,244,188,54,155,177,191,96,135,240,149,154,165,175,63,184,101,216,86,114,123,179,191,22,224,221,131,124,196,178,63,95,7,245,145,62,59,162,191,174,48,202,170,166,18,162,63,170,118,196,207,61,45,158,63,222,219,186,83,217,24,161,191,129,180,228,164,26,105,163,63,13,155,246,194,15,61,159,63,253,159,202,176,92,108,144,191,177,12,26,188,244,106,160,191,28,41,0,13,179,136,164,63,158,198,225,163,168,116,146,191,190,224,61,12,105,52,153,63,202,92,89,225,240,67,154,191,248,192,117,206,149,9,150,63,244,38,14,235,203,107,145,191,143,167,87,66,23,0,148,63,250,180,192,233,187,140,151,63,9,128,235,23,148,92,149,191,108,13,96,161,44,225,151,63,60,125,25,224,252,189,147,63,106,92,95,175,143,246,148,63,85,105,196,142,114,201,149,191,208,128,205,206,52,29,148,63,95,148,52,64,161,102,156,191,120,156,174,196,134,56,149,191,25,246,33,169,15,208,150,63,178,165,127,122,137,38,154,191,227,51,23,204,138,33,155,63,104,125,255,187,106,124,149,191,5,219,74,247,110,254,148,63,204,41,99,215,160,99,155,191,176,137,48,207,70,64,174,191,102,112,43,193,200,246,178,63,199,142,204,212,194,21,172,63,127,40,210,236,170,236,176,191,151,57,198,25,181,176,153,191,23,136,75,192,32,29,179,191,59,104,166,64,239,20,178,63,59,225,202,95,143,136,175,63,44,27,59,76,124,160,178,191,236,19,162,243,130,185,152,63,0,17,42,208,91,47,148,191,79,99,96,158,170,238,163,191,170,247,38,220,36,235,157,63,8,154,58,160,245,253,153,63,204,176,135,86,10,246,161,63,205,210,211,29,169,155,157,63,115,54,52,208,209,62,161,191,124,94,123,201,58,15,145,191,200,81,80,100,242,113,146,63,243,247,122,53,195,229,149,191,32,76,235,87,147,99,146,63,49,111,255,65,180,235,152,63,47,218,37,84,108,217,148,191,210,225,143,182,156,37,142,191,232,236,134,233,7,213,152,191,127,246,149,250,197,196,145,191,173,245,56,85,52,152,149,191,201,147,31,116,207,115,178,191,27,17,48,69,36,150,177,191,217,247,207,71,48,227,179,63,57,128,51,170,163,231,177,63,103,69,157,46,58,13,178,191,100,19,209,26,220,203,179,191,126,176,14,158,4,33,180,63,53,161,212,214,125,226,179,63,53,171,65,195,16,96,163,191,190,200,128,131,66,97,166,191,50,11,61,64,203,73,163,63,152,136,111,219,223,14,153,63,85,239,59,215,77,26,163,63,159,78,54,103,153,231,141,191,124,53,167,45,23,176,139,191,54,233,201,240,145,160,157,191,254,115,41,187,176,52,138,63,113,140,6,137,202,138,149,63,152,250,54,242,164,45,144,63,225,132,21,238,93,78,147,191,95,174,74,39,38,201,143,191,199,90,2,154,32,120,150,191,67,236,27,242,212,236,145,63,255,113,116,14,206,114,138,191,91,35,40,6,230,44,136,191,47,203,44,213,160,144,177,191,18,88,41,175,219,198,178,191,234,165,163,216,60,248,179,191,24,239,112,8,209,42,179,191,128,35,189,106,49,36,179,191,31,28,142,213,16,247,179,191,237,166,135,14,41,246,178,191,203,233,189,198,26,170,179,191,118,6,123,75,151,8,165,191,119,185,205,11,187,203,164,191,248,199,104,38,30,57,152,191,198,160,184,6,124,7,165,191,230,144,83,234,85,217,162,191,169,67,53,220,155,104,143,191,40,9,217,225,111,149,152,191,246,163,212,209,212,67,141,191,180,145,89,94,147,151,152,191,26,219,29,172,236,6,137,191,138,68,16,84,31,3,147,63,77,33,171,92,41,81,149,63,168,151,91,214,68,232,207,191,13,168,103,91,70,147,189,191,219,120,34,81,100,98,207,63,67,105,23,82,242,206,200,191,236,55,114,93,160,245,247,63,123,46,252,31,48,133,242,63,115,231,32,32,49,200,238,191,23,193,73,67,39,248,226,191,206,36,253,123,209,116,9,192,172,226,230,202,113,85,6,192,52,251,81,58,91,124,227,63,209,135,7,51,141,204,240,63,0,86,36,123,194,64,236,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102400);
/* memory initializer */ allocate([66,155,235,184,201,186,243,63,98,108,195,19,75,3,237,63,2,108,236,128,68,193,231,63,179,141,161,226,205,103,215,191,58,96,98,125,16,224,240,191,64,162,216,176,114,119,244,191,228,11,36,191,174,177,215,63,115,122,197,37,142,92,212,191,71,229,83,236,255,63,219,191,193,247,156,194,153,235,215,191,247,105,178,69,181,45,238,63,172,169,232,59,212,61,232,63,136,202,94,237,65,26,192,191,135,24,209,240,106,33,208,63,207,20,78,244,150,104,209,63,26,94,49,213,29,249,200,191,49,217,237,104,127,224,194,191,139,251,135,70,192,125,229,63,78,206,171,64,11,24,226,63,238,243,243,243,236,135,208,191,159,240,220,127,196,208,211,191,170,97,38,12,178,241,215,63,36,172,212,139,53,221,234,191,3,199,214,157,247,51,199,191,239,160,85,137,221,37,213,63,172,35,8,70,68,179,213,63,230,73,14,188,28,116,188,191,173,247,74,51,32,191,185,191,145,161,137,157,59,88,201,63,168,165,170,161,213,50,179,63,99,9,4,176,43,188,187,191,79,197,200,158,30,194,200,191,125,31,89,255,15,216,220,63,175,129,233,219,201,251,181,191,65,240,44,156,109,86,199,191,206,107,48,114,56,85,214,63,34,13,16,62,83,91,187,191,221,114,236,55,120,28,188,191,102,115,151,247,80,49,186,63,10,76,143,99,18,184,167,191,102,210,126,182,76,227,164,191,240,16,51,170,6,142,179,191,151,79,107,162,71,103,180,63,170,152,118,82,116,120,178,63,154,122,138,30,120,250,163,191,118,41,236,21,125,242,185,63,67,3,227,67,252,21,192,191,196,170,16,18,219,117,190,191,23,188,1,212,72,66,192,63,120,213,65,234,198,255,210,191,208,255,180,242,153,116,192,191,44,235,133,70,12,191,211,63,138,193,102,50,126,247,185,191,190,208,130,151,134,206,179,63,238,196,71,26,70,85,191,63,26,73,69,24,35,0,158,63,222,96,64,22,98,211,165,191,95,86,206,181,58,234,178,63,203,189,100,24,67,58,161,63,175,90,229,249,201,133,157,63,44,206,103,61,159,162,186,191,83,249,252,71,198,103,190,63,80,189,37,35,91,208,165,63,132,42,105,152,16,81,204,191,31,217,199,11,137,170,165,191,84,192,115,100,64,41,204,63,27,149,17,101,153,16,168,63,58,168,42,227,2,18,194,191,94,187,169,88,149,243,169,191,172,91,37,105,193,209,193,63,178,19,112,79,94,195,155,63,103,207,243,99,188,120,184,63,240,212,62,158,221,120,155,191,62,135,49,164,200,60,144,191,22,249,4,16,66,72,182,63,218,132,130,207,183,192,145,63,20,112,169,21,155,51,181,191,251,85,157,182,183,204,192,191,66,62,88,4,12,237,185,63,115,146,222,123,53,63,196,191,229,225,111,131,37,228,182,63,240,89,86,164,100,158,204,63,147,129,114,116,7,42,196,191,56,89,54,252,170,194,177,191,84,129,227,24,131,60,179,63,230,187,180,98,89,164,180,191,43,147,134,159,98,49,185,191,67,164,47,145,129,107,176,63,238,127,48,77,178,246,193,191,99,22,248,164,203,244,199,191,242,52,168,180,114,175,182,63,9,217,161,120,18,39,193,63,106,27,157,230,205,203,165,63,3,228,77,16,255,101,172,63,224,145,232,171,5,121,166,191,225,96,167,142,112,145,169,191,147,35,153,98,153,197,188,191,0,40,63,124,242,185,172,191,15,89,140,127,223,137,187,191,213,157,147,143,152,128,194,191,139,186,49,17,100,153,193,191,103,246,83,113,61,25,176,63,170,45,143,116,245,200,194,191,25,176,77,197,127,217,191,191,159,150,150,246,42,96,185,191,174,68,140,167,246,255,181,191,231,51,133,141,223,61,171,63,110,101,31,16,131,35,176,63,4,25,53,162,85,126,189,191,215,189,193,15,37,140,179,191,143,40,153,53,112,119,193,63,187,0,1,243,206,247,183,63,199,117,166,162,199,212,169,63,247,127,58,190,234,250,174,63,108,40,41,9,165,158,188,191,224,77,42,73,108,66,192,63,247,6,133,235,178,253,179,63,180,115,225,192,107,255,184,191,164,18,99,236,99,130,164,63,228,83,254,162,106,55,182,191,176,211,135,213,217,124,184,63,93,230,44,134,86,71,186,191,46,246,124,116,223,145,187,63,10,225,41,242,200,11,189,191,124,110,89,171,150,129,189,63,7,226,112,70,161,219,179,191,106,108,24,237,255,10,180,63,189,130,179,182,34,221,168,191,166,233,204,53,17,73,185,191,160,76,193,188,219,160,182,63,19,202,208,182,96,189,190,63,97,225,243,109,125,211,181,191,244,211,227,240,91,251,187,191,25,225,165,125,156,129,188,191,232,235,92,117,121,24,183,63,240,175,25,137,217,181,185,63,138,112,115,127,167,85,184,191,85,245,71,203,24,10,186,191,67,66,12,171,195,86,186,191,127,178,143,169,212,128,185,191,236,179,93,194,39,250,177,191,0,21,190,128,142,51,173,63,82,25,96,66,6,252,189,63,54,182,25,126,221,214,210,191,28,71,169,203,131,35,219,191,164,141,200,145,129,56,210,191,70,9,51,13,31,35,218,63,74,68,205,47,51,47,181,191,41,127,0,76,172,58,189,191,238,251,133,204,248,182,162,63,202,141,69,103,52,187,198,191,95,110,119,179,1,37,180,191,215,89,95,114,0,248,193,63,171,16,174,31,117,127,182,191,227,10,115,242,18,204,197,63,120,174,21,37,232,145,176,63,134,248,109,222,144,251,208,191,54,152,190,136,35,145,196,63,147,224,11,195,215,128,171,191,220,110,87,52,161,176,179,63,135,244,120,100,52,20,156,63,61,15,19,217,168,209,167,191,215,25,232,166,18,255,177,63,187,239,30,239,23,150,166,63,3,18,94,192,40,195,176,191,40,36,197,246,15,52,179,191,247,209,82,105,79,106,194,63,32,199,173,206,71,20,206,191,199,172,198,226,116,184,193,63,249,180,239,236,7,105,204,63,226,210,252,211,86,198,193,191,6,188,168,41,128,1,179,63,17,17,231,205,159,61,166,191,97,192,236,121,133,227,169,191,135,136,141,81,29,28,176,63,242,189,203,28,197,246,180,191,32,111,60,18,141,253,166,63,5,244,61,81,70,134,161,191,236,96,147,41,172,139,189,63,64,191,10,118,181,223,159,63,138,134,71,97,111,54,181,191,155,1,51,46,30,227,162,191,235,87,174,187,118,145,197,63,114,46,86,133,56,215,191,191,85,76,151,165,130,254,198,191,230,58,136,176,207,100,194,63,245,177,101,226,160,169,186,63,243,49,76,176,86,144,197,191,231,64,172,131,20,181,183,191,183,194,138,213,149,241,193,63,23,201,1,112,109,211,194,63,107,191,9,63,240,31,161,191,139,128,200,15,123,229,171,63,14,224,140,178,233,197,180,63,179,134,59,200,111,61,156,191,245,192,107,133,13,248,167,63,92,29,147,215,169,83,193,191,199,5,6,46,64,115,161,63,217,176,66,225,158,193,184,191,58,179,206,68,18,174,152,191,54,197,104,4,31,204,131,191,139,103,171,255,83,60,196,63,144,115,229,20,147,233,180,63,244,85,104,124,189,9,196,191,241,157,6,254,255,11,181,191,64,179,14,134,171,160,206,63,188,30,255,7,228,187,180,63,253,238,63,160,0,117,179,191,77,216,195,252,221,232,175,63,134,86,133,73,118,254,197,63,90,71,205,129,28,129,177,191,231,214,187,88,32,223,192,191,40,147,226,219,200,102,169,63,216,170,54,81,188,190,163,191,0,126,142,220,244,48,197,191,43,72,59,60,193,0,194,191,243,156,69,183,88,23,176,63,204,249,119,158,33,181,193,63,21,211,185,53,185,205,186,191,214,52,99,169,29,78,209,63,18,180,89,95,144,133,188,191,218,146,133,230,38,254,198,191,135,105,26,94,11,53,164,63,60,170,130,47,213,1,141,191,167,138,145,111,72,132,169,63,184,219,151,230,253,189,140,63,126,148,247,105,109,251,194,191,30,13,129,124,14,37,193,191,250,139,69,214,220,45,183,63,155,182,151,139,110,124,183,63,30,67,98,138,212,138,191,191,182,111,126,77,224,78,208,191,103,78,154,194,174,89,190,63,222,149,204,142,37,58,191,63,129,32,169,92,142,200,164,63,28,50,114,111,145,166,166,191,191,105,39,133,73,243,181,191,170,122,135,175,8,250,183,191,19,82,5,75,103,147,173,63,59,125,155,132,119,84,163,63,69,150,150,206,0,221,180,191,250,102,187,122,47,244,176,191,38,105,43,64,51,161,180,191,52,233,209,108,128,94,200,191,47,40,92,154,13,239,174,191,191,220,149,245,124,132,197,191,85,142,183,172,211,201,177,191,16,122,3,9,120,3,173,191,247,144,3,208,23,126,174,191,164,170,46,76,125,253,175,191,151,73,28,134,156,208,161,191,125,176,8,68,11,250,177,63,133,238,79,99,159,167,163,191,28,240,242,75,160,2,172,191,180,125,106,29,53,43,167,63,41,151,36,157,56,201,198,191,132,175,210,215,244,39,169,63,212,70,241,124,208,200,197,191,170,146,188,172,119,199,166,63,44,189,41,66,36,107,183,191,202,61,213,184,97,79,164,63,34,223,102,103,33,77,177,191,171,145,213,136,86,117,176,63,120,94,74,115,104,105,152,63,13,164,47,109,192,183,168,63,43,64,86,143,241,207,184,63,96,102,118,196,173,53,174,63,110,152,77,95,203,225,171,191,64,127,85,201,103,202,172,191,151,59,222,204,22,237,189,191,111,106,50,176,25,179,171,191,45,24,121,56,44,40,204,63,26,20,196,174,232,89,191,63,253,86,191,140,90,165,178,191,83,76,166,12,231,230,183,63,153,193,5,232,232,236,168,63,216,207,12,177,15,11,175,191,14,74,236,39,242,242,166,191,254,49,99,53,118,189,190,191,99,254,209,173,185,115,201,63,74,39,170,39,244,112,172,63,205,167,156,14,42,80,191,191,16,168,89,209,154,130,166,63,153,236,158,149,213,122,176,63,49,111,142,223,245,109,160,63,136,150,190,94,81,27,167,191,32,193,0,105,162,157,180,191,113,44,136,38,112,97,165,191,195,5,171,119,211,199,184,63,192,38,116,236,76,159,196,191,37,185,129,211,218,107,195,63,254,213,67,157,81,52,172,63,93,221,114,184,175,48,164,63,230,210,247,196,11,66,153,63,172,70,157,123,254,244,194,191,233,249,125,91,229,52,195,63,110,196,165,31,155,100,186,191,163,182,222,73,27,77,183,63,251,28,253,83,110,219,163,191,123,77,194,214,67,222,189,191,176,104,253,5,170,207,180,63,40,87,175,229,119,29,196,63,209,229,134,7,166,199,191,191,20,242,170,37,142,171,160,191,60,88,48,190,98,251,188,191,247,157,116,8,82,55,195,191,214,152,44,149,74,234,183,63,174,85,40,125,56,100,191,63,50,217,10,65,53,144,186,191,105,124,14,202,74,191,189,191,152,78,155,43,46,222,191,191,119,7,21,173,184,112,192,191,94,56,67,192,233,186,158,191,18,208,56,158,72,241,155,63,51,23,51,162,124,71,186,191,198,154,183,236,71,165,192,191,92,207,132,94,61,106,205,191,90,50,39,195,196,152,200,191,42,33,42,216,194,186,192,191,160,14,129,48,12,40,169,191,18,107,212,108,243,227,176,63,251,254,167,31,76,52,177,63,123,182,19,66,175,251,179,191,147,175,155,6,110,0,162,191,243,152,128,0,215,28,156,191,27,1,115,5,168,193,169,63,69,43,43,225,165,137,167,191,105,199,76,142,36,93,177,63,104,69,135,62,75,233,164,63,203,23,150,64,100,59,168,191,192,22,99,175,233,113,154,191,74,137,11,73,167,121,146,191,34,73,138,175,78,131,165,63,6,112,84,160,157,26,175,191,142,54,117,49,26,201,168,63,121,0,183,149,7,155,149,191,169,111,185,39,159,28,169,63,40,113,198,98,60,237,140,191,184,192,109,87,119,147,144,191,189,115,237,132,107,210,173,63,194,252,47,187,35,192,163,63,65,129,206,193,254,172,167,191,223,205,182,169,115,117,160,191,66,48,229,12,17,129,183,63,248,113,164,44,166,72,182,191,40,184,136,76,5,181,170,63,77,44,190,3,119,38,165,191,238,84,136,95,191,255,164,63,126,243,65,99,65,70,176,63,201,130,167,59,246,204,151,63,79,46,246,245,201,67,168,191,89,87,137,194,36,203,138,191,56,202,176,222,223,164,173,63,140,249,177,160,64,3,183,63,239,41,158,21,155,149,159,63,39,126,51,224,200,0,169,191,164,209,63,5,25,95,158,191,202,196,191,230,154,188,180,63,96,177,209,74,161,224,158,63,179,83,180,226,251,168,182,63,247,152,81,170,248,136,159,191,23,13,169,239,223,191,169,191,225,102,221,36,103,1,161,63,249,77,19,242,193,205,185,63,133,214,157,35,2,243,161,191,189,80,156,42,212,184,178,191,38,238,184,83,249,25,152,63,43,118,230,228,131,163,150,191,68,201,21,80,14,90,182,191,19,1,157,25,168,228,186,63,120,96,216,10,173,32,182,63,147,153,220,244,217,147,167,191,205,114,29,184,77,113,180,191,204,58,240,105,159,207,188,63,208,234,255,179,164,25,194,191,35,28,20,127,179,171,161,63,130,167,187,243,250,72,183,191,120,95,195,72,144,83,190,63,51,230,171,224,105,90,176,63,174,196,225,204,185,226,170,191,196,178,149,11,34,85,192,191,135,188,47,68,123,56,180,191,186,148,60,75,83,74,189,63,201,81,246,119,120,13,165,63,32,161,135,85,146,249,162,191,233,205,67,165,41,130,176,191,173,89,105,24,115,188,180,63,157,168,249,240,166,255,159,63,128,71,133,185,130,219,171,191,228,46,198,212,117,156,169,191,222,248,109,204,130,59,184,191,25,166,136,60,254,54,173,191,238,118,72,46,211,116,179,191,125,25,182,15,186,143,175,191,18,52,247,57,64,202,178,191,231,200,180,238,111,158,176,191,61,178,98,222,74,57,172,191,158,66,129,32,232,19,153,191,125,97,241,31,242,225,161,191,232,122,23,194,141,13,164,63,233,7,126,243,125,41,164,63,78,58,124,33,166,87,173,191,152,251,206,151,134,162,173,191,159,229,118,132,12,32,166,63,88,31,206,145,227,123,185,191,68,29,218,65,132,198,168,63,6,135,198,183,188,48,185,191,145,4,66,89,128,26,170,63,118,247,53,212,200,207,166,63,161,102,132,144,85,200,150,63,14,81,251,144,1,160,176,63,137,64,45,184,184,28,161,63,132,74,223,43,102,150,172,63,132,99,163,22,195,45,171,63,254,91,56,94,56,84,187,191,37,205,116,126,40,90,163,63,103,111,165,40,158,130,173,191,101,184,242,30,189,124,169,191,135,32,203,36,48,174,166,63,244,38,161,187,192,145,194,63,116,60,160,46,64,180,162,63,52,50,213,221,155,246,180,191,55,244,195,44,201,37,170,63,206,128,240,151,216,163,186,191,18,87,57,106,6,164,161,63,140,219,169,189,6,76,164,191,204,135,191,142,154,161,169,191,102,160,94,21,132,150,193,63,238,255,153,232,117,72,165,191,186,124,94,39,180,166,167,191,154,117,44,127,65,67,176,63,248,76,198,21,187,226,158,191,215,239,39,251,73,0,161,63,125,77,99,2,104,27,175,191,183,93,121,75,219,158,152,191,108,30,173,220,231,17,170,191,212,67,100,234,111,61,184,191,141,123,96,201,64,198,165,191,242,204,87,165,236,122,186,63,195,148,40,166,52,227,177,63,90,212,92,99,78,244,160,191,104,239,84,144,206,233,160,63,208,47,180,239,139,251,159,191,102,77,18,34,233,90,167,63,166,210,212,161,86,16,185,191,155,6,93,45,232,36,157,191,189,111,61,50,65,177,182,63,146,66,166,33,21,66,161,63,82,109,130,184,114,166,164,191,119,234,228,25,150,229,160,63,45,85,124,121,125,200,168,191,252,140,198,67,164,104,190,63,163,23,10,141,130,0,178,191,161,212,224,83,188,1,162,63,212,237,139,174,204,131,166,191,151,243,174,63,39,202,185,191,91,68,131,103,226,176,176,63,135,155,109,159,55,13,165,191,171,11,63,64,32,250,171,191,49,5,105,243,92,225,179,191,7,225,137,19,160,10,184,191,24,119,114,80,212,10,187,191,202,152,234,53,229,136,191,191,202,7,116,27,2,7,192,191,171,7,42,58,205,208,175,191,189,94,150,123,253,45,172,63,25,199,93,50,132,75,177,191,111,202,98,11,138,118,179,63,113,176,89,174,41,72,178,191,219,243,12,239,22,174,176,191,132,204,22,184,254,244,174,63,69,24,241,85,178,239,177,191,52,73,179,193,133,44,179,63,89,117,45,61,161,145,132,191,48,36,33,40,122,56,128,63,48,12,82,140,80,56,144,191,219,14,139,195,134,190,145,63,149,211,13,153,134,158,150,191,26,120,113,126,155,226,151,63,77,146,4,233,97,172,120,191,92,119,114,112,95,7,176,191,47,187,78,174,42,177,120,63,144,71,252,157,173,188,163,63,250,54,59,147,64,176,164,63,7,198,182,158,229,70,179,191,117,2,12,57,1,200,159,63,222,224,172,15,199,141,169,63,103,0,239,151,81,14,173,191,59,69,194,25,223,192,159,63,198,245,252,40,6,45,163,191,184,115,109,124,24,40,164,63,11,118,161,157,204,30,158,63,207,205,181,16,152,119,158,191,201,199,193,239,53,157,169,63,87,117,130,151,39,225,178,191,22,76,250,242,16,115,166,191,15,161,77,236,159,141,162,63,14,154,251,107,228,25,156,63,154,41,160,213,8,83,177,63,45,149,212,44,233,206,170,191,87,13,176,14,72,33,175,63,243,233,88,98,66,183,162,191,162,147,185,144,111,191,165,63,64,217,92,33,68,243,171,191,111,72,38,218,23,73,166,63,105,18,148,47,214,86,165,191,117,142,1,129,18,15,164,63,1,72,97,147,29,116,166,191,110,100,78,194,175,23,164,191,145,108,129,223,113,250,168,191,148,165,70,64,225,184,170,63,140,74,228,177,77,230,173,63,227,247,6,137,169,73,172,63,2,81,163,185,91,221,151,63,12,201,48,199,218,194,175,191,237,91,114,179,60,7,156,191,174,163,198,194,88,92,162,63,216,45,89,95,141,178,169,191,123,207,186,79,53,113,161,63,72,189,225,157,210,212,168,63,227,207,82,158,76,107,162,191,5,70,141,140,210,207,147,63,14,244,77,139,62,54,153,63,18,253,217,163,112,149,162,191,105,1,175,245,51,180,160,63,89,82,116,32,187,127,166,191,165,138,44,213,108,202,166,63,234,137,6,179,73,9,165,63,45,214,42,113,120,50,162,191,81,35,75,26,166,94,160,191,149,209,128,146,24,27,169,63,162,243,132,234,46,70,164,63,132,54,190,29,154,60,163,191,53,2,48,30,87,165,156,63,2,40,186,189,38,188,152,191,151,60,235,78,128,96,164,191,200,12,148,59,136,121,172,63,145,211,148,214,4,142,149,63,161,185,58,248,248,66,167,191,234,150,67,219,220,150,153,63,131,6,144,152,54,197,156,63,184,221,24,37,123,72,161,63,17,141,106,171,144,252,150,63,77,44,150,31,138,26,162,63,238,53,227,226,154,109,164,63,217,20,207,81,37,194,143,63,116,85,94,12,222,118,161,63,161,253,186,199,70,56,169,191,164,224,251,244,118,61,171,63,74,3,105,46,5,97,175,191,207,185,152,5,35,49,178,63,32,240,61,214,245,81,167,191,85,141,31,69,221,249,171,63,118,162,112,82,186,121,176,63,118,202,5,178,85,144,166,191,87,46,125,133,217,79,179,191,195,120,120,9,122,108,173,191,239,136,238,6,40,63,170,63,238,88,138,68,60,143,171,63,36,82,64,246,175,121,176,191,62,129,2,213,3,225,176,63,143,72,57,239,231,21,171,191,127,120,113,197,156,140,161,191,82,199,63,235,2,5,173,63,226,198,183,122,81,142,171,191,103,40,114,149,207,159,176,191,180,142,142,135,181,230,167,63,45,235,203,44,199,216,163,63,184,65,91,139,213,149,163,191,19,233,14,71,182,56,163,63,41,241,187,162,233,58,167,191,150,64,89,24,214,200,167,63,83,34,221,163,187,21,167,191,147,213,44,149,173,47,161,191,145,29,64,111,71,181,160,191,77,251,206,146,12,225,163,63,48,41,196,221,52,45,163,63,77,134,10,93,199,1,170,191,200,199,131,102,9,233,151,63,239,196,204,139,144,56,151,191,127,57,212,113,94,118,151,63,131,29,112,206,64,122,160,191,126,210,134,162,174,179,149,63,239,133,192,55,57,205,160,191,145,160,1,85,23,251,160,191,127,67,108,52,47,103,162,63,220,184,44,201,245,169,161,191,214,133,255,49,146,180,167,63,221,10,207,112,189,222,163,191,11,0,10,182,29,108,160,191,174,139,107,249,236,241,180,191,94,107,217,59,17,134,182,191,178,29,199,210,154,13,180,191,29,134,239,111,118,14,177,191,113,218,10,71,111,102,177,63,191,213,92,52,171,228,178,191,139,188,20,166,144,136,180,63,44,197,37,77,155,175,180,191,25,177,117,36,78,190,176,191,1,24,19,245,164,79,179,63,220,15,94,2,93,237,177,191,96,146,144,18,244,192,181,63,75,231,135,78,127,233,161,63,21,41,108,247,121,93,169,63,188,25,219,211,31,61,168,63,146,31,60,100,132,104,164,63,223,200,160,20,76,233,171,191,179,200,225,177,8,164,164,191,55,17,70,223,53,218,164,63,209,139,241,205,196,50,173,191,29,200,18,21,74,148,181,191,130,243,176,73,37,250,175,191,7,19,40,171,32,154,169,191,215,171,5,198,214,226,146,63,13,108,171,6,141,192,183,191,175,216,63,239,89,81,177,63,38,184,203,213,255,116,168,191,201,200,175,222,221,224,172,63,27,251,94,22,108,132,144,191,171,149,166,139,45,20,153,63,171,65,44,21,83,231,144,63,15,125,52,92,57,244,176,191,104,50,113,10,200,194,172,63,223,67,138,0,168,160,178,63,167,233,173,104,150,119,174,191,26,189,240,32,70,150,152,191,156,236,32,117,59,168,157,63,144,17,62,181,105,36,164,191,183,175,1,222,185,48,147,191,76,129,107,240,67,39,147,63,183,158,206,42,245,21,164,191,125,79,120,61,210,146,160,191,235,117,143,167,207,189,171,63,62,41,239,204,65,17,165,191,202,97,209,112,196,112,174,63,6,74,240,128,145,108,177,63,72,0,189,106,220,195,171,63,130,147,119,128,235,192,168,63,93,231,143,171,247,42,178,63,5,89,134,99,252,35,158,63,172,5,212,165,229,199,160,191,220,194,50,89,195,131,177,63,190,80,164,246,164,74,165,191,137,197,4,81,27,111,166,63,5,219,187,119,91,6,168,191,38,68,244,144,248,125,160,191,1,3,175,19,204,23,178,191,128,211,89,110,125,12,177,191,56,89,77,252,178,106,168,191,103,7,235,122,66,121,175,63,246,6,128,81,17,1,178,63,241,129,153,209,219,3,160,63,73,187,84,211,198,86,180,191,150,149,232,84,183,172,183,191,25,220,22,30,52,185,179,63,113,31,152,21,140,251,158,63,254,43,213,41,26,98,159,191,186,202,4,6,101,88,160,63,237,205,223,77,248,213,171,63,177,176,65,130,247,176,153,191,229,69,8,172,39,62,163,191,41,177,250,204,139,130,171,63,0,49,32,217,9,174,157,191,233,127,19,130,67,152,183,191,227,166,32,133,252,241,181,63,206,125,203,197,239,244,173,191,77,77,163,101,252,52,156,63,49,48,145,243,71,182,154,191,137,6,39,204,108,152,154,63,109,115,177,201,115,177,166,63,197,93,195,251,214,231,152,191,2,77,125,207,114,224,173,63,242,51,106,190,0,0,167,191,46,53,201,1,177,153,169,63,5,64,207,35,3,98,173,191,84,192,12,11,112,66,176,191,0,93,101,232,116,217,161,63,24,12,151,163,70,59,162,191,18,21,206,107,27,244,165,191,229,84,188,1,116,40,177,63,56,87,69,93,111,191,160,63,211,41,179,160,95,132,171,191,69,113,193,183,52,223,162,191,76,158,165,28,49,117,168,63,83,177,203,54,195,5,168,63,69,153,95,158,70,83,164,191,173,208,218,13,116,231,160,191,146,43,215,156,138,220,172,63,233,31,10,44,156,0,184,191,151,148,206,114,47,22,164,63,215,124,215,151,96,132,178,63,60,247,245,215,141,117,162,191,61,104,58,132,128,87,162,63,17,67,79,217,77,145,166,63,146,10,27,34,191,115,167,191,196,160,232,88,153,127,173,191,67,47,41,178,45,168,176,191,179,43,98,208,211,207,176,63,118,136,99,12,161,163,182,63,94,187,98,135,162,79,180,191,123,47,20,181,137,30,174,191,162,226,179,116,156,250,177,191,14,239,249,27,55,233,179,63,135,103,194,26,163,158,183,63,182,254,194,222,42,78,181,191,147,34,200,81,130,219,160,63,120,21,80,133,186,52,166,63,34,171,173,59,53,110,164,191,100,234,81,226,94,159,167,63,181,80,38,123,37,21,156,191,239,106,146,43,112,151,158,191,5,118,2,151,162,28,155,63,202,77,223,222,60,211,166,191,100,63,143,193,16,198,176,191,195,232,121,81,88,190,169,191,246,191,135,29,156,188,178,191,2,102,122,246,88,27,174,63,152,253,225,139,112,17,167,191,120,149,199,190,93,22,172,63,244,228,150,247,13,201,165,191,27,107,84,35,201,134,177,191,55,242,64,195,230,89,173,63,196,79,229,160,62,222,175,63,202,10,160,147,226,209,170,191,1,21,67,221,100,108,164,191,24,162,33,30,15,198,164,191,38,200,29,47,213,254,159,191,23,87,125,17,85,218,169,63,86,188,79,10,171,37,164,191,136,171,67,253,221,241,165,63,113,136,247,165,171,237,170,63,244,25,29,228,157,119,163,63,153,91,205,164,150,38,161,63,142,24,67,35,35,5,155,191,136,202,48,38,153,177,176,63,12,158,41,148,69,17,157,191,224,131,3,243,135,207,171,63,204,34,137,227,69,60,162,191,162,41,177,99,35,170,163,63,6,191,5,134,230,187,163,191,137,133,95,237,183,253,166,191,136,69,8,63,111,9,156,191,234,109,234,95,182,42,172,191,221,49,77,134,128,1,175,191,245,109,64,249,255,29,165,191,101,24,5,162,127,38,175,191,182,130,219,232,62,219,179,63,173,156,217,77,132,132,183,191,41,222,77,215,46,60,182,191,70,79,52,86,185,6,182,63,179,174,155,78,165,107,176,191,112,95,210,149,99,225,175,63,40,77,78,237,72,105,183,191,2,62,167,197,54,150,183,63,62,119,139,123,167,105,178,191,80,234,68,102,238,36,169,191,42,64,132,163,160,240,157,63,215,77,210,65,82,150,162,191,179,83,42,176,33,34,176,63,64,13,151,33,84,207,164,63,9,73,188,132,87,41,164,191,135,203,164,171,218,117,168,63,211,31,99,115,126,201,167,63,66,123,160,47,106,34,173,191,112,178,178,49,115,129,173,191,211,164,99,163,251,94,165,63,72,97,134,250,119,236,163,191,117,237,48,241,254,126,155,191,126,223,160,157,19,124,166,191,17,239,134,134,7,25,176,63,252,84,121,166,208,109,158,63,175,205,178,197,170,96,164,191,118,176,108,76,52,84,161,191,102,137,152,163,239,98,167,63,119,18,174,168,59,220,170,63,212,80,177,46,100,184,165,191,223,129,65,78,116,198,163,63,200,99,113,209,182,76,177,63,54,59,26,30,84,53,180,191,67,61,30,143,247,149,166,63,30,216,161,249,54,79,163,63,206,95,201,175,66,217,177,63,82,243,98,10,196,125,167,63,9,234,133,57,184,158,163,63,122,254,227,53,142,157,167,63,84,224,117,9,174,46,176,63,104,156,209,107,100,120,178,63,208,219,220,247,67,80,180,191,109,32,81,232,45,219,180,191,228,176,253,22,24,58,178,63,149,32,26,79,211,100,181,63,140,11,250,211,163,207,180,191,209,79,47,107,108,42,181,191,148,249,146,158,84,53,179,63,177,138,113,248,108,23,182,63,205,25,216,191,130,158,161,191,88,169,66,197,44,30,156,63,115,16,70,108,220,200,165,191,158,232,175,33,25,175,167,191,34,78,3,35,204,17,153,63,134,0,251,7,208,188,147,63,104,71,134,223,14,78,164,191,215,115,178,154,56,192,172,191,189,185,132,161,206,245,164,63,15,142,245,148,144,165,162,191,71,189,13,208,171,209,162,63,129,214,107,20,11,145,169,191,171,153,21,138,120,56,164,63,236,225,181,159,137,72,164,63,85,50,238,54,18,69,160,191,7,13,203,9,179,128,159,191,63,148,204,163,66,131,151,191,228,160,54,58,57,127,163,63,29,67,74,7,122,99,154,191,254,218,29,216,104,84,154,63,207,38,103,173,94,104,155,63,243,121,116,126,117,148,170,63,103,67,3,165,26,31,149,191,98,188,114,161,224,125,162,63,207,127,107,225,116,125,154,191,232,194,49,59,132,5,164,191,111,62,190,183,141,131,167,191,87,221,216,0,212,227,162,191,17,196,208,87,143,140,171,63,166,198,180,22,211,143,176,191,14,142,172,22,119,39,172,191,175,223,190,212,75,52,170,63,95,40,61,250,212,17,165,191,206,52,176,21,134,220,166,63,140,95,126,169,87,29,174,191,237,187,200,128,36,231,174,63,228,96,143,194,128,200,166,191,186,130,52,85,48,143,155,191,188,233,75,167,73,177,160,191,208,39,250,34,152,207,160,191,246,35,66,62,195,25,167,63,178,140,234,49,243,209,159,63,11,145,224,175,74,201,154,63,162,25,172,83,141,12,162,191,103,167,167,122,220,153,166,191,203,143,172,195,179,101,158,63,206,210,51,141,253,210,161,191,39,253,199,227,182,85,164,63,100,108,116,160,132,55,152,63,8,177,64,163,182,100,160,191,124,68,111,254,64,123,161,63,148,124,80,95,185,108,164,63,10,228,191,205,149,88,165,63,194,85,185,220,142,102,167,191,142,144,209,133,88,99,158,63,101,198,121,134,76,237,159,63,96,8,41,23,218,166,172,63,179,169,6,195,67,179,176,63,95,106,118,123,94,76,179,191,107,55,31,226,251,198,176,191,85,147,110,150,89,36,180,191,144,197,157,46,18,161,180,191,192,104,129,66,173,144,154,191,221,142,153,125,23,133,181,191,185,18,126,241,209,32,179,191,144,81,96,33,230,117,182,191,115,209,60,209,177,47,183,191,73,32,77,212,101,50,149,191,128,148,249,252,27,24,164,191,178,73,54,44,205,105,161,191,77,236,12,141,108,154,165,191,13,203,100,205,87,58,164,191,131,165,17,250,27,76,158,191,60,51,218,155,128,193,157,191,194,118,194,241,0,1,158,63,34,241,88,96,115,192,156,191,138,44,6,166,230,138,158,191,80,255,44,176,58,166,158,191,22,151,15,229,89,84,156,63,164,45,130,100,217,220,161,63,52,13,125,62,100,138,158,63,133,244,102,107,9,155,171,63,127,182,241,75,192,84,169,63,29,197,215,190,253,233,169,63,139,142,255,60,242,75,179,191,117,126,203,61,77,207,179,191,132,224,144,236,22,243,177,191,85,217,17,19,23,249,177,191,203,229,167,71,158,40,172,63,126,122,4,178,101,164,164,191,145,16,47,13,56,0,182,191,19,199,14,82,201,96,180,191,141,129,226,82,248,177,180,191,237,244,107,106,255,190,182,191,135,210,107,111,124,36,163,191,128,150,121,90,48,144,167,191,179,200,155,36,190,113,169,191,243,107,191,29,131,113,160,191,219,141,93,45,71,153,162,191,58,169,249,28,176,38,159,63,145,242,113,28,240,169,162,191,113,21,246,189,145,66,169,63,102,22,42,164,215,239,162,63,102,194,250,114,103,80,168,191,180,151,222,164,233,219,161,191,213,71,123,153,125,148,164,191,213,238,183,238,86,92,163,63,72,196,82,106,250,184,164,191,8,87,144,237,233,58,162,191,121,5,8,122,209,22,164,63,18,129,4,48,228,163,166,63,114,56,226,0,79,173,178,191,126,254,38,201,118,218,176,191,117,59,12,98,184,162,182,63,211,71,57,151,102,10,178,63,10,53,156,205,139,161,165,63,41,42,238,135,56,176,179,191,215,160,125,103,44,169,182,191,215,20,15,132,55,165,182,63,224,50,236,249,104,173,184,63,249,1,52,70,146,137,167,191,25,71,82,119,45,19,163,63,138,214,226,6,106,46,166,191,195,175,161,237,116,52,159,191,136,35,51,203,15,247,167,63,206,134,195,96,10,250,165,63,57,47,4,213,126,20,161,63,45,72,144,139,178,26,161,191,6,73,173,63,196,41,169,63,2,99,118,10,131,181,163,63,112,192,21,130,97,97,165,191,58,156,220,177,26,172,162,63,221,67,219,31,255,41,162,191,98,7,79,235,30,47,163,191,114,94,101,212,79,56,167,63,254,124,204,136,145,253,163,63,164,158,45,197,236,122,163,191,220,134,10,50,81,161,157,63,151,49,174,89,126,126,163,191,167,72,73,24,102,35,180,191,142,244,1,209,101,164,182,63,130,64,106,202,105,231,177,63,196,89,103,15,106,234,179,191,74,176,147,184,94,41,184,191,10,138,17,90,56,226,184,63,152,181,166,99,12,242,179,63,239,171,188,162,252,151,182,191,216,222,232,12,137,200,166,191,140,222,236,12,232,223,170,63,70,223,135,115,119,171,161,63,190,115,39,144,221,216,168,191,6,94,89,232,151,215,161,191,157,205,76,217,58,177,164,63,19,243,36,185,202,5,159,191,79,124,143,195,51,15,167,191,160,194,158,105,132,151,178,191,7,5,95,189,173,202,179,63,232,50,51,152,75,26,181,191,53,193,75,105,172,255,180,63,81,198,51,233,59,218,182,191,219,65,5,17,99,229,182,63,7,7,126,184,233,110,184,191,63,35,247,151,24,19,184,63,202,246,152,240,242,68,165,191,49,44,219,50,139,212,166,63,68,238,172,142,85,47,170,191,137,162,7,77,48,215,167,63,30,222,180,50,145,22,168,191,237,248,161,54,72,213,179,191,79,34,74,33,31,162,178,63,189,191,155,181,130,248,178,191,82,223,142,78,72,43,180,63,20,108,41,218,137,230,183,191,6,136,71,245,2,136,185,63,183,90,28,22,243,242,183,191,195,102,150,118,228,140,184,63,33,138,224,239,31,62,172,191,205,180,138,184,191,126,168,63,171,177,38,176,122,232,169,191,42,10,28,165,64,87,165,63,4,27,46,158,179,103,180,191,14,184,143,143,155,53,178,63,8,238,145,138,207,204,180,63,240,221,227,246,220,160,179,191,249,134,164,198,100,121,184,191,125,202,66,39,252,123,181,63,198,168,160,107,162,150,183,63,186,36,5,48,216,173,185,191,125,73,2,235,111,227,170,191,187,122,180,48,143,187,163,63,135,202,201,197,11,127,169,63,106,111,176,149,177,157,169,191,82,37,246,231,117,226,179,191,142,145,197,48,83,125,180,191,13,25,83,29,170,153,179,63,237,103,91,22,176,183,180,63,209,2,141,120,156,154,183,191,201,73,194,89,26,34,184,191,217,104,232,223,90,87,182,63,169,96,224,189,15,217,183,63,30,225,83,188,201,20,168,191,222,177,104,99,3,253,169,191,127,210,255,206,145,10,166,63,47,58,175,90,247,19,167,63,194,78,159,105,119,86,180,191,10,61,157,128,32,181,180,191,228,143,125,252,156,44,181,191,131,162,236,236,103,67,181,191,100,240,44,60,81,163,183,191,155,233,167,78,13,226,184,191,129,59,12,119,140,122,183,191,75,81,167,57,142,138,184,191,235,226,51,253,227,109,168,191,74,91,71,120,61,209,164,191,151,44,181,105,230,168,168,191,28,238,194,93,56,10,170,191,18,216,138,157,48,125,197,63,241,156,98,195,73,67,225,191,50,90,250,66,230,230,204,63,247,209,205,89,183,60,204,63,142,68,207,48,157,226,227,63,111,65,94,10,121,90,233,63,56,80,108,106,224,33,233,63,15,35,183,103,78,14,228,63,200,163,151,137,202,22,234,63,145,1,31,211,168,244,229,63,237,215,163,246,218,173,214,191,250,225,135,131,225,10,180,191,166,143,75,120,59,117,228,63,5,187,123,41,10,111,198,63,212,71,144,191,6,175,182,191,242,38,90,71,249,30,189,191,12,59,28,144,247,232,190,191,200,248,67,26,204,155,214,63,219,97,246,117,232,190,204,63,41,198,244,32,20,30,182,191,27,200,68,136,175,32,206,191,102,39,128,132,21,79,195,191,18,82,184,32,55,87,209,63,232,21,15,85,114,207,193,191,164,15,77,236,147,227,215,63,199,140,212,215,135,254,221,63,51,40,57,198,22,120,216,63,177,13,157,126,14,236,212,63,144,184,0,69,69,149,161,191,168,108,207,80,144,75,185,191,228,92,179,158,75,90,193,63,214,206,173,109,251,141,176,63,146,215,131,123,174,7,193,191,9,93,214,245,149,79,165,191,144,55,124,165,244,243,204,63,19,141,219,237,185,55,212,63,81,74,38,71,47,118,169,63,59,164,242,217,230,117,211,63,41,203,37,19,158,129,178,63,128,167,170,80,245,252,177,191,80,178,112,148,31,255,177,63,50,238,88,34,57,180,190,191,195,171,87,232,150,193,182,63,231,160,238,29,130,30,192,63,38,67,1,17,77,159,202,63,254,205,151,177,234,82,163,63,124,40,238,95,251,66,194,63,48,232,115,231,48,162,184,191,225,252,81,55,182,75,189,63,192,7,201,68,164,134,185,191,247,55,8,39,164,166,191,63,187,154,101,18,100,66,180,191,22,129,137,93,138,81,180,63,229,244,56,21,241,137,192,63,219,232,211,133,67,228,178,191,165,165,220,25,59,69,182,191,105,231,16,162,154,103,189,191,109,240,238,225,74,179,180,63,164,72,193,178,249,14,184,63,143,119,103,231,181,230,184,191,19,180,227,203,81,139,172,191,36,238,74,16,17,143,181,191,198,97,209,203,28,224,183,191,227,49,163,241,176,178,186,191,26,63,228,5,151,148,185,191,194,15,243,19,101,155,180,191,205,34,91,71,73,175,165,191,85,216,176,232,254,167,183,191,106,149,93,217,197,8,189,191,183,224,213,29,228,74,182,191,42,65,152,7,231,127,181,191,147,157,242,189,37,167,183,191,41,252,63,240,13,242,182,191,86,148,84,205,115,77,187,63,178,165,204,106,225,240,183,63,78,191,75,250,53,51,174,63,138,49,224,124,82,223,183,191,149,2,181,64,63,95,190,63,190,225,134,48,154,252,181,63,24,154,126,245,112,239,182,191,18,103,130,198,160,21,172,63,38,22,36,67,39,193,182,191,210,48,215,79,106,108,183,63,161,159,128,112,32,101,185,191,98,186,221,242,5,134,184,63,194,237,167,160,91,59,167,63,23,136,208,71,203,234,184,191,92,42,170,145,88,193,185,63,229,197,128,1,242,251,183,191,131,0,78,216,159,121,180,63,132,136,97,96,204,171,163,63,222,238,134,230,161,132,185,191,204,251,178,45,186,63,182,63,97,5,249,193,151,210,187,63,176,27,55,31,167,205,182,191,57,124,234,230,118,11,187,191,161,64,172,191,152,153,185,191,202,94,183,168,20,102,183,63,70,146,71,172,106,162,184,63,155,134,64,76,150,138,184,191,218,82,154,163,13,192,186,191,76,193,43,247,142,61,185,191,225,194,218,223,112,178,183,191,176,63,142,48,111,5,202,191,48,237,38,201,53,2,198,191,8,33,42,78,242,7,202,63,134,69,113,85,247,28,206,63,208,139,39,70,193,41,209,63,185,244,89,1,211,0,197,63,46,0,132,52,223,56,217,191,14,244,105,82,158,6,207,191,63,235,81,178,100,52,202,191,4,145,189,234,114,132,214,63,197,91,29,122,243,12,208,63,218,114,242,113,124,28,193,191,216,34,113,65,119,115,189,191,42,18,13,204,169,78,190,63,180,178,208,69,66,78,210,63,167,95,35,32,83,219,215,191,249,153,67,122,107,54,193,191,82,31,217,189,231,103,197,63,115,130,4,205,159,83,179,191,11,223,191,82,190,40,194,63,155,255,59,7,3,49,203,63,19,44,195,216,180,128,216,63,139,177,18,45,180,175,201,191,112,17,72,79,80,195,208,191,38,255,132,10,72,233,172,191,115,250,238,73,197,108,192,191,224,100,42,245,200,42,210,63,42,225,208,58,123,111,199,191,22,167,63,87,122,172,181,63,164,23,58,177,128,47,173,191,134,205,2,186,99,242,165,191,28,24,192,148,33,98,191,63,120,185,208,250,22,51,189,63,27,125,252,35,74,170,190,63,37,176,82,28,139,231,206,191,149,254,158,238,54,184,193,191,189,185,158,180,164,205,184,191,11,192,54,250,49,209,184,63,206,185,74,92,252,59,199,191,102,196,126,245,203,130,197,63,64,194,64,239,106,12,166,63,134,245,154,90,121,90,201,191,236,63,202,55,239,60,155,191,215,26,117,150,21,222,184,191,19,35,0,72,85,4,194,63,7,66,252,100,110,117,184,191,177,179,204,157,17,135,184,63,64,51,0,244,219,140,176,191,39,169,87,152,62,87,193,191,77,159,67,248,29,189,177,63,12,33,28,228,158,33,185,191,131,226,202,90,228,68,177,63,201,57,20,123,82,155,192,63,29,171,158,61,152,199,188,191,123,148,222,148,73,168,179,191,26,26,105,189,51,20,177,191,240,198,185,47,58,54,171,63,244,160,102,153,165,137,184,191,53,123,164,173,155,246,192,191,31,250,160,74,186,35,181,63,245,90,152,189,110,196,186,63,205,220,191,157,185,179,176,191,128,175,163,186,15,208,181,191,220,201,33,63,142,241,182,191,211,204,78,159,29,199,192,191,1,39,56,203,210,224,190,191,79,182,251,222,62,51,164,191,251,123,53,34,115,228,188,191,143,146,155,11,35,175,191,191,234,228,9,73,135,225,182,191,83,202,146,2,229,80,181,191,195,125,120,24,175,195,184,191,154,159,70,82,91,194,179,191,224,44,100,75,25,81,193,63,246,194,42,167,243,110,185,63,244,116,176,250,125,100,171,63,134,156,242,112,154,142,184,191,140,70,58,1,87,51,192,63,69,170,101,168,89,83,181,63,199,81,64,203,201,11,186,191,228,235,140,113,126,122,170,63,131,222,80,25,103,237,181,191,244,216,233,113,132,119,185,63,6,181,246,202,222,42,191,191,161,93,95,193,132,244,189,63,80,166,32,60,173,195,188,191,248,156,12,69,208,40,190,63,164,120,237,99,173,224,186,191,27,124,252,1,122,191,183,63,58,188,25,229,108,69,189,191,74,230,68,117,14,54,186,63,182,209,48,29,242,213,191,63,91,84,92,227,190,150,187,191,82,235,147,239,76,116,187,191,111,93,203,138,123,61,192,191,121,55,60,181,36,41,187,63,14,99,77,52,174,214,187,63,135,135,184,30,141,56,187,191,166,44,194,84,89,24,188,191,143,166,84,241,85,41,189,191,25,77,47,28,144,107,189,191,202,254,245,191,155,182,168,191,54,35,45,255,108,149,179,191,53,13,138,236,171,42,190,63,103,223,116,174,98,218,159,191,115,83,124,218,3,228,193,191,53,18,50,92,161,74,207,63,67,127,172,12,116,102,191,63,7,243,156,40,180,191,203,191,228,241,169,37,51,215,172,191,178,147,138,174,94,124,179,63,193,243,101,113,15,53,196,63,17,6,50,93,227,225,195,191,155,35,65,118,209,217,189,191,102,65,15,173,25,62,193,191,182,183,132,164,97,60,189,63,205,177,247,48,239,57,195,191,67,13,10,182,77,25,211,63,199,42,28,4,186,137,178,191,199,62,162,226,89,243,179,191,130,197,57,5,217,110,159,191,132,149,4,84,142,60,173,191,23,156,49,155,65,90,195,63,217,9,173,77,10,241,187,191,102,222,230,6,124,209,182,191,157,245,100,73,80,24,198,63,85,44,92,58,26,57,178,191,86,219,147,48,189,12,175,191,97,157,65,60,3,12,174,191,54,179,182,129,174,239,192,63,163,89,84,122,117,188,190,191,236,89,196,36,81,22,195,191,121,8,65,26,17,221,179,63,25,59,240,95,0,207,141,191,103,156,106,4,177,196,178,63,13,250,81,219,255,48,189,191,17,182,129,68,25,204,184,191,247,15,188,172,115,51,191,63,235,202,133,229,27,215,176,191,191,181,163,227,142,218,176,63,121,36,123,163,160,253,179,63,222,194,32,20,252,29,181,63,105,150,19,228,28,189,160,63,237,158,75,53,112,25,200,191,33,28,110,190,48,152,179,191,23,40,252,97,67,73,183,63,72,17,190,212,92,18,168,63,178,3,22,187,9,142,164,63,50,73,202,48,89,139,179,191,123,130,136,139,221,149,166,191,66,55,75,112,63,11,188,63,167,150,36,51,224,203,163,63,188,92,139,230,83,109,161,191,47,180,209,192,54,144,178,63,51,15,145,122,137,69,191,191,89,120,95,81,226,10,194,63,57,238,211,76,223,214,170,191,120,209,44,23,71,16,165,63,40,49,154,153,244,99,190,63,53,147,130,200,236,200,166,191,249,109,64,28,1,210,178,191,36,71,12,158,36,206,189,63,99,186,94,1,242,177,167,191,96,217,154,103,6,17,166,191,46,162,92,78,109,38,182,191,218,220,53,141,164,249,162,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112640);
/* memory initializer */ allocate([215,22,205,144,160,33,163,191,153,242,174,23,158,16,180,63,49,235,24,232,18,202,162,191,227,49,248,202,170,103,175,191,61,155,156,170,56,148,170,191,76,17,112,213,180,179,161,63,132,161,1,94,210,38,179,191,221,11,37,113,153,57,171,191,204,15,158,183,2,62,169,191,209,182,185,45,147,91,165,191,227,142,69,96,214,60,181,63,166,157,231,253,174,11,170,191,17,23,234,227,17,101,165,191,234,116,219,151,51,169,179,63,18,30,121,193,17,227,165,191,164,84,171,250,183,117,166,191,23,187,57,81,107,23,173,191,19,89,120,107,148,205,171,63,66,92,128,126,130,213,170,191,90,15,119,248,47,74,173,63,70,149,250,40,2,104,176,63,244,168,196,119,175,17,169,191,86,136,39,174,174,249,165,191,146,203,229,127,131,158,175,191,211,53,112,107,12,228,165,63,227,213,23,244,134,117,169,63,98,195,29,192,168,85,164,191,216,77,27,194,89,123,170,191,230,72,100,246,235,236,173,191,3,116,218,28,206,130,170,191,128,146,182,225,207,206,186,191,54,202,71,44,127,88,186,63,64,154,240,1,223,195,193,191,135,138,237,105,42,191,194,63,18,125,81,67,2,29,160,191,30,25,66,59,221,186,164,63,14,225,164,123,196,96,174,63,4,67,117,141,78,237,177,191,119,123,91,143,124,82,181,191,21,255,18,253,144,47,195,191,89,19,69,227,226,237,191,63,26,152,188,255,79,129,189,63,150,181,130,34,22,252,179,191,8,188,205,143,170,70,182,63,215,163,83,176,183,212,201,191,133,169,15,199,121,126,186,191,112,70,30,131,173,50,201,63,162,98,173,195,46,200,183,63,178,195,238,222,239,20,148,191,244,252,51,91,80,219,164,63,132,173,188,19,48,139,181,191,218,194,29,221,63,45,165,63,42,39,8,64,222,92,194,191,158,82,131,216,96,246,188,63,93,101,253,239,34,148,175,63,117,241,169,2,205,180,168,191,207,79,105,232,173,119,191,191,34,190,65,186,103,187,179,63,159,191,9,213,25,214,189,63,4,249,183,170,230,230,182,191,216,34,55,181,59,253,191,191,124,150,229,66,185,20,184,63,96,185,60,147,209,254,182,63,136,229,158,98,203,39,167,63,139,3,250,26,179,64,168,191,113,59,54,127,82,113,179,63,11,152,77,120,140,236,178,191,137,242,47,113,196,155,181,63,249,216,155,181,88,189,190,63,230,109,118,222,26,85,182,191,135,220,220,157,119,218,171,191,108,64,208,128,37,172,170,63,100,159,164,220,60,60,177,63,91,155,57,55,186,21,168,63,50,5,5,146,188,126,167,191,73,136,41,213,2,4,180,63,103,165,88,107,20,39,186,63,41,167,87,201,158,162,177,191,124,224,74,232,242,33,194,63,221,41,213,47,103,3,184,191,41,64,194,103,206,54,171,63,56,30,77,250,42,177,156,63,229,79,127,238,91,83,160,191,119,49,220,1,151,125,165,63,155,23,211,54,192,43,163,191,149,101,183,99,165,180,186,191,163,174,248,4,140,234,146,63,249,7,53,2,42,87,178,63,62,168,37,216,51,125,147,191,2,189,236,138,113,205,182,191,145,254,138,18,230,51,147,63,186,64,116,24,64,25,173,191,89,123,152,204,223,211,146,191,251,149,70,133,168,60,179,63,99,71,53,255,33,123,192,191,238,106,117,250,99,80,177,63,240,21,219,60,172,73,193,63,160,87,86,147,57,198,174,191,55,155,198,1,154,29,187,191,89,169,215,28,22,129,163,63,57,223,102,47,210,156,165,191,230,38,134,111,232,5,176,63,211,239,171,91,138,227,182,191,174,123,20,214,134,112,167,191,41,67,110,51,126,38,177,191,217,61,235,175,119,203,181,63,251,193,50,241,115,124,187,191,59,136,83,224,84,74,187,63,225,11,132,21,119,101,177,191,127,81,82,78,19,94,163,191,158,250,135,161,212,70,161,191,43,15,241,125,38,213,171,191,40,202,109,248,159,207,173,63,135,111,142,74,69,171,177,191,109,11,1,18,186,64,178,63,55,200,180,113,70,235,155,191,38,152,48,114,155,201,160,63,31,164,91,235,194,230,165,63,224,142,183,66,171,121,168,191,16,219,221,19,247,33,182,191,90,237,254,246,132,15,190,191,61,190,217,240,151,132,192,63,46,37,101,60,131,227,185,191,222,29,208,115,177,150,181,63,236,228,37,148,48,140,178,63,134,112,93,135,52,153,191,191,1,76,109,39,238,67,190,191,100,41,245,220,74,96,193,63,187,141,132,152,167,241,183,63,148,129,29,91,187,136,125,63,216,83,135,65,167,35,192,191,92,52,91,124,45,100,198,63,248,149,214,199,73,49,146,63,18,226,96,27,16,226,189,191,146,48,123,95,174,171,153,191,9,143,47,221,98,49,180,63,48,196,211,194,153,39,179,63,233,251,190,251,178,179,144,63,166,167,125,87,161,18,145,191,142,71,4,29,5,74,190,191,181,83,138,235,97,171,198,63,181,225,97,54,214,244,180,191,37,108,47,89,110,118,195,191,167,144,188,216,142,130,186,63,6,113,85,146,236,133,166,63,33,249,95,60,74,201,177,191,58,225,234,81,209,30,167,191,169,56,12,26,44,24,191,63,5,216,140,5,60,60,166,63,124,121,152,119,103,144,165,191,117,62,36,102,204,107,176,63,18,110,250,78,87,80,149,63,152,95,138,255,192,23,149,191,43,50,218,130,192,137,170,191,13,142,50,200,90,169,177,63,59,135,58,143,141,54,191,191,192,185,134,188,239,3,177,63,19,148,232,32,200,164,190,63,186,101,78,104,82,167,177,191,136,140,220,221,51,79,185,191,194,178,58,192,0,85,183,63,14,223,78,97,1,16,182,191,113,194,71,100,211,62,187,191,73,165,133,108,108,193,153,63,104,207,230,78,107,223,153,191,117,103,151,98,214,53,168,63,178,68,48,65,9,2,192,191,182,122,177,96,156,135,161,63,15,87,86,128,70,223,178,63,89,158,126,58,117,184,160,191,246,115,142,56,29,166,186,191,121,245,221,235,25,137,172,191,43,189,79,228,167,154,173,63,198,130,220,32,247,200,193,191,251,240,109,145,94,148,169,191,224,187,9,199,237,174,185,191,236,114,225,35,249,5,168,63,124,43,174,5,69,219,191,191,61,54,156,227,191,172,184,63,77,191,210,127,165,38,177,191,102,183,16,55,243,14,178,63,143,89,0,178,152,67,194,191,190,160,36,196,106,28,177,191,185,37,19,213,58,40,163,63,95,37,165,125,130,198,183,191,61,243,190,102,224,180,174,63,208,83,222,136,140,58,187,191,125,65,104,25,199,18,164,191,133,90,245,141,90,204,175,63,177,126,33,84,116,191,193,191,189,181,140,118,205,97,194,63,86,24,2,50,179,235,169,191,216,221,113,150,60,81,174,63,197,104,100,229,0,40,185,191,20,226,238,178,205,51,176,191,212,204,80,97,35,79,186,191,36,175,187,135,158,37,172,63,120,179,212,139,48,144,176,63,184,87,65,121,163,121,178,191,167,1,187,105,142,140,157,191,59,29,248,23,254,180,186,63,102,26,155,218,21,193,176,63,173,77,108,85,95,251,178,191,118,55,118,141,100,122,161,191,88,31,85,56,21,25,163,63,20,255,58,94,24,108,169,191,134,157,208,218,228,57,167,191,18,135,16,133,115,39,180,191,34,129,49,89,76,10,165,63,237,128,251,225,68,133,171,63,227,176,110,79,251,189,175,63,240,93,4,117,100,226,168,63,120,128,99,215,33,168,166,191,38,44,88,126,41,116,177,63,222,238,145,103,62,24,175,63,222,15,139,231,67,204,178,191,111,252,66,234,199,2,178,63,40,199,55,91,185,137,170,191,25,198,237,199,84,42,173,63,18,47,209,2,12,125,172,191,144,188,172,20,158,100,185,191,102,33,90,130,179,143,179,63,220,75,215,58,65,155,190,63,236,183,86,214,221,196,184,191,225,20,6,73,154,197,169,63,124,121,188,164,15,4,186,191,124,240,38,31,202,220,179,191,78,220,237,1,137,91,183,63,226,100,204,135,204,15,178,63,201,122,50,174,110,220,184,191,146,109,168,136,189,221,178,63,98,143,193,52,172,107,196,63,110,227,160,38,251,241,184,191,151,205,199,6,161,201,177,63,63,31,231,68,151,6,182,191,94,3,196,105,135,22,196,63,57,106,193,59,22,186,179,191,162,20,183,42,103,130,186,191,35,172,160,136,250,30,177,63,3,224,90,219,101,83,194,63,14,19,186,242,35,227,172,63,173,198,183,13,50,65,178,191,75,110,33,163,202,207,176,191,126,155,244,251,187,64,182,63,67,169,86,165,122,50,195,191,143,1,223,242,139,202,169,63,116,129,30,97,190,30,187,63,102,109,119,94,87,37,168,191,53,206,22,137,139,0,180,191,112,98,157,225,36,239,185,63,13,212,174,240,80,136,183,191,24,148,215,68,172,143,187,191,147,133,101,121,120,173,176,191,167,236,230,104,68,31,175,63,229,81,233,179,182,215,187,191,45,100,224,120,225,205,189,191,169,63,252,226,161,82,173,191,230,196,106,186,142,56,175,63,191,138,41,124,194,38,191,191,43,55,90,232,59,61,172,191,113,143,126,163,50,171,185,191,22,208,31,130,101,198,169,63,123,183,246,186,28,189,177,63,164,165,23,188,65,216,163,191,60,3,155,206,27,199,189,191,140,113,57,16,203,237,164,63,65,72,116,36,128,37,186,63,64,5,53,223,203,22,164,191,228,39,16,98,61,222,183,63,52,60,126,169,233,21,195,191,233,38,164,232,24,22,192,191,83,240,171,107,177,169,188,63,103,218,206,118,35,130,192,191,31,19,135,146,168,158,196,63,134,99,18,136,188,8,193,63,76,8,215,207,255,109,192,191,173,50,171,100,82,76,182,191,248,31,177,255,73,196,191,63,160,244,157,169,92,35,186,63,16,163,248,36,246,186,189,191,210,244,45,111,43,208,171,63,96,81,55,103,173,98,188,63,74,176,35,151,98,201,179,191,194,5,184,225,139,19,180,63,107,43,2,73,65,230,181,63,36,50,209,216,59,91,176,63,5,152,207,9,23,33,180,63,199,101,68,112,64,135,177,63,162,168,11,111,87,37,176,63,53,121,179,152,163,131,176,63,202,211,35,155,194,11,180,63,141,6,97,236,214,76,175,63,118,136,201,82,146,2,163,191,162,104,110,117,189,15,166,191,44,64,189,39,77,134,181,63,80,193,94,156,110,209,168,191,169,124,12,28,199,104,165,191,22,146,3,167,108,61,177,191,195,73,97,198,200,85,180,191,144,19,175,63,30,104,179,63,204,176,174,161,77,31,176,63,175,255,8,196,235,203,171,191,46,74,82,21,44,107,187,191,66,79,45,109,191,24,174,63,199,94,167,42,83,203,183,191,208,166,148,131,230,107,170,63,235,245,160,68,112,81,181,191,66,210,202,46,80,57,169,63,141,92,148,203,203,51,179,191,215,32,251,153,122,166,167,63,138,85,109,173,96,8,169,191,173,64,28,159,25,12,164,191,83,214,25,34,20,137,171,63,110,169,90,130,116,160,173,191,33,195,105,113,21,134,184,191,221,73,114,203,220,110,189,191,240,188,57,140,141,137,182,63,49,208,175,146,126,250,185,63,143,51,116,107,63,37,178,191,23,157,212,216,165,134,165,191,185,26,26,17,211,148,168,63,96,38,235,178,247,127,168,63,230,83,14,233,217,226,188,191,128,191,205,240,22,61,195,191,212,198,246,11,205,69,179,63,174,155,20,168,240,1,187,63,137,34,155,140,223,19,167,63,12,170,4,204,217,220,168,191,24,34,201,200,13,26,185,63,244,234,160,119,57,100,166,191,40,53,130,70,201,2,177,191,129,124,90,174,246,25,166,63,117,176,145,85,149,16,169,191,121,192,34,205,62,64,186,191,136,171,206,252,245,184,165,63,137,218,249,131,220,231,164,63,225,160,107,163,117,189,171,191,245,126,134,139,115,180,176,63,61,239,7,216,156,71,186,191,75,44,176,89,15,68,182,63,75,211,214,86,46,2,176,63,12,166,157,53,47,252,172,191,178,81,124,211,100,254,179,191,252,154,16,196,57,40,169,191,168,91,75,177,125,217,177,63,222,136,65,209,125,153,168,191,164,58,55,31,20,120,182,191,17,83,121,7,198,137,166,191,40,218,170,73,9,250,168,63,4,95,213,187,1,143,179,191,111,41,195,204,65,31,168,191,195,131,114,189,24,42,186,191,203,152,201,118,44,180,165,63,101,213,55,215,254,220,157,191,168,88,1,78,107,98,181,191,93,253,218,100,41,35,161,63,202,207,145,216,138,29,178,63,89,13,75,29,192,153,192,63,195,169,109,148,211,239,158,191,232,158,218,101,38,48,183,63,115,171,48,247,66,199,185,191,174,87,145,13,211,184,186,63,19,107,124,253,39,81,182,191,164,142,43,119,2,192,191,63,86,37,100,13,188,92,189,63,220,9,10,213,54,204,189,63,12,143,248,202,160,124,178,191,184,193,148,230,50,54,181,63,98,206,119,195,142,154,185,63,42,38,69,200,43,55,187,191,180,71,115,117,245,163,165,191,222,71,22,58,99,79,180,63,253,92,165,252,51,173,186,63,97,182,98,170,27,28,167,191,200,218,124,16,94,217,177,63,165,155,122,182,247,128,172,63,6,185,156,18,37,180,166,63,142,148,28,12,152,142,180,63,58,254,53,140,14,176,178,63,210,7,136,187,241,49,178,63,82,92,247,11,221,0,163,63,196,171,63,5,211,208,174,63,37,231,251,204,157,91,161,191,78,1,190,127,146,191,176,63,8,107,153,114,106,220,165,191,95,113,164,143,175,35,167,191,123,120,209,239,155,68,163,191,239,102,51,90,228,103,175,191,30,135,146,101,58,56,177,191,217,227,104,19,116,190,178,191,222,162,65,33,218,45,182,191,217,236,25,158,94,214,171,63,88,28,94,115,119,86,179,191,57,230,36,210,189,9,182,191,157,214,138,241,161,12,176,63,67,87,85,204,214,184,171,191,13,124,16,48,101,78,183,191,211,167,72,174,164,116,179,191,127,234,46,138,24,249,176,63,84,99,110,106,131,15,166,191,157,218,12,139,102,171,177,191,228,151,251,245,37,153,167,63,57,70,54,127,0,171,165,191,30,75,12,197,233,53,163,191,64,253,209,76,52,43,171,191,132,36,104,196,140,135,182,191,233,193,101,220,17,32,183,191,104,113,77,67,44,35,188,191,134,168,195,102,96,78,186,191,246,87,26,37,206,141,183,191,215,26,4,76,247,25,183,191,223,226,25,198,106,45,191,191,49,240,152,169,105,102,190,191,161,200,49,168,4,188,160,191,235,68,43,188,234,22,163,63,84,242,82,36,131,148,177,191,107,153,213,52,71,111,174,191,114,239,61,17,212,82,160,191,224,190,97,135,223,1,161,63,115,134,38,109,146,120,172,191,36,221,3,217,75,214,170,191,135,155,138,85,29,204,172,191,160,173,121,84,148,243,173,191,188,163,197,3,143,75,183,63,112,186,189,79,193,100,182,63,18,69,245,71,130,187,183,63,222,24,213,71,46,119,176,63,237,139,252,250,94,113,169,191,179,129,156,52,246,233,177,63,74,112,218,242,163,85,163,191,186,196,69,80,177,146,175,63,101,191,67,168,96,17,176,63,214,38,177,189,182,141,177,191,220,142,237,128,242,62,178,63,223,179,149,126,199,44,170,191,23,48,34,15,133,244,178,63,189,3,122,47,206,177,175,63,96,147,244,141,116,130,180,63,115,218,224,221,30,124,169,63,29,84,27,160,104,27,179,63,71,185,240,55,190,59,164,191,189,34,127,99,100,67,168,63,103,213,17,102,187,48,176,63,243,62,74,213,17,208,175,191,249,29,62,233,79,105,171,191,198,215,93,59,10,56,164,191,135,135,9,208,14,167,179,63,212,208,75,51,102,57,176,191,62,190,112,184,174,104,166,63,20,125,22,140,208,167,178,63,84,56,39,14,100,20,162,63,189,216,159,118,126,195,163,191,194,24,73,58,83,101,165,63,5,73,198,230,187,64,162,63,213,153,157,63,221,214,164,191,44,162,38,21,34,50,168,191,158,65,214,54,217,59,178,191,27,191,93,61,61,250,175,191,73,130,183,155,175,32,168,191,137,25,53,130,103,73,173,63,43,226,246,77,107,34,167,63,24,144,163,87,246,167,175,191,197,36,115,44,0,250,176,63,146,218,237,29,10,156,175,191,85,207,20,67,249,93,166,191,103,6,129,172,50,45,175,63,242,224,151,240,126,172,171,63,194,227,49,225,204,219,162,63,240,166,112,119,110,77,185,191,238,202,172,77,163,187,187,191,110,24,153,192,205,154,184,191,212,173,246,48,24,252,181,191,14,144,192,224,117,129,188,191,235,133,248,199,237,219,190,191,66,150,204,113,167,48,185,191,91,32,210,48,120,87,181,191,228,106,234,99,189,64,172,191,66,19,174,74,14,43,182,191,174,122,224,146,61,239,176,191,150,10,43,218,212,110,169,63,196,140,46,195,123,110,168,191,13,218,46,199,171,26,181,191,237,108,53,175,68,104,178,63,159,23,35,136,243,159,175,63,72,112,49,10,93,183,180,63,79,57,245,60,240,97,177,191,144,227,247,242,221,108,178,63,199,221,29,151,4,47,176,191,163,246,66,85,133,45,180,63,80,253,214,160,252,238,180,63,12,54,213,190,45,10,182,63,77,229,69,249,87,162,186,191,177,81,175,184,119,153,178,63,102,45,48,4,32,163,189,191,123,123,30,207,226,144,167,191,20,155,100,42,169,29,180,63,15,223,193,231,231,10,172,191,34,160,0,214,247,34,177,63,137,241,35,169,82,105,173,191,140,12,189,179,193,150,167,191,198,224,145,135,248,210,181,191,120,36,204,247,145,239,177,63,182,177,161,33,219,87,180,191,221,126,235,219,188,245,179,191,60,15,240,98,190,168,181,63,228,2,205,61,41,5,164,191,180,123,218,17,108,168,177,63,147,198,17,7,53,118,167,191,188,210,139,226,203,131,167,191,151,242,62,10,6,51,173,191,133,82,20,71,95,127,164,191,186,136,44,27,19,23,174,191,221,34,132,46,19,36,180,191,69,167,247,254,159,71,173,191,41,78,105,182,23,254,171,191,90,24,70,193,8,116,176,63,216,170,252,53,74,31,175,63,91,139,70,144,18,191,175,191,164,87,238,144,17,48,178,63,194,231,141,204,90,232,181,63,18,102,238,167,93,203,178,191,190,53,146,81,24,104,166,63,164,245,103,182,114,153,171,63,53,205,145,16,181,6,175,63,180,81,77,71,106,109,179,63,118,8,14,244,86,33,177,191,75,145,175,207,27,6,172,63,152,234,50,45,159,233,167,63,94,117,186,202,174,252,170,63,86,34,128,221,96,208,165,63,63,219,209,5,234,228,172,63,128,161,83,23,236,113,182,191,167,228,199,44,21,203,181,191,123,137,224,234,130,225,189,63,156,107,22,168,33,230,183,63,143,62,81,23,155,152,176,63,4,62,2,250,72,4,186,191,78,86,22,164,164,210,180,191,107,72,124,51,137,129,193,63,193,164,89,61,225,78,187,63,188,228,241,245,97,107,177,191,47,120,180,163,181,15,169,191,240,31,132,70,187,146,185,63,147,1,94,64,96,34,173,63,46,93,96,3,211,179,173,191,108,237,45,157,181,158,176,63,70,17,196,84,91,104,176,191,151,156,154,75,204,1,177,63,142,205,201,10,71,240,180,63,250,101,199,136,179,155,177,191,250,161,115,135,174,100,172,63,55,8,8,64,137,44,176,191,201,224,36,129,62,106,189,191,72,151,202,202,137,74,182,63,254,198,254,3,170,216,188,191,247,58,199,144,156,23,176,63,214,80,251,156,16,223,187,191,203,71,67,178,43,99,184,191,12,221,106,8,48,226,190,191,19,240,230,190,243,92,180,63,183,112,197,85,135,105,179,191,95,141,212,179,6,200,184,191,68,214,153,201,8,141,184,63,34,19,6,185,192,187,186,191,185,46,132,235,218,25,185,191,32,37,138,146,208,85,166,63,130,18,62,235,227,176,166,63,113,161,162,76,139,61,177,63,161,214,114,237,191,242,176,191,141,136,120,226,167,103,176,191,42,190,113,91,152,176,175,191,213,143,89,155,83,151,173,191,85,1,181,211,211,53,178,191,28,128,80,147,86,152,167,191,186,223,255,43,210,184,177,63,149,217,115,87,13,100,176,191,90,82,235,118,225,82,163,63,29,19,57,96,19,165,171,191,250,71,102,222,183,236,162,63,148,208,143,187,21,230,174,63,122,33,152,81,181,167,173,63,254,71,25,83,22,2,174,63,59,180,251,5,64,118,174,63,184,106,142,159,162,92,179,63,178,57,255,203,232,23,181,63,85,153,252,166,4,163,175,191,141,180,49,224,228,131,184,63,140,186,24,172,142,108,182,63,76,234,23,134,195,104,180,191,37,229,7,169,176,80,186,63,6,43,219,165,97,121,178,63,111,42,203,133,53,222,178,63,155,116,46,23,210,157,182,191,205,135,42,67,20,103,170,63,229,6,233,198,157,65,180,63,50,151,190,156,202,40,170,63,125,204,49,42,190,245,164,191,241,126,136,113,181,94,169,63,149,58,106,66,18,138,167,63,10,53,190,41,7,12,163,191,52,57,173,13,48,54,171,191,67,188,54,29,134,71,173,63,67,189,36,101,48,155,183,191,87,113,199,158,157,218,191,63,16,215,195,122,69,252,183,63,243,14,81,0,135,133,187,191,191,164,58,200,124,87,187,191,68,143,145,220,101,47,193,63,98,71,11,223,0,34,182,63,235,232,132,61,126,171,188,191,231,182,210,238,10,67,168,191,101,78,73,188,36,200,164,191,229,23,223,8,14,28,180,63,208,196,133,63,88,237,165,191,100,19,13,57,32,74,165,63,186,131,233,151,225,17,166,191,163,120,107,166,59,182,177,63,13,105,149,47,200,57,168,63,12,86,139,140,91,122,180,191,162,27,58,253,147,223,174,63,53,98,112,0,83,42,183,191,28,177,18,94,144,2,179,191,107,252,225,60,207,124,189,191,247,42,160,169,27,73,180,63,66,203,139,92,125,70,171,63,45,176,181,94,229,169,167,191,39,229,176,116,225,94,180,191,47,90,122,20,208,202,177,63,143,149,241,187,28,187,183,191,118,54,163,147,196,119,185,63,234,168,90,180,26,138,164,63,244,161,105,11,1,190,173,63,102,21,232,26,6,126,167,191,231,63,38,27,138,37,168,191,19,79,170,124,100,152,169,191,65,132,55,235,246,118,177,63,146,148,204,78,136,221,173,63,212,240,20,193,12,172,176,63,104,176,115,59,46,253,180,63,46,81,23,208,101,61,179,191,213,47,33,7,155,156,173,191,123,175,70,79,42,21,180,63,86,233,202,129,191,213,171,63,232,150,227,45,79,219,178,191,21,52,244,137,129,178,179,63,41,226,44,83,184,238,183,191,13,236,3,76,201,98,171,63,31,83,80,223,20,55,179,191,236,155,26,215,74,34,169,63,253,9,182,195,240,198,168,63,193,162,212,157,5,241,179,191,125,207,143,138,110,238,165,63,66,5,107,196,20,227,168,191,103,3,183,184,31,180,168,191,42,74,80,181,111,68,171,191,181,38,55,165,180,170,168,63,129,239,31,92,68,145,182,191,1,249,54,247,91,56,184,63,183,131,45,208,21,146,188,191,213,193,244,52,9,171,187,63,51,255,84,249,30,122,183,191,152,37,157,77,236,12,185,63,216,254,3,88,123,245,189,191,201,164,9,173,252,247,190,63,175,55,254,229,87,193,171,191,140,155,123,156,244,205,171,63,65,188,115,41,53,53,167,63,220,124,14,34,43,251,169,191,116,25,102,104,19,23,170,191,49,145,115,245,127,216,174,63,65,28,82,32,47,165,174,63,23,187,59,236,67,178,175,191,17,99,30,241,24,181,175,191,163,152,26,65,237,208,168,191,40,158,172,241,30,147,165,191,50,145,241,158,111,102,176,63,215,63,80,74,8,84,163,63,59,194,161,254,134,110,165,63,23,40,144,229,73,209,167,191,168,236,103,129,96,242,170,191,6,90,71,113,127,84,162,63,126,212,143,222,145,90,165,191,216,223,117,28,228,97,164,63,169,110,141,15,169,16,169,63,246,146,219,23,55,168,168,63,181,160,70,1,99,47,174,191,21,154,131,181,104,7,168,191,212,183,57,226,91,173,165,191,212,178,185,239,34,86,167,63,10,169,130,142,208,127,168,191,61,104,235,128,4,82,188,191,149,139,59,29,170,55,186,63,228,234,18,41,195,105,185,191,76,117,254,50,44,148,181,63,122,218,172,249,7,27,189,191,54,140,167,109,69,80,190,63,212,2,210,253,193,20,185,191,236,215,161,74,247,95,182,63,91,45,124,20,1,51,176,191,186,67,33,45,89,207,174,63,162,142,146,227,119,183,174,63,93,101,10,155,9,127,163,191,247,47,90,62,34,117,176,63,139,99,153,133,187,73,170,191,85,102,77,225,167,95,162,63,184,79,25,132,75,72,170,191,86,163,100,242,43,102,162,63,160,64,54,48,77,73,161,191,57,131,189,81,168,159,166,63,172,40,32,195,6,91,181,191,106,163,138,106,213,154,185,63,224,94,162,146,143,171,188,63,148,24,164,7,65,204,184,191,62,136,248,147,240,219,184,191,34,0,195,4,99,113,185,63,172,178,148,217,97,211,190,63,146,148,122,98,147,9,188,191,224,10,254,168,147,92,179,63,59,108,65,232,248,14,173,191,250,139,112,23,103,201,180,191,208,214,219,168,102,7,173,63,93,197,231,151,241,134,176,191,72,66,123,218,24,66,169,63,202,111,194,118,52,105,172,191,15,198,85,221,5,163,177,63,254,232,122,56,104,47,179,191,1,76,165,65,27,230,173,63,135,5,250,251,244,143,175,191,148,141,123,74,178,159,179,191,230,120,235,237,229,132,187,191,32,87,74,242,59,86,183,63,37,58,164,251,213,4,184,63,125,228,4,53,45,173,184,191,11,249,211,177,247,123,190,191,97,181,43,195,236,242,184,63,122,99,31,233,67,192,186,63,85,48,226,242,129,53,165,191,48,116,84,13,187,189,171,191,118,29,77,54,61,112,167,63,22,34,58,191,180,162,169,63,221,54,163,143,14,48,165,63,236,60,120,187,132,31,167,191,224,153,231,245,95,5,165,191,132,206,140,130,180,133,182,191,0,113,102,132,214,242,184,191,83,190,17,245,221,166,190,191,50,228,94,156,17,176,185,191,151,126,66,110,156,193,186,191,152,66,40,206,138,255,185,191,193,49,134,128,229,174,188,191,178,213,247,157,167,149,188,191,127,37,165,21,120,159,164,191,242,217,85,18,82,234,167,191,189,6,243,23,252,107,169,191,116,114,243,250,254,19,172,191,204,0,220,0,221,0,222,0,223,0,236,0,237,0,252,0,255,0,192,1,193,1,196,1,200,1,201,1,203,1,204,1,205,1,206,1,208,1,209,1,212,1,214,1,216,1,217,1,220,1,223,1,224,1,225,1,227,1,229,1,230,1,232,1,233,1,234,1,235,1,237,1,238,1,240,1,243,1,244,1,246,1,248,1,253,1,192,2,195,2,196,2,198,2,199,2,200,2,201,2,202,2,203,2,204,2,207,2,208,2,210,2,212,2,218,2,220,2,222,2,224,2,226,2,227,2,228,2,231,2,232,2,233,2,236,2,237,2,239,2,241,2,247,2,12,3,13,3,14,3,28,3,30,3,31,3,46,3,62,3,76,3,77,3,79,3,93,3,94,3,95,3,108,3,109,3,124,3,140,3,141,3,158,3,173,3,174,3,189,3,190,3,191,3,204,3,205,3,207,3,220,3,221,3,223,3,236,3,238,3,254,3,204,0,192,1,204,1,208,1,212,1,216,1,220,1,192,2,196,2,200,2,201,2,204,2,212,2,12,3,13,3,14,3,76,3,77,3,140,3,141,3,143,3,205,3,207,3,192,1,200,1,192,2,196,2,197,2,204,2,13,3,76,3,77,3,205,3,192,1,196,1,200,1,204,1,192,2,196,2,197,2,13,3,76,3,140,3,192,1,193,1,197,1,200,1,201,1,204,1,205,1,196,2,197,2,76,3,77,3,78,3,140,3,141,3,142,3,205,3,193,1,197,1,201,1,205,1,193,2,77,3,78,3,141,3,142,3,193,1,197,1,201,1,205,1,193,2,78,3,140,3,193,1,197,1,201,1,205,1,141,3,204,3,194,1,198,1,202,1,206,1,14,3,78,3,142,3,206,3,194,1,198,1,202,1,206,1,14,3,78,3,142,3,206,3,206,0,194,1,198,1,202,1,206,1,14,3,77,3,78,3,141,3,206,3,194,1,198,1,202,1,206,1,14,3,143,3,205,3,207,0,195,1,199,1,203,1,207,1,14,3,15,3,79,3,141,3,142,3,143,3,195,1,199,1,203,1,207,1,14,3,15,3,142,3,207,3,195,1,199,1,203,1,207,1,142,3,195,1,199,1,203,1,207,1,204,0,192,1,196,1,208,1,212,1,216,1,220,1,252,1,204,2,208,2,212,2,220,2,12,3,76,3,77,3,92,3,140,3,141,3,204,3,205,3,207,3,252,3,204,0,208,1,212,1,216,1,220,1,192,2,196,2,204,2,208,2,13,3,76,3,77,3,140,3,141,3,204,3,192,1,200,1,204,1,208,1,212,1,192,2,196,2,12,3,13,3,141,3,204,3,205,3,204,0,192,1,196,1,200,1,204,1,12,3,13,3,193,1,197,1,201,1,205,1,193,2,141,3,204,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,13,3,193,1,197,1,201,1,205,1,13,3,194,1,198,1,202,1,206,1,78,3,206,3,194,1,198,1,202,1,206,1,194,2,14,3,78,3,206,3,194,1,198,1,202,1,206,1,14,3,77,3,206,3,194,1,198,1,202,1,206,1,14,3,141,3,142,3,143,3,195,1,199,1,203,1,207,1,78,3,79,3,142,3,143,3,195,1,199,1,203,1,207,1,14,3,15,3,142,3,207,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,192,1,196,1,200,1,204,1,208,1,212,1,216,1,220,1,212,2,12,3,28,3,76,3,140,3,141,3,156,3,204,3,205,3,236,3,204,0,192,1,200,1,208,1,212,1,216,1,220,1,196,2,212,2,12,3,13,3,76,3,77,3,140,3,204,3,204,0,196,1,200,1,204,1,208,1,212,1,216,1,13,3,76,3,140,3,192,1,196,1,200,1,204,1,12,3,13,3,140,3,192,1,193,1,196,1,197,1,200,1,201,1,204,1,205,1,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,194,1,198,1,202,1,206,1,14,3,78,3,206,3,194,1,198,1,202,1,206,1,14,3,78,3,142,3,206,3,194,1,198,1,202,1,206,1,14,3,78,3,194,1,198,1,202,1,206,1,14,3,195,1,199,1,203,1,207,1,215,1,219,1,14,3,15,3,79,3,142,3,143,3,207,3,195,1,199,1,203,1,207,1,14,3,15,3,78,3,79,3,195,1,199,1,203,1,207,1,14,3,143,3,195,1,199,1,203,1,207,1,220,0,196,1,208,1,212,1,216,1,220,1,200,2,12,3,28,3,76,3,77,3,92,3,140,3,156,3,204,3,192,1,196,1,200,1,208,1,212,1,216,1,220,1,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,192,1,196,1,216,1,220,1,140,3,156,3,204,3,212,1,202,1,14,3,78,3,142,3,206,3,14,3,78,3,142,3,206,3,202,1,14,3,78,3,142,3,206,3,14,3,78,3,14,3,15,3,78,3,204,0,220,0,196,1,208,1,212,1,228,1,232,1,208,2,28,3,92,3,156,3,204,3,220,3,196,1,208,2,28,3,76,3,92,3,140,3,156,3,204,3,220,3,216,1,220,1,28,3,92,3,140,3,204,3,213,1,217,1,221,1,158,3,222,3,214,1,94,3,158,3,222,3,210,1,218,1,30,3,222,3,211,1,219,1,95,3,222,3,30,3,159,3,222,3,211,1,220,0,220,1,224,1,228,1,232,1,208,2,28,3,92,3,156,3,220,3,212,1,228,1,232,1,208,2,28,3,92,3,156,3,220,3,220,0,208,2,28,3,156,3,157,3,213,1,218,1,222,3,214,1,30,3,222,3,218,1,222,1,30,3,222,3,214,1,94,3,223,3,219,1,223,1,30,3,31,3,223,3,199,1,211,1,215,1,223,1,211,1,219,1,211,1,215,1,223,1,220,0,216,1,220,1,224,1,228,1,232,1,236,1,208,2,28,3,92,3,140,3,156,3,220,3,212,1,220,1,224,1,228,1,232,1,236,1,208,2,28,3,92,3,156,3,220,3,208,1,216,1,232,1,236,1,208,2,212,2,28,3,92,3,220,3,29,3,92,3,93,3,156,3,29,3,93,3,94,3,222,3,214,1,158,3,222,3,31,3,192,1,208,1,216,1,220,1,224,1,228,1,232,1,252,1,208,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,212,1,220,1,232,1,28,3,92,3,156,3,172,3,220,3,216,1,28,3,92,3,156,3,172,3,220,3,236,3,236,3,109,3,173,3,30,3,94,3,31,3,208,1,216,1,44,3,108,3,172,3,236,3,220,0,212,1,228,1,44,3,108,3,172,3,236,3,232,1,44,3,92,3,108,3,172,3,108,3,109,3,238,3,46,3,174,3,175,3,47,3,212,1,220,1,224,1,228,1,232,1,236,1,224,2,44,3,108,3,172,3,236,3,212,1,216,1,224,1,228,1,236,1,44,3,108,3,172,3,236,3,224,1,232,1,236,1,44,3,108,3,172,3,236,3,224,1,228,1,232,1,236,1,172,3,173,3,225,1,237,1,108,3,173,3,225,1,229,1,237,1,173,3,173,3,110,3,46,3,47,3,239,3,212,1,216,1,224,1,228,1,232,1,236,1,224,2,44,3,108,3,172,3,236,3,208,1,220,1,224,1,228,1,236,1,44,3,108,3,172,3,236,3,216,1,220,1,224,1,232,1,236,1,44,3,108,3,172,3,236,3,224,1,228,1,232,1,236,1,108,3,229,1,237,1,225,2,45,3,109,3,225,1,229,1,233,1,109,3,233,1,174,3,238,3,46,3,212,1,220,1,224,1,228,1,232,1,236,1,44,3,60,3,108,3,172,3,236,3,224,1,228,1,232,1,236,1,44,3,108,3,172,3,236,3,224,1,228,1,232,1,236,1,44,3,108,3,172,3,236,3,224,1,228,1,232,1,236,1,172,3,236,3,253,3,225,1,233,1,173,3,173,3,189,3,237,3,175,3,224,1,228,1,232,1,236,1,244,1,252,1,60,3,124,3,188,3,252,3,224,1,228,1,232,1,244,1,60,3,124,3,188,3,252,3,224,1,228,1,232,1,236,1,248,1,252,1,60,3,124,3,188,3,252,3,224,1,228,1,232,1,236,1,237,1,61,3,125,3,61,3,125,3,173,3,237,3,255,1,224,1,228,1,232,1,236,1,240,1,248,1,252,1,60,3,124,3,188,3,252,3,224,1,228,1,236,1,244,1,252,1,60,3,124,3,188,3,252,3,228,1,232,1,236,1,240,1,248,1,252,1,60,3,124,3,188,3,252,3,188,3,60,3,61,3,189,3,189,3,253,3,189,3,224,1,232,1,244,1,248,1,60,3,124,3,188,3,252,3,236,1,60,3,124,3,188,3,252,3,248,1,252,1,60,3,124,3,188,3,252,3,232,1,124,3,60,3,61,3,125,3,61,3,125,3,253,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,189,3,252,3,253,3,188,3,125,3,253,3,189,3,253,3,204,0,205,0,220,0,192,1,196,1,200,1,204,1,205,1,216,1,220,1,228,1,192,2,208,2,12,3,28,3,76,3,140,3,141,3,157,3,204,3,205,3,204,0,192,1,196,1,200,1,204,1,205,1,208,1,212,1,216,1,220,1,192,2,196,2,200,2,208,2,12,3,204,0,192,1,196,1,197,1,200,1,204,1,205,1,208,1,212,1,216,1,220,1,192,2,196,2,197,2,204,2,204,0,192,1,193,1,196,1,197,1,200,1,201,1,204,1,208,1,212,1,216,1,220,1,192,2,193,2,196,2,197,2,200,2,204,2,204,0,192,1,193,1,194,1,196,1,197,1,200,1,201,1,204,1,205,1,209,1,213,1,217,1,192,2,193,2,196,2,197,2,200,2,204,2,77,3,205,0,193,1,197,1,201,1,204,1,205,1,213,1,217,1,193,2,200,2,201,2,205,0,193,1,197,1,201,1,205,1,209,1,213,1,217,1,221,1,193,2,197,2,198,2,205,2,13,3,205,0,206,0,193,1,194,1,197,1,198,1,201,1,202,1,205,1,206,1,209,1,213,1,217,1,221,1,193,2,194,2,197,2,198,2,205,2,206,0,193,1,194,1,197,1,198,1,201,1,202,1,205,1,206,1,222,1,193,2,194,2,197,2,198,2,201,2,205,2,206,2,204,0,206,0,192,1,194,1,198,1,202,1,206,1,214,1,218,1,194,2,14,3,142,3,204,0,206,0,192,1,194,1,198,1,202,1,206,1,214,1,194,2,198,2,78,3,194,1,195,1,198,1,199,1,202,1,203,1,206,1,207,1,218,1,222,1,194,2,198,2,202,2,206,2,194,1,195,1,199,1,202,1,203,1,206,1,207,1,79,3,194,1,195,1,199,1,203,1,207,1,195,2,15,3,142,3,194,1,195,1,199,1,203,1,207,1,15,3,195,1,199,1,203,1,207,1,215,1,204,0,192,1,200,1,196,2,12,3,13,3,76,3,77,3,140,3,141,3,204,3,205,3,196,1,204,1,208,1,220,1,196,2,76,3,140,3,200,1,204,1,216,1,220,1,192,1,196,1,200,1,204,1,208,1,212,1,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,205,3,193,1,197,1,201,1,205,1,194,1,198,1,202,1,206,1,206,3,194,1,198,1,202,1,206,1,206,3,206,0,194,1,198,1,202,1,206,1,194,2,142,3,194,1,198,1,202,1,206,1,207,1,195,1,199,1,203,1,207,1,79,3,207,3,195,1,199,1,203,1,207,1,79,3,207,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,220,0,220,1,12,3,13,3,28,3,76,3,77,3,140,3,141,3,204,3,205,3,208,1,220,1,12,3,76,3,204,3,142,3,206,3,143,3,207,3,203,1,204,0,220,0,216,1,12,3,13,3,76,3,77,3,92,3,140,3,141,3,156,3,204,3,205,3,220,3,212,1,216,1,12,3,76,3,140,3,204,3,14,3,78,3,142,3,206,3,143,3,207,3,220,0,208,1,216,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,221,3,208,1,28,3,92,3,156,3,213,1,217,1,221,1,222,3,222,3,159,3,220,0,208,1,212,1,216,1,212,2,216,2,220,2,12,3,28,3,76,3,92,3,93,3,156,3,204,3,220,3,220,0,212,1,28,3,92,3,156,3,220,3,221,2,221,3,94,3,220,0,236,0,208,1,212,1,208,2,212,2,216,2,220,2,12,3,28,3,76,3,92,3,108,3,140,3,156,3,204,3,220,3,220,0,216,1,216,2,28,3,92,3,156,3,220,3,95,3,220,0,236,0,208,1,208,2,216,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,236,3,220,0,216,1,228,1,28,3,92,3,156,3,220,3,237,0,173,3,230,1,110,3,239,0,227,1,239,1,95,3,159,3,175,3,239,3,236,0,212,1,224,1,232,1,212,2,224,2,228,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,236,3,236,0,228,1,236,2,44,3,108,3,172,3,236,3,216,1,220,1,232,1,236,1,224,1,228,1,232,1,236,1,233,2,109,3,237,3,237,0,224,1,228,1,232,1,236,1,237,2,173,3,237,3,237,0,225,1,233,1,173,3,237,3,237,0,225,1,229,1,233,1,237,1,225,2,229,2,109,3,173,3,229,1,233,1,45,3,109,3,237,0,231,1,226,2,47,3,175,3,236,0,224,1,228,1,232,1,224,2,228,2,232,2,44,3,108,3,172,3,236,3,236,0,228,1,224,2,44,3,108,3,172,3,173,3,236,3,224,1,228,1,232,1,236,1,237,1,173,3,237,3,237,0,233,1,237,1,229,2,237,2,109,3,173,3,237,0,233,1,225,2,237,2,45,3,109,3,173,3,237,0,225,1,229,1,233,1,237,1,225,2,233,2,237,2,45,3,173,3,237,0,238,1,225,2,229,2,233,2,237,2,110,3,238,3,225,1,229,1,233,1,237,1,229,2,236,0,224,1,228,1,232,1,224,2,228,2,232,2,44,3,108,3,172,3,236,3,236,0,228,1,232,1,232,2,44,3,108,3,172,3,236,3,237,0,233,1,237,1,109,3,237,3,237,0,229,1,45,3,109,3,237,0,229,1,109,3,173,3,174,3,237,3,229,1,233,1,237,1,109,3,110,3,174,3,238,0,225,1,226,1,229,1,233,1,234,1,237,1,226,2,229,2,230,2,233,2,110,3,174,3,238,0,234,1,174,3,238,3,238,3,255,1,239,3,236,0,227,1,228,1,243,1,228,2,243,2,244,2,44,3,60,3,108,3,172,3,188,3,236,3,252,3,232,1,232,2,44,3,108,3,172,3,188,3,236,3,237,2,173,3,237,3,237,0,229,1,241,1,225,2,61,3,173,3,237,3,253,3,249,1,61,3,125,3,189,3,253,3,255,0,245,1,251,1,226,2,174,3,191,3,238,3,255,3,238,0,233,1,234,1,246,1,254,1,226,2,250,2,238,3,238,1,46,3,110,3,190,3,254,3,246,2,46,3,238,0,254,0,224,1,226,1,227,1,230,1,231,1,234,1,238,1,242,1,243,1,246,1,250,1,254,1,226,2,227,2,230,2,231,2,234,2,238,2,44,3,46,3,62,3,108,3,110,3,172,3,174,3,191,3,236,3,238,3,239,3,254,3,255,3,223,0,239,0,255,0,219,1,227,1,228,1,231,1,235,1,239,1,243,1,247,1,251,1,255,1,227,2,231,2,235,2,239,2,243,2,14,3,44,3,46,3,47,3,108,3,110,3,111,3,174,3,175,3,191,3,236,3,238,3,239,3,255,3,238,0,226,1,227,1,230,1,238,1,226,2,230,2,234,2,238,2,46,3,110,3,174,3,238,3,254,3,252,0,227,1,248,1,224,2,243,2,244,2,250,2,252,2,254,2,44,3,60,3,62,3,108,3,124,3,126,3,172,3,188,3,236,3,252,3,60,3,124,3,172,3,188,3,252,3,61,3,245,1,253,1,233,2,245,2,253,2,61,3,125,3,241,1,253,1,241,2,245,2,61,3,125,3,189,3,253,3,231,1,242,1,246,1,254,1,61,3,126,3,246,1,247,1,250,1,253,3,254,3,246,1,254,1,234,2,246,2,250,2,234,1,254,3,238,0,254,0,226,1,230,1,234,1,242,1,243,1,244,1,246,1,247,1,250,1,251,1,254,1,242,2,243,2,246,2,247,2,248,2,250,2,251,2,254,2,46,3,60,3,62,3,63,3,110,3,124,3,126,3,188,3,190,3,191,3,238,3,252,3,254,3,255,3,239,0,255,0,227,1,231,1,243,1,247,1,251,1,255,1,243,2,247,2,248,2,251,2,254,2,255,2,47,3,60,3,62,3,63,3,127,3,175,3,190,3,191,3,252,3,255,3,254,0,246,1,247,1,250,1,254,1,242,2,246,2,250,2,254,2,62,3,125,3,126,3,190,3,254,3,250,1,126,3,190,3,252,0,240,2,60,3,124,3,188,3,252,3,252,0,244,1,60,3,124,3,188,3,252,3,124,3,241,2,245,2,189,3,253,3,249,1,253,1,245,2,125,3,189,3,241,1,245,1,253,1,241,2,245,2,254,1,246,1,250,1,254,1,242,2,246,2,254,3,238,0,234,1,238,1,243,1,226,2,230,2,238,2,46,3,110,3,174,3,238,3,239,0,255,0,227,1,235,1,239,1,227,2,239,2,47,3,111,3,175,3,191,3,239,3,255,3,255,3,252,0,252,1,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,248,1,252,1,125,3,241,1,61,3,253,3,245,1,245,2,189,3,63,3,126,3,242,1,251,2,63,3,127,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,245,1,253,3,250,1,254,3,62,3,226,1,230,1,238,1,255,0,231,1,235,1,247,2,47,3,255,3,247,1,254,1,255,1,243,2,247,2,255,3,192,1,204,1,208,1,192,2,200,2,208,2,12,3,77,3,92,3,140,3,141,3,142,3,156,3,204,3,205,3,206,3,207,3,221,3,204,0,192,1,196,1,200,1,204,1,192,2,13,3,76,3,77,3,140,3,141,3,204,3,205,3,192,1,196,1,200,1,204,1,192,2,77,3,141,3,205,3,192,1,196,1,200,1,204,1,77,3,141,3,142,3,205,3,193,1,197,1,201,1,205,1,77,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122880);
/* memory initializer */ allocate([78,3,141,3,205,3,206,3,193,1,197,1,201,1,205,1,78,3,141,3,142,3,205,3,206,3,193,1,197,1,201,1,205,1,78,3,142,3,193,1,197,1,201,1,205,1,77,3,78,3,142,3,205,3,206,3,194,1,198,1,202,1,206,1,14,3,141,3,206,3,194,1,198,1,202,1,206,1,142,3,143,3,194,1,198,1,202,1,206,1,207,3,194,1,198,1,202,1,206,1,143,3,195,1,199,1,203,1,207,1,143,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,192,1,196,1,204,1,220,1,192,2,196,2,204,2,212,2,12,3,76,3,77,3,140,3,141,3,156,3,204,3,205,3,204,0,192,1,200,1,204,1,192,2,196,2,12,3,28,3,76,3,77,3,140,3,141,3,204,3,205,3,204,0,192,1,196,1,200,1,204,1,192,2,200,2,76,3,77,3,141,3,204,3,205,3,192,1,196,1,200,1,204,1,77,3,205,3,193,1,197,1,201,1,205,1,77,3,205,3,193,1,197,1,201,1,205,1,77,3,205,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,78,3,206,3,194,1,198,1,202,1,206,1,78,3,206,3,194,1,198,1,202,1,206,1,78,3,206,3,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,220,0,192,1,196,1,200,1,204,1,208,1,212,1,192,2,196,2,12,3,28,3,76,3,92,3,140,3,141,3,156,3,204,3,204,0,192,1,196,1,200,1,216,1,192,2,76,3,140,3,204,3,205,3,204,0,192,1,196,1,200,1,192,2,196,2,76,3,140,3,204,3,192,1,196,1,200,1,204,1,192,2,196,2,197,1,201,1,141,3,205,3,193,1,201,1,205,1,141,3,205,3,193,1,197,1,205,1,193,1,197,1,201,1,205,1,142,3,206,3,194,1,198,1,206,1,194,1,198,1,202,1,206,1,142,3,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,220,0,196,1,200,1,204,1,208,1,212,1,220,1,192,2,208,2,212,2,28,3,92,3,140,3,156,3,204,3,220,3,204,0,220,0,196,1,200,1,212,1,216,1,192,2,208,2,12,3,28,3,76,3,92,3,156,3,220,3,204,0,220,0,196,1,200,1,212,1,216,1,192,2,12,3,28,3,76,3,92,3,156,3,93,3,13,3,77,3,13,3,77,3,14,3,78,3,204,0,220,0,196,1,200,1,208,1,212,1,216,1,220,1,192,2,208,2,212,2,12,3,28,3,76,3,92,3,140,3,204,3,204,0,220,0,196,1,212,1,216,1,220,1,192,2,208,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,220,0,200,1,212,1,216,1,192,2,208,2,212,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,0,216,1,217,1,220,1,208,2,212,2,157,3,221,0,209,2,157,3,221,0,217,1,209,2,157,3,221,0,157,3,158,3,220,0,208,1,212,1,216,1,220,1,208,2,212,2,28,3,140,3,156,3,204,3,220,3,220,0,212,1,216,1,220,1,208,2,216,2,12,3,28,3,76,3,92,3,156,3,220,3,220,0,212,1,216,1,208,2,212,2,216,2,28,3,92,3,156,3,220,0,221,0,208,1,212,1,213,1,216,1,217,1,220,1,208,2,212,2,92,3,93,3,156,3,221,0,208,2,209,2,212,2,93,3,221,0,217,1,209,2,93,3,157,3,221,0,213,1,209,2,93,3,218,1,94,3,214,1,220,0,208,1,212,1,216,1,220,1,208,2,212,2,28,3,92,3,220,3,220,0,212,1,216,1,220,1,208,2,216,2,12,3,28,3,76,3,92,3,156,3,220,0,212,1,216,1,208,2,212,2,216,2,28,3,92,3,156,3,220,0,221,0,208,1,212,1,213,1,216,1,217,1,220,1,208,2,212,2,213,2,92,3,156,3,157,3,221,0,208,2,209,2,212,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,218,1,158,3,220,0,236,0,212,1,216,1,220,1,228,1,236,1,208,2,212,2,224,2,28,3,44,3,92,3,156,3,172,3,220,3,236,3,220,0,236,0,212,1,216,1,220,1,228,1,232,1,208,2,224,2,28,3,44,3,108,3,156,3,172,3,220,3,236,3,220,0,236,0,212,1,216,1,228,1,232,1,208,2,212,2,216,2,224,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,236,3,220,0,208,1,212,1,216,1,220,1,232,1,236,1,208,2,212,2,28,3,44,3,92,3,109,3,221,0,213,2,29,3,93,3,109,3,221,0,213,1,209,2,45,3,109,3,221,0,236,0,216,1,228,1,232,1,236,1,224,2,228,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,236,0,212,1,228,1,232,1,236,1,224,2,28,3,44,3,92,3,108,3,156,3,220,3,220,0,236,0,216,1,228,1,232,1,224,2,228,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,236,3,236,0,224,1,228,1,229,1,232,1,233,1,236,1,224,2,225,2,228,2,28,3,44,3,45,3,92,3,156,3,172,3,173,3,236,3,237,0,225,2,45,3,93,3,173,3,237,0,229,1,225,2,45,3,93,3,173,3,237,0,236,0,228,1,232,1,236,1,224,2,228,2,44,3,108,3,172,3,236,3,236,0,228,1,232,1,236,1,224,2,232,2,44,3,108,3,172,3,236,3,236,0,228,1,232,1,236,1,224,2,228,2,232,2,44,3,108,3,172,3,236,0,237,0,224,1,228,1,229,1,232,1,233,1,236,1,224,2,228,2,229,2,108,3,109,3,172,3,173,3,237,0,224,1,228,1,232,1,233,1,236,1,224,2,225,2,228,2,229,2,109,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,233,1,225,2,109,3,173,3,110,3,234,1,110,3,110,3,236,0,228,1,232,1,236,1,224,2,44,3,108,3,172,3,236,3,236,0,228,1,232,1,236,1,224,2,232,2,44,3,108,3,172,3,236,3,236,0,228,1,232,1,236,1,224,2,228,2,44,3,108,3,172,3,236,0,224,1,228,1,229,1,233,1,224,2,228,2,229,2,108,3,109,3,172,3,173,3,237,0,224,1,228,1,232,1,233,1,236,1,224,2,225,2,228,2,229,2,109,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,233,1,225,2,109,3,173,3,174,3,174,3,236,0,232,1,236,1,224,2,44,3,60,3,108,3,172,3,236,3,252,3,236,0,228,1,236,1,244,1,224,2,240,2,44,3,60,3,108,3,124,3,172,3,188,3,236,3,252,3,236,0,232,1,236,1,244,1,248,1,224,2,60,3,124,3,172,3,188,3,236,3,252,3,236,0,224,1,228,1,224,2,228,2,44,3,60,3,108,3,125,3,252,3,237,0,233,1,225,2,61,3,125,3,173,3,237,3,253,3,237,0,229,1,225,2,45,3,61,3,109,3,125,3,173,3,45,3,61,3,173,3,232,1,236,1,252,1,240,2,44,3,60,3,124,3,188,3,252,3,252,0,228,1,236,1,244,1,248,1,252,1,240,2,44,3,60,3,108,3,124,3,172,3,188,3,236,3,252,0,232,1,244,1,248,1,44,3,60,3,108,3,124,3,172,3,236,3,252,3,240,1,244,1,44,3,60,3,61,3,108,3,172,3,188,3,236,3,45,3,61,3,109,3,245,1,241,2,45,3,61,3,109,3,173,3,189,3,237,3,45,3,61,3,109,3,252,1,60,3,124,3,188,3,252,3,232,1,244,1,240,2,60,3,188,3,252,3,252,0,248,1,240,2,60,3,124,3,188,3,252,3,124,3,188,3,189,3,124,3,125,3,189,3,245,1,241,2,125,3,189,3,125,3,189,3,60,3,124,3,188,3,252,3,244,1,60,3,124,3,188,3,252,3,124,3,252,3,124,3,188,3,125,3,125,3,189,3,125,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,124,3,188,3,252,3,204,0,220,0,221,0,192,1,196,1,204,1,208,1,192,2,200,2,226,2,12,3,15,3,28,3,76,3,77,3,140,3,141,3,157,3,158,3,204,3,207,3,204,0,192,1,196,1,204,1,208,1,216,1,193,2,204,2,76,3,141,3,204,3,192,1,196,1,200,1,204,1,193,2,192,1,196,1,200,1,204,1,192,2,193,1,197,1,201,1,205,1,200,2,13,3,76,3,193,1,197,1,201,1,205,1,205,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,194,1,198,1,202,1,206,1,142,3,206,3,194,1,198,1,202,1,206,1,14,3,142,3,206,3,194,1,198,1,202,1,206,1,142,3,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,207,3,195,1,199,1,203,1,207,1,15,3,195,1,199,1,203,1,207,1,79,3,143,3,206,3,207,3,195,1,199,1,203,1,207,1,143,3,204,0,220,0,196,1,204,1,208,1,216,1,196,2,200,2,12,3,28,3,76,3,77,3,140,3,156,3,204,3,220,3,192,1,196,1,204,1,208,1,216,1,200,2,76,3,204,3,192,1,196,1,200,1,204,1,208,1,212,1,192,2,200,2,192,1,196,1,200,1,204,1,193,1,197,1,201,1,205,1,12,3,140,3,193,1,197,1,201,1,205,1,13,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,78,3,194,1,198,1,202,1,206,1,14,3,206,3,194,1,198,1,202,1,206,1,14,3,78,3,206,3,194,1,198,1,202,1,206,1,78,3,194,1,198,1,202,1,206,1,214,1,195,1,199,1,203,1,207,1,15,3,207,3,195,1,199,1,203,1,207,1,79,3,195,1,199,1,203,1,207,1,79,3,143,3,195,1,199,1,203,1,207,1,204,0,220,0,196,1,200,1,204,1,208,1,212,1,216,1,196,2,200,2,208,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,192,1,196,1,200,1,208,1,212,1,216,1,220,1,196,2,12,3,76,3,140,3,204,3,192,1,196,1,200,1,204,1,208,1,212,1,216,1,220,1,192,1,196,1,200,1,204,1,208,1,212,1,216,1,220,1,193,1,197,1,200,1,201,1,204,1,205,1,213,1,217,1,193,1,197,1,201,1,205,1,209,1,213,1,217,1,193,1,197,1,201,1,205,1,209,1,213,1,217,1,193,1,197,1,201,1,205,1,209,1,213,1,217,1,221,1,194,1,198,1,202,1,206,1,214,1,222,1,14,3,78,3,194,1,198,1,202,1,206,1,214,1,218,1,14,3,78,3,194,1,198,1,202,1,206,1,210,1,214,1,194,1,198,1,202,1,206,1,210,1,214,1,218,1,222,1,195,1,199,1,203,1,207,1,211,1,219,1,195,1,199,1,203,1,207,1,211,1,219,1,143,3,207,3,195,1,199,1,203,1,207,1,211,1,219,1,223,1,15,3,79,3,195,1,199,1,203,1,207,1,211,1,215,1,219,1,204,0,220,0,196,1,200,1,204,1,208,1,212,1,216,1,192,2,208,2,212,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,192,1,196,1,200,1,208,1,216,1,220,1,196,2,208,2,12,3,76,3,140,3,204,3,192,1,196,1,200,1,204,1,208,1,212,1,216,1,220,1,192,1,196,1,200,1,204,1,208,1,212,1,216,1,220,1,193,1,197,1,201,1,205,1,209,1,213,1,217,1,193,1,197,1,201,1,205,1,209,1,217,1,193,1,197,1,201,1,209,1,213,1,217,1,193,1,197,1,201,1,205,1,209,1,213,1,217,1,221,1,194,1,198,1,202,1,206,1,214,1,218,1,14,3,78,3,142,3,206,3,194,1,198,1,202,1,206,1,210,1,214,1,218,1,14,3,78,3,194,1,198,1,202,1,206,1,214,1,218,1,222,1,14,3,78,3,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,215,1,219,1,207,3,195,1,199,1,203,1,207,1,215,1,195,1,199,1,203,1,195,1,199,1,203,1,207,1,204,0,220,0,196,1,200,1,208,1,212,1,220,1,228,1,208,2,212,2,220,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,192,1,196,1,200,1,204,1,208,1,216,1,220,1,208,2,28,3,92,3,156,3,220,3,192,1,196,1,200,1,204,1,208,1,212,1,220,1,208,2,192,1,196,1,200,1,204,1,208,1,212,1,216,1,220,1,193,1,201,1,209,1,213,1,193,1,197,1,201,1,217,1,193,1,197,1,201,1,193,1,197,1,201,1,198,1,30,3,94,3,94,3,31,3,204,0,220,0,192,1,200,1,208,1,212,1,216,1,220,1,224,1,208,2,212,2,12,3,28,3,92,3,156,3,204,3,220,3,192,1,204,1,212,1,216,1,224,1,232,1,208,2,28,3,92,3,156,3,220,3,192,1,196,1,200,1,204,1,208,1,212,1,216,1,208,2,192,1,196,1,200,1,204,1,216,1,220,1,201,1,209,1,217,1,157,3,30,3,222,3,218,1,30,3,220,0,196,1,208,1,212,1,216,1,220,1,224,1,228,1,208,2,212,2,28,3,76,3,92,3,220,3,220,0,212,1,216,1,224,1,232,1,208,2,28,3,92,3,220,3,208,1,216,1,224,1,228,1,208,2,208,1,212,1,224,1,228,1,217,1,229,1,213,1,229,1,217,1,209,1,213,1,214,1,30,3,94,3,218,1,210,1,214,1,219,1,223,1,223,1,220,0,208,1,216,1,220,1,224,1,228,1,236,1,244,1,208,2,212,2,224,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,236,3,220,0,208,1,212,1,220,1,224,1,232,1,208,2,224,2,28,3,92,3,108,3,156,3,172,3,220,3,236,3,208,1,216,1,220,1,224,1,228,1,232,1,236,1,208,2,208,1,212,1,216,1,220,1,224,1,228,1,232,1,236,1,213,1,217,1,221,1,225,1,229,1,233,1,213,1,217,1,229,1,233,1,209,1,213,1,217,1,221,1,225,1,229,1,209,1,213,1,217,1,210,1,226,1,230,1,210,1,214,1,218,1,226,1,210,1,218,1,226,1,230,1,210,1,214,1,215,1,211,1,219,1,227,1,231,1,220,0,236,0,216,1,224,1,228,1,232,1,236,1,244,1,208,2,224,2,228,2,28,3,44,3,92,3,108,3,156,3,220,3,236,3,220,0,236,0,208,1,212,1,220,1,232,1,208,2,224,2,28,3,44,3,92,3,108,3,156,3,220,3,208,1,212,1,216,1,220,1,224,1,228,1,236,1,224,2,236,3,208,1,212,1,216,1,220,1,224,1,228,1,232,1,236,1,213,1,217,1,221,1,225,1,229,1,237,1,209,1,213,1,217,1,225,1,233,1,209,1,213,1,217,1,225,1,229,1,209,1,213,1,233,1,237,1,214,1,222,1,226,1,230,1,214,1,234,1,210,1,214,1,230,1,110,3,214,1,211,1,236,0,224,1,228,1,232,1,236,1,240,1,224,2,228,2,44,3,60,3,108,3,172,3,236,0,208,1,220,1,228,1,232,1,224,2,44,3,108,3,172,3,236,0,208,1,212,1,228,1,236,1,224,2,108,3,208,1,212,1,232,1,236,1,224,2,228,2,213,1,225,1,229,1,213,1,225,1,233,1,229,1,214,1,214,1,234,1,236,0,224,1,228,1,232,1,236,1,240,1,224,2,228,2,108,3,172,3,236,3,236,0,228,1,232,1,248,1,224,2,44,3,108,3,228,1,232,1,240,1,244,1,224,2,108,3,172,3,224,2,172,3,245,1,236,0,252,0,224,1,228,1,236,1,240,1,244,1,224,2,44,3,60,3,108,3,124,3,172,3,188,3,236,3,252,3,236,0,228,1,232,1,248,1,224,2,240,2,44,3,60,3,108,3,124,3,172,3,188,3,236,3,252,3,224,1,232,1,240,1,244,1,224,2,224,1,228,1,240,1,244,1,248,1,252,1,241,1,229,1,241,1,249,1,241,1,245,1,249,1,253,1,246,1,250,1,234,1,226,1,230,1,231,1,236,0,252,0,220,1,228,1,240,1,244,1,240,2,44,3,60,3,172,3,188,3,236,3,252,3,236,0,252,0,228,1,248,1,240,2,44,3,60,3,108,3,124,3,172,3,188,3,236,3,252,3,240,1,244,1,252,1,240,1,244,1,248,1,252,1,241,1,245,1,249,1,241,1,253,1,241,1,245,1,246,1,242,1,246,1,250,1,254,1,251,1,252,0,216,1,224,1,240,1,244,1,240,2,60,3,76,3,124,3,140,3,252,3,252,0,248,1,240,2,124,3,188,3,252,3,188,3,240,1,244,1,248,1,252,1,241,1,245,1,232,1,240,1,244,1,44,3,60,3,188,3,252,3,252,0,60,3,124,3,188,3,252,3,124,3,60,3,76,3,124,3,140,3,188,3,252,3,60,3,124,3,188,3,252,3,204,0,205,0,220,0,192,1,193,1,196,1,200,1,204,1,208,1,196,2,12,3,13,3,76,3,77,3,140,3,141,3,204,3,205,3,196,1,204,1,192,2,13,3,77,3,140,3,141,3,192,1,196,1,200,1,204,1,192,2,13,3,77,3,141,3,192,1,196,1,200,1,204,1,77,3,141,3,197,1,201,1,205,1,77,3,193,1,197,1,201,1,205,1,77,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,78,3,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,79,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,220,0,192,1,196,1,200,1,204,1,212,1,192,2,200,2,12,3,13,3,76,3,140,3,141,3,204,3,220,3,204,0,196,1,200,1,204,1,192,2,200,2,12,3,76,3,140,3,192,1,200,1,204,1,192,2,196,2,200,2,140,3,192,1,196,1,197,1,200,1,204,1,192,2,196,2,193,1,197,1,201,1,205,1,192,2,196,2,141,3,193,1,197,1,201,1,205,1,141,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,220,0,192,1,196,1,200,1,204,1,216,1,220,1,192,2,208,2,76,3,140,3,204,3,220,3,204,0,192,1,196,1,200,1,204,1,192,2,200,2,12,3,76,3,140,3,204,0,196,1,200,1,204,1,192,2,196,2,200,2,12,3,76,3,140,3,192,1,196,1,197,1,201,1,192,2,196,2,197,2,204,2,201,1,205,1,192,2,193,2,196,2,13,3,77,3,197,1,205,1,193,2,77,3,201,1,205,1,193,1,197,1,201,1,205,1,202,1,206,1,194,1,198,1,206,1,194,1,202,1,206,1,194,1,198,1,202,1,206,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,220,0,196,1,204,1,208,1,216,1,220,1,192,2,208,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,220,0,192,1,196,1,200,1,212,1,216,1,220,1,192,2,200,2,208,2,12,3,28,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,196,1,200,1,212,1,216,1,220,1,192,2,196,2,200,2,208,2,92,3,140,3,156,3,204,3,192,1,196,1,197,1,217,1,192,2,196,2,200,1,204,1,192,2,193,2,196,2,209,2,157,3,197,1,193,2,209,2,193,2,220,0,208,1,212,1,216,1,220,1,208,2,12,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,220,0,196,1,208,1,212,1,216,1,220,1,192,2,208,2,216,2,12,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,220,0,196,1,200,1,212,1,216,1,192,2,208,2,212,2,12,3,76,3,92,3,140,3,156,3,204,3,220,0,200,1,204,1,208,1,212,1,213,1,216,1,217,1,220,1,221,1,208,2,212,2,213,2,92,3,221,0,208,1,212,1,213,1,216,1,217,1,220,1,208,2,209,2,212,2,221,0,213,1,217,1,209,2,93,3,213,1,217,1,209,2,209,2,213,2,222,1,214,1,220,0,208,1,212,1,216,1,220,1,208,2,28,3,92,3,156,3,220,3,220,0,208,1,212,1,216,1,220,1,208,2,216,2,92,3,156,3,220,3,220,0,212,1,216,1,208,2,212,2,92,3,156,3,220,0,221,0,208,1,209,1,212,1,213,1,216,1,217,1,220,1,208,2,209,2,212,2,213,2,156,3,221,0,208,1,212,1,213,1,216,1,217,1,220,1,208,2,209,2,212,2,213,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,157,3,209,1,213,1,218,1,209,2,213,2,222,1,210,2,158,3,214,1,218,1,210,2,158,3,218,1,158,3,210,1,214,1,220,0,212,1,220,1,208,2,28,3,92,3,156,3,220,3,220,0,212,1,216,1,220,1,208,2,216,2,28,3,156,3,220,3,220,0,212,1,216,1,208,2,212,2,92,3,156,3,220,3,220,0,221,0,208,1,212,1,213,1,216,1,217,1,220,1,208,2,212,2,213,2,92,3,156,3,157,3,221,0,208,1,212,1,213,1,216,1,217,1,220,1,208,2,209,2,212,2,213,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,209,1,213,1,218,1,209,2,213,2,222,0,217,1,221,1,222,1,210,2,214,1,218,1,210,2,94,3,214,1,218,1,210,2,28,3,92,3,156,3,220,3,220,0,236,0,212,1,216,1,228,1,232,1,208,2,28,3,44,3,92,3,108,3,156,3,172,3,220,3,236,3,220,0,236,0,212,1,216,1,232,1,208,2,212,2,28,3,44,3,92,3,108,3,172,3,236,3,220,0,208,1,212,1,213,1,216,1,217,1,220,1,229,1,208,2,212,2,44,3,156,3,172,3,220,3,221,0,208,1,212,1,213,1,216,1,220,1,209,2,93,3,237,3,221,0,213,1,217,1,229,1,209,2,225,2,157,3,221,3,237,3,221,0,213,1,217,1,209,2,218,1,218,1,236,0,224,1,228,1,236,1,224,2,44,3,108,3,172,3,236,3,236,0,224,1,228,1,232,1,236,1,224,2,28,3,92,3,108,3,156,3,172,3,220,3,236,3,236,0,212,1,228,1,232,1,224,2,228,2,28,3,92,3,156,3,172,3,220,3,236,3,236,0,228,1,229,1,232,1,233,1,236,1,224,2,228,2,229,2,28,3,44,3,92,3,156,3,220,3,237,3,237,0,224,1,228,1,229,1,232,1,233,1,236,1,225,2,237,3,237,0,229,1,233,1,225,2,45,3,237,3,237,0,229,1,233,1,225,2,225,2,229,2,230,1,234,1,226,2,230,1,234,1,236,0,228,1,224,2,44,3,108,3,172,3,236,3,236,0,228,1,232,1,236,1,224,2,232,2,44,3,108,3,236,3,236,0,224,1,228,1,232,1,224,2,228,2,108,3,172,3,236,3,236,0,237,0,228,1,229,1,232,1,233,1,236,1,224,2,228,2,229,2,108,3,109,3,172,3,237,0,224,1,228,1,229,1,232,1,233,1,236,1,224,2,225,2,228,2,229,2,109,3,172,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,233,1,238,1,225,2,229,2,173,3,238,0,226,2,174,3,238,0,230,1,234,1,226,2,174,3,230,1,234,1,226,2,174,3,231,1,228,1,224,2,44,3,108,3,172,3,236,3,236,0,224,1,228,1,232,1,224,2,232,2,44,3,108,3,172,3,236,3,236,0,228,1,232,1,224,2,228,2,108,3,172,3,236,3,236,0,229,1,232,1,233,1,236,1,224,2,228,2,108,3,109,3,172,3,173,3,237,0,224,1,228,1,229,1,232,1,236,1,225,2,108,3,109,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,233,1,225,2,229,2,109,3,173,3,226,2,238,0,230,1,234,1,226,2,110,3,230,1,234,1,44,3,108,3,172,3,236,3,236,0,232,1,224,2,44,3,60,3,108,3,172,3,236,3,252,3,236,0,228,1,224,2,44,3,60,3,108,3,124,3,188,3,252,3,232,1,236,1,44,3,60,3,108,3,172,3,236,3,252,3,45,3,61,3,109,3,253,3,237,0,233,1,225,2,45,3,61,3,109,3,173,3,237,3,253,3,237,0,229,1,225,2,61,3,173,3,237,3,253,3,60,3,124,3,188,3,252,3,248,1,44,3,60,3,124,3,188,3,236,3,252,3,252,0,228,1,244,1,44,3,108,3,172,3,188,3,236,3,252,3,44,3,60,3,108,3,172,3,236,3,252,3,253,3,45,3,61,3,189,3,253,3,241,2,45,3,61,3,109,3,173,3,237,3,253,3,61,3,60,3,124,3,188,3,252,3,248,1,60,3,124,3,188,3,252,3,244,1,60,3,124,3,252,3,124,3,125,3,188,3,125,3,188,3,189,3,253,0,125,3,189,3,245,1,125,3,189,3,189,3,190,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,188,3,252,3,124,3,188,3,125,3,189,3,125,3,189,3,125,3,189,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,61,3,204,0,220,0,192,1,200,1,201,1,204,1,208,1,212,1,216,1,220,1,228,1,232,1,236,1,240,1,192,2,196,2,200,2,202,2,203,2,208,2,212,2,216,2,228,2,247,2,12,3,13,3,76,3,77,3,124,3,140,3,141,3,205,3,206,3,204,0,192,1,196,1,200,1,204,1,12,3,76,3,77,3,140,3,141,3,204,3,205,3,192,1,196,1,200,1,204,1,13,3,76,3,77,3,140,3,141,3,205,3,192,1,196,1,200,1,204,1,140,3,141,3,205,3,193,1,197,1,201,1,205,1,141,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,77,3,193,1,197,1,201,1,205,1,141,3,142,3,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,78,3,194,1,198,1,202,1,206,1,78,3,142,3,194,1,198,1,202,1,206,1,142,3,195,1,199,1,203,1,207,1,142,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,192,1,196,1,208,1,212,1,216,1,220,1,232,1,196,2,200,2,204,2,208,2,212,2,12,3,76,3,92,3,140,3,156,3,204,3,220,3,204,0,192,1,193,1,196,1,200,1,204,1,208,1,220,1,192,2,200,2,12,3,13,3,76,3,92,3,140,3,141,3,204,3,205,3,204,0,192,1,200,1,204,1,192,2,12,3,77,3,140,3,141,3,205,3,192,1,196,1,197,1,200,1,204,1,192,2,196,2,12,3,77,3,140,3,205,3,205,0,193,1,197,1,201,1,205,1,205,0,193,1,197,1,201,1,205,1,141,3,193,1,197,1,201,1,205,1,141,3,193,1,197,1,201,1,205,1,141,3,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,142,3,194,1,198,1,202,1,206,1,142,3,194,1,198,1,202,1,206,1,142,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,196,1,200,1,208,1,212,1,216,1,220,1,204,2,12,3,76,3,140,3,204,3,220,3,204,0,192,1,200,1,208,1,212,1,216,1,220,1,12,3,77,3,140,3,156,3,204,3,220,3,204,0,192,1,196,1,200,1,204,1,216,1,220,1,192,2,196,2,12,3,13,3,76,3,77,3,140,3,141,3,205,3,204,0,205,0,192,1,196,1,197,1,200,1,201,1,192,2,196,2,12,3,76,3,141,3,205,3,205,0,192,1,196,1,200,1,201,1,204,1,205,1,193,2,12,3,76,3,77,3,141,3,205,3,205,0,193,1,197,1,205,1,193,2,13,3,77,3,141,3,205,0,193,1,201,1,205,1,13,3,77,3,193,1,197,1,201,1,205,1,77,3,198,1,202,1,206,1,194,1,198,1,206,1,14,3,78,3,194,1,202,1,206,1,14,3,78,3,194,1,198,1,202,1,206,1,78,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,1,208,1,216,1,220,1,196,2,12,3,76,3,92,3,140,3,204,3,196,1,200,1,212,1,220,1,192,2,12,3,76,3,92,3,140,3,204,3,204,0,192,1,196,1,200,1,216,1,220,1,208,2,12,3,13,3,76,3,77,3,92,3,140,3,141,3,156,3,204,3,205,3,204,0,196,1,197,1,200,1,201,1,204,1,208,1,212,1,13,3,76,3,77,3,93,3,140,3,156,3,204,3,205,0,221,0,192,1,196,1,197,1,200,1,204,1,217,1,221,1,193,2,13,3,77,3,93,3,140,3,157,3,204,3,205,0,197,1,201,1,213,1,93,3,141,3,157,3,205,3,197,1,201,1,217,1,221,1,93,3,141,3,157,3,205,3,141,3,205,3,142,3,206,3,142,3,206,3,220,1,28,3,92,3,156,3,220,3,212,1,220,1,28,3,92,3,156,3,220,3,220,0,192,1,196,1,212,1,216,1,220,1,12,3,76,3,140,3,156,3,157,3,204,3,220,0,221,0,200,1,204,1,208,1,209,1,212,1,213,1,217,1,208,2,212,2,12,3,76,3,92,3,140,3,157,3,204,3,221,0,197,1,208,1,212,1,216,1,217,1,220,1,221,1,209,2,13,3,77,3,92,3,141,3,157,3,205,3,221,0,201,1,213,1,217,1,209,2,13,3,29,3,77,3,93,3,141,3,157,3,205,3,221,0,197,1,213,1,217,1,221,1,209,2,29,3,93,3,221,0,201,1,209,1,213,1,214,1,93,3,218,1,222,1,214,1,94,3,198,1,218,1,222,1,94,3,210,1,214,1,219,1,215,1,219,1,211,1,215,1,28,3,92,3,156,3,220,3,220,0,216,1,28,3,92,3,156,3,220,3,220,0,208,1,212,1,216,1,28,3,92,3,156,3,220,0,221,0,213,1,216,1,217,1,220,1,92,3,93,3,140,3,156,3,204,3,220,0,221,0,208,1,212,1,213,1,216,1,217,1,220,1,209,2,213,2,93,3,156,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,157,3,221,0,222,0,209,1,213,1,214,1,217,1,222,1,209,2,213,2,94,3,157,3,222,0,209,1,213,1,217,1,218,1,221,1,222,1,222,0,214,1,210,2,158,3,222,0,214,1,218,1,158,3,210,1,214,1,158,3,219,1,215,1,219,1,212,1,236,1,28,3,92,3,156,3,220,3,216,1,28,3,92,3,156,3,220,3,220,0,208,1,212,1,28,3,92,3,156,3,220,3,220,0,213,1,216,1,217,1,220,1,92,3,157,3,221,0,213,1,217,1,209,2,92,3,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,210,1,217,1,218,1,221,1,209,2,213,2,93,3,222,0,209,1,210,1,213,1,217,1,221,1,222,1,210,2,94,3,222,0,214,1,218,1,210,2,94,3,222,0,214,1,218,1,94,3,210,1,218,1,94,3,215,1,216,1,236,1,28,3,92,3,156,3,220,3,216,1,28,3,92,3,156,3,220,3,208,1,212,1,28,3,92,3,156,3,220,3,216,1,220,1,156,3,221,0,213,1,233,1,29,3,45,3,93,3,109,3,156,3,221,0,217,1,229,1,209,2,29,3,45,3,93,3,109,3,157,3,173,3,221,0,237,0,213,1,233,1,109,3,157,3,173,3,221,3,221,0,217,1,221,1,157,3,222,0,210,1,234,1,222,0,218,1,230,1,158,3,214,1,158,3,222,3,218,1,222,1,235,1,219,1,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,108,3,172,3,236,3,173,3,237,0,229,1,108,3,173,3,237,0,229,1,233,1,29,3,93,3,157,3,173,3,221,3,237,0,229,1,233,1,29,3,45,3,93,3,226,1,45,3,93,3,109,3,174,3,238,0,234,1,174,3,238,0,230,1,46,3,230,1,234,1,46,3,110,3,226,1,230,1,110,3,235,1,231,1,224,1,44,3,108,3,172,3,236,3,232,1,44,3,108,3,172,3,236,3,224,1,228,1,44,3,108,3,172,3,236,3,232,1,236,1,229,1,109,3,237,0,233,1,109,3,173,3,237,0,229,1,109,3,173,3,237,0,230,1,110,3,173,3,238,0,226,1,110,3,174,3,238,0,230,1,234,1,226,2,110,3,174,3,238,0,230,1,234,1,174,3,227,1,174,3,231,1,235,1,228,1,232,1,44,3,108,3,172,3,236,3,232,1,44,3,108,3,172,3,236,3,224,1,228,1,44,3,108,3,172,3,236,3,232,1,236,1,225,1,229,1,173,3,237,3,237,0,233,1,109,3,173,3,237,3,237,0,229,1,109,3,173,3,237,0,233,1,237,1,109,3,174,3,238,0,226,1,230,1,110,3,174,3,238,0,234,1,110,3,174,3,238,0,230,1,234,1,110,3,234,1,238,1,226,1,227,1,235,1,231,1,44,3,108,3,172,3,236,3,232,1,44,3,108,3,172,3,236,3,224,1,228,1,44,3,108,3,172,3,236,3,232,1,236,1,229,1,233,1,45,3,109,3,225,1,229,1,173,3,61,3,173,3,226,1,230,1,126,3,238,0,234,1,62,3,174,3,238,0,230,1,174,3,238,3,228,1,236,1,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,189,3,189,3,45,3,109,3,45,3,109,3,46,3,62,3,62,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,125,3,125,3,126,3,126,3,126,3,190,3,190,3,244,1,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,190,3,126,3,126,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,204,0,205,0,220,0,192,1,196,1,200,1,208,1,212,1,216,1,228,1,232,1,248,1,192,2,196,2,200,2,212,2,228,2,244,2,12,3,13,3,76,3,140,3,141,3,204,3,204,0,192,1,193,1,196,1,200,1,204,1,216,1,192,2,196,2,200,2,12,3,13,3,76,3,77,3,140,3,204,3,204,0,196,1,200,1,204,1,192,2,196,2,200,2,12,3,76,3,140,3,141,3,204,3,205,3,205,0,192,1,193,1,196,1,197,1,201,1,205,1,192,2,196,2,197,2,204,2,13,3,76,3,141,3,204,3,205,3,205,0,192,1,196,1,200,1,201,1,204,1,205,1,192,2,193,2,196,2,197,2,204,2,13,3,77,3,141,3,205,3,205,0,192,1,193,1,196,1,197,1,205,1,193,2,13,3,77,3,205,3,205,0,193,1,197,1,201,1,205,1,193,2,13,3,77,3,206,0,193,1,197,1,198,1,201,1,205,1,193,2,197,2,77,3,206,0,194,1,198,1,202,1,206,1,14,3,78,3,206,0,194,1,198,1,202,1,206,1,194,2,14,3,78,3,206,0,194,1,198,1,202,1,206,1,194,2,14,3,78,3,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,196,1,200,1,208,1,212,1,216,1,220,1,192,2,76,3,204,3,204,0,192,1,196,1,200,1,192,2,196,2,76,3,140,3,204,3,204,0,192,1,196,1,200,1,192,2,196,2,204,2,12,3,76,3,77,3,140,3,204,3,205,3,204,0,205,0,192,1,196,1,197,1,200,1,201,1,204,1,205,1,192,2,193,2,196,2,197,2,204,2,12,3,76,3,77,3,140,3,141,3,204,3,205,3,204,0,205,0,192,1,196,1,197,1,200,1,201,1,204,1,205,1,192,2,193,2,196,2,197,2,13,3,76,3,77,3,141,3,205,3,205,0,197,1,201,1,205,1,193,2,13,3,77,3,141,3,205,0,193,1,197,1,201,1,205,1,193,2,201,2,77,3,141,3,205,0,193,1,194,1,197,1,198,1,202,1,205,1,206,1,193,2,197,2,198,2,78,3,141,3,206,0,193,1,197,1,198,1,201,1,202,1,205,1,206,1,193,2,194,2,197,2,198,2,78,3,141,3,142,3,206,0,194,1,198,1,206,1,194,2,78,3,142,3,206,0,194,1,202,1,206,1,194,2,142,3,194,1,195,1,198,1,199,1,202,1,206,1,207,1,142,3,194,1,195,1,198,1,199,1,202,1,203,1,206,1,207,1,195,1,199,1,203,1,207,1,143,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,208,1,212,1,216,1,192,2,12,3,76,3,140,3,204,3,200,1,192,2,12,3,140,3,204,3,204,0,192,1,196,1,200,1,192,2,196,2,76,3,140,3,141,3,204,3,205,3,204,0,197,1,200,1,201,1,204,1,192,2,196,2,197,2,76,3,77,3,140,3,141,3,205,3,204,0,205,0,192,1,196,1,197,1,200,1,201,1,204,1,192,2,193,2,196,2,197,2,76,3,77,3,140,3,141,3,205,3,205,0,197,1,201,1,193,2,13,3,77,3,141,3,205,0,197,1,201,1,205,1,193,2,197,2,77,3,141,3,205,0,193,1,194,1,197,1,198,1,202,1,206,1,193,2,197,2,198,2,77,3,78,3,141,3,142,3,206,0,193,1,197,1,201,1,202,1,205,1,206,1,193,2,194,2,197,2,198,2,77,3,78,3,142,3,206,0,198,1,202,1,206,1,194,2,14,3,78,3,142,3,206,0,194,1,198,1,202,1,206,1,194,2,78,3,142,3,194,1,195,1,198,1,203,1,207,1,194,2,198,2,78,3,206,3,194,1,198,1,202,1,203,1,206,1,207,1,79,3,195,1,199,1,207,1,195,1,203,1,207,1,195,1,199,1,203,1,208,1,216,1,12,3,76,3,140,3,204,3,12,3,28,3,76,3,140,3,156,3,204,3,220,0,12,3,28,3,76,3,156,3,221,3,12,3,76,3,92,3,93,3,140,3,204,3,221,3,205,0,221,0,197,2,13,3,77,3,93,3,140,3,141,3,157,3,204,3,205,3,221,3,205,0,221,0,201,1,193,2,209,2,13,3,29,3,77,3,93,3,141,3,157,3,205,3,221,3,205,0,221,0,197,1,201,1,193,2,13,3,77,3,93,3,141,3,157,3,205,3,205,0,201,1,205,1,206,1,193,2,197,2,93,3,141,3,205,3,206,0,194,1,206,1,78,3,94,3,142,3,158,3,206,3,206,0,198,1,202,1,214,1,194,2,94,3,142,3,158,3,206,3,206,0,198,1,202,1,218,1,194,2,94,3,142,3,206,3,194,1,207,1,142,3,206,3,194,1,199,1,203,1,212,1,216,1,92,3,156,3,220,3,216,1,28,3,92,3,156,3,220,3,220,0,212,1,12,3,76,3,140,3,156,3,204,3,220,3,220,0,12,3,76,3,93,3,140,3,204,3,221,3,221,0,209,2,12,3,13,3,76,3,77,3,93,3,140,3,141,3,157,3,204,3,205,3,221,3,221,0,213,1,217,1,209,2,13,3,29,3,77,3,93,3,141,3,157,3,205,3,221,3,221,0,213,1,217,1,209,2,13,3,77,3,93,3,141,3,157,3,205,3,221,0,213,1,209,2,213,2,13,3,77,3,93,3,141,3,205,3,222,0,210,1,222,1,210,2,30,3,94,3,158,3,222,0,202,1,214,1,218,1,210,2,14,3,30,3,78,3,94,3,142,3,206,3,222,0,214,1,218,1,210,2,14,3,78,3,94,3,142,3,206,3,210,1,211,1,214,1,94,3,210,1,222,1,223,1,203,1,215,1,219,1,212,1,28,3,92,3,156,3,220,3,216,1,28,3,92,3,156,3,220,3,212,1,28,3,92,3,220,3,213,1,216,1,217,1,220,1,92,3,93,3,221,0,213,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,210,1,218,1,209,2,213,2,93,3,94,3,157,3,222,0,210,1,222,1,210,2,30,3,94,3,158,3,222,0,214,1,218,1,210,2,94,3,158,3,222,0,214,1,218,1,210,2,94,3,158,3,222,0,210,1,211,1,214,1,223,1,158,3,210,1,211,1,214,1,222,1,223,1,215,1,219,1,215,1,219,1,211,1,232,1,28,3,92,3,156,3,220,3,28,3,92,3,156,3,220,3,28,3,156,3,220,3,217,1,156,3,221,0,213,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,209,2,213,2,93,3,157,3,158,3,222,0,210,2,94,3,158,3,222,0,214,1,218,1,210,2,94,3,158,3,222,0,214,1,218,1,210,2,94,3,158,3,211,1,218,1,222,1,94,3,210,1,211,1,222,1,215,1,219,1,215,1,232,1,28,3,92,3,156,3,220,3,28,3,92,3,156,3,220,3,28,3,92,3,156,3,220,3,237,3,221,0,209,2,29,3,93,3,109,3,173,3,237,3,29,3,93,3,109,3,157,3,221,3,237,3,157,3,221,3,110,3,158,3,238,3,222,0,218,1,46,3,158,3,174,3,222,3,222,0,158,3,222,3,158,3,228,1,232,1,44,3,108,3,172,3,236,3,232,1,44,3,108,3,172,3,236,3,108,3,172,3,236,3,173,3,237,0,157,3,173,3,221,3,237,3,237,0,29,3,93,3,157,3,221,3,237,3,29,3,93,3,157,3,221,3,46,3,238,0,234,1,30,3,46,3,94,3,110,3,158,3,222,3,46,3,94,3,158,3,228,1,44,3,108,3,172,3,236,3,232,1,44,3,108,3,172,3,236,3,228,1,44,3,108,3,236,3,229,1,109,3,237,0,233,1,109,3,173,3,237,0,229,1,109,3,173,3,109,3,173,3,110,3,174,3,238,0,234,1,110,3,174,3,238,0,230,1,110,3,174,3,174,3,175,3,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,173,3,109,3,173,3,109,3,173,3,109,3,173,3,110,3,174,3,234,1,110,3,174,3,238,0,230,1,110,3,174,3,110,3,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,45,3,109,3,45,3,109,3,254,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,125,3,125,3,126,3,190,3,190,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,189,3,189,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,204,0,205,0,192,1,193,1,196,1,197,1,200,1,204,1,208,1,212,1,216,1,192,2,196,2,212,2,233,2,12,3,140,3,141,3,221,3,204,0,205,0,192,1,193,1,196,1,197,1,200,1,204,1,212,1,216,1,192,2,193,2,196,2,200,2,12,3,76,3,77,3,140,3,141,3,205,3,221,3,204,0,205,0,192,1,193,1,196,1,200,1,204,1,192,2,193,2,196,2,200,2,201,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133120);
/* memory initializer */ allocate([12,3,76,3,77,3,140,3,141,3,205,3,204,0,205,0,192,1,196,1,197,1,200,1,201,1,204,1,205,1,192,2,196,2,197,2,201,2,204,2,12,3,76,3,77,3,140,3,141,3,142,3,204,0,205,0,192,1,193,1,196,1,197,1,200,1,201,1,204,1,205,1,192,2,193,2,196,2,197,2,200,2,204,2,205,2,12,3,77,3,78,3,140,3,141,3,142,3,204,0,205,0,206,0,192,1,193,1,197,1,198,1,201,1,204,1,205,1,193,2,196,2,197,2,198,2,200,2,201,2,204,2,205,2,76,3,78,3,140,3,141,3,205,0,206,0,192,1,193,1,197,1,201,1,205,1,193,2,197,2,201,2,12,3,78,3,142,3,206,0,193,1,194,1,197,1,198,1,201,1,202,1,205,1,206,1,193,2,197,2,202,2,205,2,13,3,78,3,79,3,142,3,205,0,206,0,193,1,194,1,197,1,198,1,201,1,202,1,205,1,206,1,193,2,194,2,197,2,198,2,15,3,77,3,78,3,141,3,142,3,143,3,206,3,205,0,206,0,194,1,198,1,206,1,194,2,198,2,15,3,77,3,142,3,143,3,206,3,194,1,202,1,206,1,194,2,202,2,79,3,206,3,207,0,193,1,194,1,195,1,198,1,199,1,202,1,203,1,205,1,206,1,194,2,198,2,79,3,143,3,206,3,194,1,195,1,198,1,199,1,202,1,203,1,206,1,207,1,194,2,195,2,198,2,199,2,79,3,207,3,195,1,199,1,207,1,207,3,195,1,203,1,206,1,195,1,199,1,196,1,192,2,12,3,13,3,76,3,141,3,221,3,192,1,200,1,192,2,13,3,76,3,140,3,205,3,221,3,192,1,196,1,200,1,204,1,192,2,196,2,13,3,76,3,77,3,141,3,204,3,205,3,192,1,196,1,200,1,204,1,13,3,76,3,77,3,140,3,141,3,205,3,193,1,197,1,201,1,205,1,12,3,13,3,14,3,76,3,77,3,140,3,141,3,142,3,204,3,205,3,193,1,197,1,201,1,205,1,13,3,76,3,78,3,140,3,141,3,142,3,193,1,197,1,201,1,205,1,193,2,14,3,76,3,77,3,78,3,140,3,142,3,205,3,206,3,206,0,193,1,197,1,198,1,201,1,205,1,193,2,197,2,13,3,14,3,77,3,78,3,141,3,142,3,205,3,206,0,198,1,201,1,202,1,205,1,206,1,193,2,197,2,198,2,13,3,14,3,15,3,77,3,78,3,141,3,142,3,143,3,205,3,194,1,198,1,206,1,194,2,13,3,14,3,78,3,79,3,141,3,142,3,143,3,194,1,202,1,206,1,194,2,15,3,143,3,194,1,195,1,198,1,203,1,194,2,15,3,143,3,207,3,202,1,206,1,207,1,79,3,207,3,199,1,203,1,79,3,199,1,203,1,12,3,140,3,204,3,12,3,76,3,140,3,141,3,204,3,205,3,220,3,12,3,13,3,77,3,140,3,141,3,204,3,205,3,12,3,13,3,76,3,77,3,140,3,141,3,204,3,205,3,12,3,13,3,76,3,77,3,140,3,141,3,204,3,205,3,12,3,13,3,14,3,76,3,77,3,78,3,140,3,204,3,205,3,13,3,14,3,78,3,141,3,142,3,206,3,13,3,14,3,77,3,78,3,141,3,142,3,205,3,206,3,13,3,14,3,77,3,78,3,141,3,142,3,205,3,206,3,13,3,14,3,15,3,78,3,79,3,141,3,206,3,15,3,79,3,143,3,207,3,15,3,79,3,143,3,207,3,15,3,79,3,143,3,207,3,200,1,220,1,12,3,76,3,140,3,204,3,12,3,76,3,140,3,204,3,12,3,13,3,76,3,77,3,140,3,141,3,204,3,205,3,12,3,13,3,76,3,77,3,140,3,141,3,204,3,205,3,12,3,13,3,76,3,77,3,140,3,141,3,204,3,205,3,12,3,76,3,140,3,141,3,204,3,205,3,13,3,14,3,77,3,78,3,142,3,206,3,13,3,14,3,77,3,78,3,141,3,142,3,205,3,206,3,13,3,14,3,77,3,78,3,141,3,142,3,205,3,206,3,14,3,78,3,142,3,143,3,206,3,207,3,15,3,79,3,143,3,207,3,14,3,15,3,78,3,79,3,143,3,207,3,15,3,79,3,143,3,207,3,143,3,207,3,204,1,208,1,216,1,220,1,28,3,92,3,156,3,220,3,196,1,204,1,208,1,220,1,28,3,92,3,93,3,140,3,156,3,204,3,220,3,28,3,92,3,93,3,140,3,156,3,204,3,220,3,221,3,28,3,29,3,93,3,156,3,221,3,29,3,92,3,93,3,220,3,221,3,29,3,92,3,220,3,94,3,222,3,93,3,94,3,157,3,221,3,222,3,30,3,93,3,94,3,157,3,158,3,221,3,222,3,30,3,94,3,222,3,31,3,95,3,159,3,95,3,223,3,28,3,92,3,156,3,220,3,28,3,92,3,156,3,220,3,28,3,29,3,92,3,156,3,157,3,220,3,221,3,28,3,29,3,92,3,156,3,157,3,221,3,28,3,29,3,92,3,156,3,157,3,92,3,93,3,29,3,30,3,93,3,94,3,158,3,221,3,222,3,29,3,30,3,93,3,94,3,157,3,158,3,222,3,30,3,158,3,95,3,214,1,31,3,159,3,31,3,223,3,219,1,223,1,212,1,28,3,92,3,156,3,220,3,28,3,92,3,156,3,220,3,28,3,29,3,92,3,93,3,156,3,220,3,216,1,220,1,28,3,29,3,92,3,93,3,156,3,28,3,29,3,93,3,156,3,30,3,94,3,157,3,158,3,221,3,29,3,30,3,93,3,94,3,157,3,158,3,221,3,222,3,94,3,222,3,31,3,95,3,31,3,95,3,208,1,28,3,92,3,156,3,220,3,216,1,28,3,92,3,156,3,220,3,28,3,29,3,92,3,93,3,156,3,220,3,28,3,29,3,92,3,93,3,156,3,157,3,220,3,221,3,28,3,92,3,93,3,157,3,221,3,29,3,93,3,158,3,222,3,29,3,30,3,93,3,94,3,157,3,158,3,221,3,222,3,158,3,222,3,31,3,95,3,159,3,159,3,223,3,216,1,224,1,228,1,228,2,44,3,108,3,172,3,236,3,228,1,236,1,44,3,108,3,172,3,236,3,232,1,236,1,44,3,108,3,109,3,172,3,236,3,237,3,224,1,228,1,232,1,236,1,44,3,109,3,172,3,173,3,225,1,233,1,237,1,109,3,46,3,173,3,46,3,109,3,110,3,173,3,237,3,110,3,173,3,46,3,110,3,236,0,224,1,44,3,108,3,172,3,236,3,224,1,236,1,44,3,108,3,172,3,236,3,44,3,45,3,108,3,172,3,173,3,236,3,224,1,228,1,232,1,236,1,44,3,45,3,108,3,109,3,172,3,173,3,237,1,173,3,109,3,109,3,110,3,109,3,238,3,174,3,239,3,239,3,228,1,44,3,108,3,172,3,236,3,236,0,232,1,224,2,44,3,108,3,172,3,236,3,224,1,228,1,232,1,236,1,44,3,45,3,108,3,109,3,172,3,236,3,44,3,45,3,109,3,172,3,173,3,46,3,110,3,173,3,45,3,109,3,174,3,238,3,110,3,175,3,239,3,47,3,111,3,175,3,240,1,228,2,44,3,108,3,172,3,236,3,252,3,44,3,108,3,172,3,236,3,44,3,108,3,109,3,172,3,173,3,236,3,237,3,44,3,108,3,172,3,236,3,109,3,45,3,109,3,238,3,45,3,109,3,174,3,238,3,46,3,110,3,174,3,231,1,235,1,47,3,111,3,175,3,239,3,240,1,244,1,248,1,60,3,124,3,188,3,252,3,244,1,252,1,60,3,124,3,188,3,252,3,60,3,124,3,125,3,188,3,252,3,253,3,60,3,61,3,125,3,188,3,253,3,249,1,125,3,253,3,61,3,62,3,242,1,246,1,254,1,127,3,191,3,254,3,243,1,251,1,255,1,63,3,127,3,191,3,255,3,244,1,60,3,124,3,188,3,252,3,244,1,60,3,124,3,188,3,252,3,248,1,252,1,60,3,124,3,125,3,188,3,189,3,252,3,240,1,244,1,60,3,188,3,189,3,249,1,125,3,255,3,255,3,252,1,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,189,3,252,3,60,3,124,3,125,3,188,3,189,3,61,3,189,3,189,3,190,3,62,3,189,3,189,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,125,3,188,3,252,3,60,3,61,3,124,3,125,3,188,3,61,3,125,3,204,0,192,1,196,1,197,1,200,1,204,1,208,1,212,1,216,1,220,1,240,1,248,1,249,1,252,1,192,2,196,2,200,2,208,2,212,2,216,2,220,2,224,2,232,2,240,2,244,2,12,3,77,3,140,3,204,0,192,1,196,1,200,1,204,1,212,1,220,1,192,2,196,2,200,2,208,2,12,3,76,3,140,3,204,3,204,0,192,1,196,1,200,1,204,1,192,2,196,2,200,2,201,2,204,2,12,3,76,3,140,3,204,3,204,0,205,0,192,1,193,1,196,1,200,1,201,1,204,1,192,2,196,2,197,2,204,2,76,3,77,3,140,3,204,3,205,3,205,0,192,1,193,1,196,1,197,1,200,1,201,1,204,1,205,1,192,2,193,2,196,2,76,3,77,3,140,3,141,3,205,3,205,0,193,1,197,1,201,1,205,1,193,2,77,3,141,3,205,3,205,0,193,1,197,1,201,1,205,1,193,2,77,3,141,3,205,3,193,1,194,1,197,1,201,1,205,1,206,3,194,1,198,1,202,1,206,1,142,3,206,3,194,1,198,1,202,1,206,1,142,3,206,3,194,1,198,1,202,1,206,1,206,3,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,207,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,196,1,204,1,212,1,216,1,220,1,252,1,192,2,196,2,204,2,212,2,12,3,204,3,204,0,196,1,200,1,204,1,220,1,192,2,196,2,200,2,12,3,140,3,204,3,204,0,192,1,196,1,200,1,204,1,192,2,196,2,201,2,204,2,12,3,76,3,77,3,140,3,204,0,205,0,192,1,193,1,196,1,197,1,200,1,201,1,204,1,205,1,192,2,193,2,196,2,197,2,200,2,204,2,205,2,12,3,76,3,77,3,140,3,141,3,204,3,204,0,205,0,192,1,193,1,196,1,197,1,200,1,204,1,192,2,193,2,196,2,197,2,200,2,204,2,77,3,141,3,205,3,205,0,193,1,201,1,205,1,193,2,197,2,200,2,201,2,204,2,77,3,141,3,205,3,205,0,193,1,197,1,205,1,193,2,197,2,201,2,77,3,141,3,205,3,205,0,193,1,194,1,197,1,201,1,202,1,205,1,206,1,193,2,197,2,198,2,77,3,78,3,141,3,206,0,193,1,194,1,197,1,198,1,201,1,202,1,205,1,206,1,194,2,197,2,198,2,78,3,142,3,206,3,206,0,194,1,198,1,202,1,206,1,194,2,78,3,142,3,206,3,206,0,194,1,198,1,202,1,206,1,194,2,78,3,142,3,206,3,194,1,195,1,198,1,202,1,206,1,207,1,78,3,194,1,195,1,199,1,203,1,207,1,79,3,195,1,199,1,203,1,207,1,79,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,200,1,208,1,212,1,216,1,220,1,212,2,12,3,76,3,140,3,204,3,204,0,192,1,196,1,12,3,76,3,140,3,204,3,204,0,192,1,196,1,200,1,204,1,12,3,76,3,204,3,204,0,205,0,192,1,193,1,196,1,197,1,201,1,205,1,192,2,196,2,197,2,76,3,77,3,140,3,141,3,205,0,192,1,193,1,196,1,197,1,200,1,201,1,204,1,205,1,192,2,193,2,196,2,197,2,200,2,204,2,77,3,141,3,205,0,193,1,197,1,201,1,193,2,201,2,77,3,141,3,205,0,193,1,197,1,201,1,193,2,197,2,201,2,77,3,141,3,205,0,194,1,198,1,201,1,202,1,205,1,206,1,193,2,197,2,198,2,205,2,77,3,78,3,141,3,142,3,206,0,193,1,194,1,197,1,198,1,201,1,205,1,193,2,194,2,197,2,198,2,78,3,142,3,206,3,206,0,194,1,198,1,202,1,206,1,194,2,78,3,142,3,206,3,206,0,194,1,198,1,202,1,206,1,194,2,198,2,78,3,142,3,206,0,195,1,202,1,203,1,206,1,207,1,194,2,198,2,142,3,194,1,195,1,198,1,199,1,202,1,206,1,143,3,195,1,203,1,207,1,143,3,195,1,199,1,207,1,195,1,199,1,203,1,207,1,212,1,216,1,220,1,12,3,76,3,140,3,204,3,212,1,12,3,76,3,140,3,204,3,204,0,196,1,12,3,76,3,140,3,204,3,204,0,221,0,192,1,197,1,205,0,221,0,197,1,201,1,217,1,193,2,13,3,77,3,141,3,205,3,205,0,221,0,197,1,201,1,205,1,213,1,193,2,209,2,13,3,77,3,93,3,141,3,205,3,205,0,221,0,197,1,201,1,213,1,217,1,193,2,197,2,209,2,13,3,77,3,93,3,141,3,157,3,205,3,205,0,193,1,194,1,197,1,206,1,217,1,221,1,193,2,197,2,209,2,213,2,93,3,141,3,205,3,206,0,222,0,193,1,194,1,197,1,201,1,202,1,205,1,206,1,194,2,197,2,198,2,210,2,14,3,78,3,94,3,206,0,198,1,202,1,214,1,218,1,194,2,210,2,14,3,78,3,94,3,158,3,206,0,198,1,202,1,214,1,218,1,194,2,210,2,14,3,78,3,94,3,158,3,195,1,202,1,206,1,207,1,223,1,14,3,78,3,194,1,195,1,202,1,206,1,15,3,79,3,199,1,203,1,219,1,199,1,212,1,216,1,220,1,28,3,92,3,156,3,220,3,212,1,28,3,92,3,156,3,220,3,220,0,216,1,92,3,220,3,221,0,208,1,212,1,213,1,221,0,217,1,209,2,205,0,221,0,213,1,217,1,209,2,13,3,77,3,205,0,221,0,213,1,217,1,209,2,13,3,77,3,93,3,141,3,205,3,221,0,209,1,210,1,213,1,214,1,222,1,209,2,213,2,222,0,206,1,209,1,210,1,213,1,214,1,217,1,221,1,222,1,210,2,214,2,158,3,222,0,198,1,214,1,218,1,210,2,14,3,78,3,142,3,158,3,206,3,222,3,222,0,202,1,214,1,218,1,210,2,14,3,78,3,142,3,158,3,206,3,211,1,215,1,218,1,222,1,223,1,210,2,214,2,210,1,211,1,214,1,215,1,218,1,222,1,223,1,211,2,199,1,215,1,219,1,223,3,215,1,223,1,219,1,223,1,216,1,220,1,28,3,92,3,156,3,220,3,212,1,28,3,92,3,156,3,220,3,220,0,216,1,28,3,156,3,220,3,208,1,212,1,213,1,221,0,217,1,221,0,213,1,217,1,209,2,157,3,221,0,213,1,217,1,209,2,157,3,221,0,209,1,210,1,213,1,214,1,218,1,209,2,213,2,157,3,222,0,209,1,210,1,213,1,214,1,217,1,218,1,221,1,222,1,210,2,214,2,94,3,222,0,214,1,218,1,210,2,94,3,222,0,214,1,218,1,210,2,94,3,222,0,210,1,211,1,214,1,215,1,218,1,219,1,222,1,223,1,210,2,214,2,94,3,210,1,211,1,214,1,215,1,218,1,222,1,223,1,211,2,95,3,215,1,219,1,211,2,95,3,215,1,219,1,219,1,223,1,228,1,236,1,28,3,92,3,156,3,220,3,28,3,92,3,156,3,220,3,212,1,216,1,28,3,92,3,220,3,220,0,221,0,221,0,213,1,217,1,209,2,221,0,213,1,217,1,209,2,221,0,209,1,210,1,213,1,209,2,213,2,222,0,209,1,210,1,213,1,218,1,210,2,158,3,222,0,214,1,218,1,210,2,158,3,222,0,214,1,218,1,210,2,94,3,158,3,210,1,211,1,214,1,218,1,222,1,223,1,210,2,210,1,211,1,214,1,215,1,222,1,223,1,215,1,219,1,219,1,216,1,228,1,232,1,28,3,92,3,156,3,220,3,216,1,28,3,92,3,156,3,220,3,212,1,28,3,92,3,156,3,220,3,221,0,221,0,222,0,214,1,218,1,214,1,218,1,215,1,216,1,228,1,232,1,236,1,44,3,108,3,172,3,236,3,228,1,236,1,44,3,108,3,172,3,236,3,232,1,44,3,108,3,172,3,236,3,224,1,228,1,233,1,237,0,229,1,233,1,238,0,230,1,234,1,231,1,224,1,232,1,44,3,108,3,172,3,236,3,228,1,44,3,108,3,172,3,236,3,232,1,236,1,44,3,108,3,172,3,236,3,224,1,228,1,233,1,237,0,229,1,237,0,233,1,238,0,230,1,110,3,234,1,226,1,231,1,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,229,1,230,1,174,3,248,1,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,248,1,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,204,0,196,1,200,1,204,1,216,1,220,1,192,2,196,2,200,2,204,2,216,2,76,3,141,3,204,3,204,0,192,1,196,1,200,1,204,1,192,2,200,2,204,2,13,3,76,3,77,3,141,3,204,3,205,3,204,0,192,1,196,1,200,1,204,1,196,2,13,3,77,3,140,3,141,3,204,3,192,1,196,1,200,1,204,1,13,3,77,3,140,3,141,3,193,1,197,1,201,1,77,3,193,1,197,1,201,1,205,1,193,1,197,1,201,1,205,1,78,3,205,3,193,1,197,1,201,1,205,1,78,3,141,3,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,206,3,194,1,198,1,202,1,206,1,206,3,194,1,198,1,202,1,206,1,206,3,195,1,199,1,203,1,207,1,142,3,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,196,1,200,1,204,1,192,2,196,2,200,2,204,2,12,3,140,3,204,3,204,0,192,1,196,1,200,1,192,2,196,2,200,2,12,3,76,3,77,3,140,3,141,3,204,3,204,0,192,1,196,1,204,1,192,2,200,2,12,3,76,3,77,3,140,3,141,3,204,3,192,1,196,1,200,1,204,1,76,3,141,3,204,3,193,1,197,1,201,1,205,1,77,3,141,3,205,3,193,1,197,1,201,1,205,1,77,3,141,3,205,3,193,1,197,1,201,1,205,1,77,3,193,1,197,1,201,1,205,1,77,3,194,1,198,1,202,1,206,1,194,1,198,1,202,1,206,1,78,3,194,1,198,1,202,1,206,1,78,3,194,1,198,1,202,1,206,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,204,0,196,1,204,1,200,2,12,3,76,3,140,3,204,3,204,0,196,1,200,1,204,1,216,1,192,2,200,2,12,3,76,3,140,3,204,3,204,0,192,1,196,1,200,1,212,1,192,2,196,2,200,2,12,3,76,3,77,3,140,3,204,3,204,0,197,1,200,1,201,1,204,1,192,2,196,2,197,2,13,3,76,3,77,3,140,3,141,3,204,3,192,1,193,1,196,1,197,1,200,1,204,1,193,2,77,3,141,3,205,3,205,0,201,1,193,2,77,3,141,3,205,3,193,1,197,1,205,1,77,3,141,3,205,3,201,1,205,1,141,3,194,1,198,1,202,1,194,1,202,1,142,3,194,1,198,1,206,1,142,3,202,1,206,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,195,1,199,1,203,1,207,1,12,3,76,3,140,3,204,3,204,0,196,1,200,1,204,1,212,1,216,1,220,1,208,2,12,3,76,3,140,3,156,3,204,3,220,3,204,0,196,1,200,1,204,1,212,1,216,1,192,2,196,2,208,2,212,2,92,3,140,3,156,3,204,3,220,3,192,1,196,1,197,1,201,1,216,1,217,1,220,1,192,2,196,2,197,2,12,3,76,3,92,3,141,3,156,3,157,3,205,3,205,0,192,1,196,1,200,1,204,1,213,1,192,2,193,2,196,2,209,2,12,3,13,3,76,3,77,3,93,3,141,3,157,3,205,3,221,3,205,0,197,1,201,1,217,1,193,2,13,3,77,3,93,3,157,3,221,3,197,1,201,1,13,3,77,3,93,3,157,3,13,3,77,3,14,3,78,3,220,1,28,3,92,3,156,3,220,3,220,0,212,1,216,1,220,1,208,2,12,3,28,3,92,3,140,3,156,3,204,3,220,3,220,0,196,1,200,1,212,1,216,1,220,1,208,2,212,2,12,3,28,3,76,3,92,3,140,3,204,3,220,0,192,1,196,1,208,1,212,1,213,1,216,1,217,1,220,1,221,1,208,2,212,2,213,2,12,3,76,3,92,3,93,3,140,3,156,3,204,3,221,0,208,1,212,1,213,1,216,1,217,1,220,1,209,2,213,2,13,3,77,3,93,3,141,3,156,3,157,3,205,3,221,0,197,1,213,1,217,1,209,2,13,3,77,3,93,3,141,3,157,3,205,3,221,3,221,0,201,1,213,1,217,1,209,2,13,3,77,3,93,3,141,3,157,3,205,3,221,3,217,1,221,1,157,3,214,1,158,3,218,1,158,3,214,1,158,3,220,1,28,3,92,3,156,3,220,3,220,0,212,1,216,1,220,1,208,2,28,3,92,3,156,3,220,3,220,0,212,1,216,1,220,1,208,2,212,2,156,3,220,0,221,0,208,1,212,1,213,1,216,1,217,1,220,1,221,1,208,2,212,2,213,2,92,3,156,3,157,3,221,0,208,1,212,1,213,1,216,1,217,1,220,1,221,1,208,2,209,2,212,2,213,2,92,3,93,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,217,2,93,3,157,3,214,1,217,1,221,1,222,1,209,2,213,2,93,3,158,3,222,0,209,1,213,1,214,1,217,1,221,1,210,2,94,3,158,3,222,0,214,1,218,1,210,2,94,3,158,3,214,1,218,1,94,3,218,1,222,1,94,3,211,1,219,1,28,3,92,3,156,3,220,3,212,1,216,1,220,1,208,2,28,3,92,3,156,3,220,3,220,0,212,1,216,1,220,1,208,2,212,2,28,3,92,3,220,3,220,0,208,1,212,1,213,1,217,1,208,2,212,2,213,2,92,3,93,3,156,3,221,0,208,1,212,1,213,1,216,1,217,1,220,1,208,2,209,2,212,2,213,2,93,3,156,3,157,3,221,0,213,1,217,1,209,2,93,3,157,3,221,0,213,1,217,1,209,2,213,2,93,3,157,3,213,1,214,1,217,1,221,1,222,1,209,2,213,2,93,3,157,3,209,1,210,1,213,1,217,1,221,1,222,1,214,2,94,3,158,3,222,0,214,1,218,1,210,2,94,3,158,3,214,1,218,1,210,2,158,3,218,1,222,1,158,3,219,1,28,3,92,3,156,3,220,3,28,3,92,3,156,3,220,3,212,1,216,1,156,3,220,3,208,1,212,1,213,1,221,0,217,1,209,2,45,3,157,3,173,3,221,3,221,0,213,1,217,1,233,1,209,2,225,2,45,3,93,3,109,3,157,3,173,3,221,3,237,3,221,0,213,1,217,1,229,1,209,2,29,3,45,3,93,3,157,3,173,3,221,3,213,1,209,2,213,2,29,3,93,3,174,3,214,1,218,1,234,1,30,3,46,3,94,3,174,3,214,1,218,1,94,3,94,3,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,232,1,44,3,108,3,224,1,228,1,233,1,237,0,229,1,233,1,237,1,225,2,229,2,45,3,109,3,237,0,229,1,233,1,225,2,29,3,45,3,93,3,109,3,157,3,221,3,237,3,237,0,229,1,233,1,225,2,29,3,45,3,93,3,157,3,173,3,221,3,237,3,234,1,225,2,229,2,226,2,238,3,238,0,230,1,234,1,226,2,158,3,174,3,238,3,230,1,234,1,226,2,174,3,238,3,238,3,235,1,44,3,108,3,172,3,236,3,228,1,44,3,108,3,172,3,236,3,232,1,44,3,172,3,224,1,228,1,229,1,233,1,237,0,233,1,237,1,225,2,229,2,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,237,0,225,1,229,1,230,1,238,1,225,2,229,2,109,3,173,3,174,3,238,0,229,1,230,1,233,1,234,1,238,1,226,2,230,2,110,3,174,3,238,0,230,1,234,1,226,2,110,3,174,3,230,1,234,1,226,2,110,3,174,3,234,1,238,1,110,3,238,1,231,1,235,1,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,232,1,44,3,108,3,236,3,224,1,228,1,233,1,225,2,109,3,237,0,229,1,225,2,109,3,173,3,237,0,229,1,233,1,225,2,109,3,173,3,225,1,229,1,225,2,229,2,109,3,173,3,234,1,226,2,110,3,174,3,238,0,230,1,234,1,226,2,110,3,174,3,230,1,234,1,226,2,110,3,174,3,226,1,230,1,174,3,231,1,235,1,44,3,108,3,172,3,236,3,44,3,108,3,172,3,236,3,172,3,236,3,173,3,237,3,229,1,61,3,173,3,237,3,253,3,233,1,45,3,61,3,109,3,173,3,237,3,253,3,229,1,45,3,109,3,230,1,46,3,62,3,110,3,234,1,46,3,110,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,61,3,45,3,61,3,125,3,237,3,45,3,109,3,173,3,237,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,188,3,189,3,189,3,125,3,189,3,125,3,126,3,190,3,126,3,190,3,126,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,252,3,125,3,125,3,190,3,190,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,60,3,124,3,188,3,252,3,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,36,0,0,48,96,70,112,97,149,114,246,6,29,20,48,36,83,56,211,9,33,29,41,49,64,60,83,11,51,43,70,73,110,94,158,6,26,28,65,39,76,84,160,6,31,28,83,31,65,82,156,7,40,30,75,29,65,59,135,9,75,34,92,49,134,66,198,4,33,18,48,23,79,35,119,4,23,18,35,22,45,29,65,69,120,89,130,125,174,135,247,3,31,17,41,38,66,46,103,5,30,23,34,49,55,57,79,6,46,33,58,70,107,76,133,4,31,30,66,44,83,85,162,4,36,29,89,37,72,87,173,4,49,32,87,33,83,68,149,5,74,29,81,47,130,58,166,3,37,16,40,21,75,31,71,2,23,16,33,20,47,26,54,67,124,90,134,127,179,137,248,3,29,16,40,39,72,46,110,4,30,22,32,48,56,48,69,5,46,35,58,72,114,77,135,3,30,27,70,45,78,86,167,3,36,30,92,37,79,87,168,4,51,31,83,35,82,69,143,5,78,31,86,50,135,60,167,2,40,15,34,24,79,26,66,2,23,15,26,21,39,21,43,241,127,242,127,243,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,243,126,241,127,243,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,243,125,235,127,243,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,243,124,225,127,243,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,244,123,212,127,243,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,244,122,194,127,242,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,244,121,172,127,241,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,244,120,146,127,239,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,244,119,116,127,236,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,244,118,82,127,233,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,117,46,127,230,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,245,116,3,127,224,127,243,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,115,214,126,219,127,243,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,245,114,163,126,211,127,242,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,113,110,126,203,127,241,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,112,52,126,193,127,240,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,111,246,125,182,127,238,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,110,180,125,169,127,236,127,245,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,109,110,125,155,127,233,127,244,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,108,36,125,139,127,230,127,244,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,247,107,215,124,122,127,227,127,243,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,247,106,133,124,102,127,223,127,243,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,246,105,46,124,80,127,218,127,242,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,247,104,213,123,57,127,213,127,241,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,247,103,119,123,31,127,207,127,240,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,249,102,23,123,5,127,201,127,239,127,246,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,248,101,176,122,229,126,192,127,236,127,245,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,248,100,70,122,196,126,183,127,234,127,245,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,247,99,215,121,160,126,172,127,231,127,244,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,248,98,102,121,123,126,162,127,229,127,244,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,248,97,240,120,82,126,149,127,225,127,243,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,248,96,118,120,39,126,136,127,221,127,242,127,247,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,248,95,248,119,248,125,120,127,216,127,240,127,246,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,249,94,119,119,199,125,104,127,211,127,239,127,246,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,249,93,241,118,147,125,86,127,206,127,238,127,246,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,249,92,103,118,91,125,66,127,199,127,235,127,245,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,250,91,218,117,33,125,45,127,192,127,233,127,245,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,248,90,70,117,225,124,20,127,183,127,230,127,244,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,249,89,177,116,160,124,251,126,174,127,227,127,243,127,248,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,250,88,24,116,91,124,223,126,163,127,223,127,241,127,247,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,249,87,121,115,17,124,193,126,152,127,219,127,240,127,247,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,251,86,217,114,198,123,162,126,140,127,215,127,239,127,247,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,251,85,51,114,117,123,127,126,126,127,210,127,237,127,246,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,250,84,136,113,32,123,89,126,110,127,203,127,234,127,245,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,253,83,221,112,202,122,51,126,95,127,198,127,233,127,245,127,249,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,251,82,41,112,107,122,6,126,75,127,189,127,229,127,243,127,248,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,252,81,116,111,11,122,217,125,55,127,181,127,226,127,242,127,248,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,250,80,184,110,164,121,167,125,32,127,170,127,221,127,240,127,247,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,252,79,252,109,60,121,116,125,9,127,161,127,218,127,239,127,247,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,252,78,58,109,206,120,61,125,239,126,149,127,213,127,237,127,246,127,250,127,251,127,252,127,253,127,254,127,255,127,0,128,251,77,115,108,90,120,0,125,209,126,135,127,206,127,234,127,245,127,249,127,251,127,252,127,253,127,254,127,255,127,0,128,252,76,170,107,227,119,194,124,179,126,121,127,200,127,231,127,244,127,249,127,251,127,252,127,253,127,254,127,255,127,0,128,254,75,222,106,105,119,129,124,147,126,106,127,193,127,229,127,243,127,249,127,251,127,252,127,253,127,254,127,255,127,0,128,252,74,10,106,230,118,57,124,109,126,87,127,184,127,224,127,241,127,248,127,251,127,252,127,253,127,254,127,255,127,0,128,254,73,54,105,98,118,240,123,72,126,69,127,176,127,221,127,240,127,248,127,251,127,252,127,253,127,254,127,255,127,0,128,252,72,90,104,212,117,159,123,28,126,46,127,164,127,215,127,237,127,246,127,250,127,252,127,253,127,254,127,255,127,0,128,253,71,125,103,69,117,77,123,240,125,23,127,152,127,209,127,234,127,245,127,250,127,252,127,253,127,254,127,255,127,0,128,254,70,156,102,176,116,245,122,192,125,254,126,140,127,203,127,231,127,244,127,250,127,252,127,253,127,254,127,255,127,0,128,0,70,184,101,23,116,154,122,141,125,227,126,126,127,196,127,228,127,242,127,249,127,252,127,253,127,254,127,255,127,0,128,253,68,203,100,116,115,54,122,83,125,195,126,108,127,186,127,222,127,239,127,247,127,251,127,253,127,254,127,255,127,0,128,254,67,222,99,207,114,208,121,24,125,162,126,91,127,178,127,219,127,238,127,247,127,251,127,253,127,254,127,255,127,0,128,255,66,237,98,36,114,100,121,217,124,127,126,72,127,168,127,214,127,236,127,246,127,251,127,253,127,254,127,255,127,0,128,0,66,248,97,116,113,244,120,150,124,88,126,50,127,156,127,207,127,232,127,244,127,250,127,253,127,254,127,255,127,0,128,255,64,253,96,188,112,124,120,77,124,46,126,27,127,143,127,200,127,228,127,242,127,249,127,252,127,254,127,255,127,0,128,0,64,0,96,0,112,0,120,0,124,0,126,0,127,128,127,192,127,224,127,240,127,248,127,252,127,254,127,255,127,0,128,2,63,0,95,63,111,127,119,175,123,208,125,229,126,113,127,184,127,220,127,238,127,247,127,252,127,254,127,255,127,0,128,0,62,248,93,116,110,244,118,86,123,152,125,194,126,92,127,171,127,212,127,233,127,244,127,250,127,253,127,254,127,0,128,255,60,237,92,164,109,100,118,248,122,94,125,159,126,71,127,159,127,205,127,229,127,242,127,249,127,252,127,254,127,0,128,1,60,225,91,208,108,207,117,150,122,32,125,121,126,48,127,145,127,197,127,225,127,240,127,248,127,252,127,254,127,0,128,255,58,205,90,242,107,48,117,43,122,219,124,78,126,22,127,130,127,188,127,219,127,236,127,245,127,250,127,253,127,0,128,0,58,184,89,17,107,141,116,189,121,147,124,32,126,249,126,112,127,177,127,213,127,232,127,243,127,249,127,252,127,0,128,0,57,158,88,40,106,226,115,71,121,69,124,238,125,218,126,93,127,166,127,206,127,228,127,240,127,247,127,251,127,0,128,0,56,128,87,56,105,48,115,203,120,242,123,184,125,183,126,71,127,152,127,197,127,223,127,237,127,245,127,250,127,0,128,255,54,93,86,65,104,117,114,71,120,153,123,125,125,145,126,47,127,137,127,188,127,217,127,234,127,244,127,249,127,0,128,1,54,57,85,69,103,180,113,188,119,57,123,61,125,103,126,20,127,120,127,178,127,211,127,230,127,241,127,247,127,0,128,0,53,14,84,64,102,233,112,40,119,209,122,246,124,56,126,245,126,99,127,164,127,202,127,224,127,237,127,245,127,0,128,2,52,226,82,55,101,25,112,143,118,101,122,172,124,6,126,212,126,78,127,150,127,193,127,219,127,234,127,243,127,0,128,254,50,172,81,33,100,59,111,233,117,238,121,89,124,205,125,173,126,52,127,133,127,182,127,211,127,229,127,240,127,0,128,3,50,123,80,12,99,92,110,65,117,117,121,4,124,147,125,134,126,26,127,116,127,171,127,205,127,225,127,237,127,0,128,0,49,62,79,232,97,109,109,137,116,236,120,161,123,77,125,85,126,248,126,93,127,155,127,193,127,217,127,232,127,0,128,0,48,0,78,192,96,120,108,203,115,95,120,59,123,5,125,35,126,214,126,70,127,140,127,184,127,211,127,228,127,0,128,1,47,191,76,145,95,122,107,3,115,200,119,205,122,182,124,235,125,175,126,43,127,121,127,171,127,202,127,222,127,0,128,1,46,121,75,90,94,114,106,49,114,40,119,86,122,95,124,173,125,131,126,12,127,100,127,156,127,192,127,215,127,0,128,1,45,47,74,27,93,96,105,85,113,126,118,214,121,1,124,105,125,82,126,233,126,75,127,139,127,180,127,207,127,0,128,1,44,225,72,212,91,67,104,108,112,199,117,75,121,153,123,28,125,26,126,193,126,47,127,119,127,166,127,197,127,0,128,254,42,140,71,130,90,26,103,119,111,5,117,181,120,40,123,200,124,220,125,148,126,14,127,95,127,149,127,185,127,0,128,0,42,56,70,46,89,235,101,122,110,58,116,23,120,176,122,110,124,154,125,100,126,235,126,70,127,131,127,172,127,0,128,0,41,222,68,207,87,175,100,111,109,98,115,109,119,44,122,10,124,79,125,44,126,194,126,40,127,109,127,156,127,0,128,0,40,128,67,104,86,104,99,88,108,125,114,182,118,157,121,156,123,251,124,237,125,147,126,5,127,83,127,137,127,0,128,0,39,30,66,249,84,21,98,51,107,138,113,242,117,2,121,35,123,158,124,166,125,93,126,220,126,53,127,115,127,0,128,0,38,184,64,129,83,183,96,1,106,137,112,32,117,91,120,160,122,57,124,88,125,34,126,176,126,20,127,90,127,0,128,2,37,80,63,3,82,79,95,195,104,123,111,66,116,167,119,17,122,200,123,0,125,222,125,124,126,236,126,60,127,0,128,0,36,224,61,121,80,215,93,115,103,91,110,82,115,227,118,115,121,75,123,158,124,146,125,65,126,191,126,25,127,0,128,255,34,109,60,231,78,84,92,21,102,43,109,81,114,15,118,199,120,193,122,48,124,59,125,253,125,138,126,240,126,0,128,1,34,249,58,79,77,198,90,170,100,237,107,66,113,45,117,13,120,42,122,183,123,219,124,177,125,78,126,193,126,0,128,1,33,127,57,173,75,43,89,46,99,156,106,32,112,56,116,66,119,131,121,47,123,109,124,89,125,8,126,138,126,0,128,0,32,0,56,0,74,128,87,160,97,56,105,234,110,48,115,100,118,203,120,152,122,242,123,245,124,184,125,74,126,0,128,0,31,126,54,75,72,201,85,2,96,193,103,160,109,19,114,114,117,0,120,240,121,104,123,133,124,93,125,0,126,0,128,254,29,246,52,140,70,3,84,82,94,54,102,65,108,225,112,108,116,34,119,54,121,205,122,5,124,244,124,171,125,0,128,255,28,109,51,198,68,49,82,146,92,153,100,206,106,155,111,82,115,49,118,106,120,34,122,118,123,125,124,73,125,0,128,0,28,224,49,247,66,81,80,191,90,229,98,67,105,60,110,31,114,40,117,135,119,97,121,212,122,246,123,216,124,0,128,255,26,77,48,29,65,97,78,216,88,26,97,158,103,194,108,209,112,5,116,140,118,138,120,29,122,91,123,86,124,0,128,1,26,185,46,60,63,100,76,224,86,59,95,227,101,49,107,107,111,201,114,120,117,156,119,80,121,172,122,193,123,0,128,0,25,30,45,78,61,85,74,208,84,63,93,9,100,127,105,228,109,109,113,70,116,144,118,104,120,228,121,21,123,0,128,254,23,126,43,86,59,54,72,172,82,44,91,20,98,176,103,63,108,243,111,245,114,103,117,100,119,1,121,81,122,0,128,2,23,224,41,90,57,12,70,118,80,1,89,3,96,195,101,122,106,88,110,132,113,30,116,65,118,1,120,113,121,0,128,255,21,55,40,77,55,204,67,37,78,183,86,208,93,176,99,142,104,150,108,236,111,175,114,249,116,222,118,112,120,0,128,1,21,143,38,60,53,128,65,193,75,83,84,125,91,122,97,124,102,172,106,44,110,25,113,139,115,150,117,75,119,0,128,1,20,225,36,30,51,33,63,68,73,209,81,8,89,31,95,66,100,152,104,64,108,86,111,241,113,35,116,254,117,0,128,1,19,47,35,246,48,178,60,176,70,50,79,113,86,156,92,221,97,86,102,37,106,100,109,39,112,129,114,130,116,0,128,0,18,120,33,195,46,48,58,1,68,113,76,177,83,236,89,71,95,225,99,213,103,59,107,39,110,170,112,210,114,0,128,255,16,189,31,134,44,156,55,57,65,143,73,202,80,15,87,127,92,54,97,77,101,217,104,236,107,151,110,231,112,0,128,0,16,0,30,64,42,248,52,89,62,142,70,188,77,4,84,131,89,82,94,136,98,55,102,112,105,66,108,186,110,0,128,0,15,62,28,239,39,65,50,93,59,104,67,130,74,199,80,80,86,51,91,131,95,82,99,175,102,167,105,70,108,0,128,0,14,120,26,147,37,119,47,70,56,30,64,27,71,84,77,223,82,207,87,52,92,30,96,155,99,182,102,122,105,0,128,0,13,174,24,44,35,153,44,17,53,173,60,131,67,168,73,45,79,34,84,150,88,151,92,48,96,107,99,82,102,0,128,0,12,224,22,187,32,169,41,193,49,23,57,189,63,195,69,57,75,44,80,168,84,184,88,103,92,189,95,195,98,0,128,0,11,14,21,63,30,166,38,84,46,89,53,195,59,160,65,252,70,226,75,93,80,117,84,51,88,159,91,191,94,0,128,0,10,56,19,184,27,142,35,199,42,112,49,147,55,60,61,115,66,66,71,177,75,199,79,140,83,5,87,57,90,0,128,0,9,94,17,37,25,96,32,25,39,89,45,41,51,144,56,150,61,65,66,152,70,161,74,98,78,223,81,29,85,0,128,0,8,128,15,136,22,32,29,78,35,25,41,135,46,159,51,101,56,223,60,17,65,0,69,176,72,37,76,99,79,0,128,0,7,158,13,223,19,201,25,96,31,169,36,168,41,97,46,216,50,16,55,13,59,210,62,99,66,194,69,241,72,0,128,0,6,184,11,43,17,93,22,81,27,9,32,137,36,211,40], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+143360);
/* memory initializer */ allocate([233,44,206,48,132,52,14,56,109,59,164,62,180,65,0,128,0,5,206,9,108,14,220,18,31,23,56,27,40,31,240,34,147,38,17,42,108,45,166,48,192,51,187,54,152,57,0,128,0,4,224,7,161,11,68,15,202,18,52,22,130,25,182,28,208,31,209,34,186,37,140,40,72,43,238,45,127,48,0,128,0,3,238,5,202,8,149,11,79,14,249,16,147,19,30,22,153,24,5,27,99,29,179,31,245,33,41,36,80,38,0,128,0,2,248,3,232,5,208,7,177,9,138,11,92,13,39,15,234,16,166,18,91,20,10,22,178,23,83,25,238,26,0,128,0,1,254,1,250,2,244,3,236,4,226,5,214,6,200,7,184,8,167,9,148,10,127,11,104,12,79,13,52,14,0,128,0,0,175,116,0,112,103,108,95,105,179,102,73,100,17,98,0,96,15,94,57,92,122,90,206,88,53,87,171,85,46,84,190,82,90,81,0,80,175,78,103,77,39,76,239,74,189,73,147,72,110,71,79,70,54,69,34,68,18,67,8,66,2,65,0,64,1,63,7,62,17,61,30,60,46,59,65,58,88,57,114,56,142,55,173,54,207,53,244,52,26,52,68,51,111,50,157,49,205,48,0,48,52,47,106,46,162,45,220,44,24,44,86,43,149,42,214,41,25,41,93,40,163,39,234,38,51,38,125,37,201,36,22,36,100,35,180,34,5,34,87,33,171,32,0,32,85,31,173,30,5,30,94,29,184,28,20,28,113,27,206,26,45,26,140,25,237,24,78,24,177,23,20,23,121,22,222,21,68,21,171,20,18,20,123,19,229,18,79,18,186,17,38,17,146,16,0,16,110,15,220,14,76,14,188,13,45,13,159,12,17,12,132,11,248,10,108,10,225,9,87,9,205,8,68,8,187,7,51,7,172,6,37,6,159,5,26,5,148,4,16,4,140,3,9,3,134,2,4,2,130,1,1,1,128,0,163,110,0,0,146,119,0,0,128,125,0,0,36,72,0,0,90,82,0,0,189,94,0,0,47,42,0,0,39,50,0,0,64,55,0,0,0,0,0,0,0,0,0,0,32,0,0,0,64,0,0,0,192,0,0,0,160,94,2,0,16,0,0,0,3,0,0,0,224,89,2,0,0,0,0,0,8,0,0,0,16,0,0,0,48,0,0,0,64,96,2,0,8,0,0,0,3,0,0,0,0,90,2,0,0,0,0,0,15,0,0,0,32,96,2,0,4,0,0,0,1,0,0,0,32,90,2,0,1,0,0,0,1,0,0,0,16,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,64,0,0,0,7,0,0,0,1,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,0,1,0,0,0,0,0,0,56,90,2,0,72,90,2,0,96,90,2,0,0,0,0,0,19,0,0,0,19,0,0,0,16,0,0,0,16,0,0,0,44,0,0,0,44,0,0,0,72,0,0,0,0,0,0,0,16,0,0,0,13,0,0,0,18,0,0,0,18,0,0,0,36,0,0,0,40,0,0,0,40,0,0,0,80,0,0,0,14,0,0,0,32,0,0,0,10,0,0,0,48,0,0,0,64,0,0,0,64,0,0,0,100,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,48,0,0,0,48,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,100,0,0,0,12,0,0,0,16,0,0,0,8,0,0,0,24,0,0,0,64,0,0,0,64,0,0,0,100,0,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,24,0,0,0,32,0,0,0,64,0,0,0,64,0,0,0,100,0,0,0,152,90,2,0,160,90,2,0,184,90,2,0,216,90,2,0,224,90,2,0,248,90,2,0,24,91,2,0,32,91,2,0,56,91,2,0,24,91,2,0,32,91,2,0,56,91,2,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,136,91,2,0,144,91,2,0,176,91,2,0,232,91,2,0,240,91,2,0,16,92,2,0,232,91,2,0,240,91,2,0,16,92,2,0,232,91,2,0,240,91,2,0,16,92,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,144,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,144,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,0,0,0,0,0,0,176,63,120,92,2,0,128,92,2,0,176,92,2,0,0,0,0,0,14,0,0,0,12,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,156,93,2,0,124,93,2,0,156,93,2,0,124,93,2,0,172,93,2,0,172,93,2,0,124,93,2,0,124,93,2,0,192,93,2,0,124,93,2,0,192,93,2,0,124,93,2,0,140,93,2,0,140,93,2,0,124,93,2,0,124,93,2,0,136,93,2,0,136,93,2,0,120,93,2,0,120,93,2,0,152,93,2,0,120,93,2,0,152,93,2,0,120,93,2,0,168,93,2,0,168,93,2,0,120,93,2,0,120,93,2,0,188,93,2,0,120,93,2,0,188,93,2,0,120,93,2,0,63,2,34,10,234,27,123,30,236,50,118,89,0,128,0,0,26,1,176,8,109,15,200,24,8,35,109,52,9,56,143,63,11,70,199,72,44,103,105,108,3,114,131,120,230,126,0,128,26,1,196,3,111,7,167,13,139,16,32,26,29,30,41,46,225,48,63,54,199,64,146,84,112,90,70,108,230,126,0,128,8,0,9,0,8,1,10,0,9,1,11,0,8,2,10,1,12,0,8,3,9,2,13,0,11,1,9,3,10,2,14,0,15,0,12,1,10,3,11,2,13,1,11,3,12,2,14,1,15,1,13,2,12,3,14,2,13,3,15,2,14,3,15,3,0,8,0,9,1,8,0,10,1,9,2,8,0,11,1,10,0,12,3,8,2,9,0,13,1,11,2,10,3,9,0,14,1,12,0,15,2,11,3,10,1,13,2,12,1,14,3,11,1,15,2,13,3,12,2,14,2,15,3,13,3,14,3,15,4,8,8,4,5,8,4,9,8,5,9,4,5,9,6,8,4,10,8,6,9,5,5,10,6,9,10,4,7,8,4,11,8,7,9,6,10,5,5,11,7,9,6,10,4,12,8,8,11,4,9,7,10,6,4,13,6,11,7,10,11,5,5,12,8,9,9,8,12,4,10,7,4,14,5,13,11,6,4,15,6,12,7,11,8,10,12,5,9,9,13,4,10,8,5,14,11,7,6,13,5,15,7,12,14,4,13,5,12,6,8,11,9,10,15,4,10,9,6,14,11,8,7,13,14,5,6,15,12,7,13,6,8,12,9,11,15,5,10,10,7,14,11,9,13,7,14,6,7,15,12,8,8,13,9,12,15,6,10,11,8,14,11,10,14,7,13,8,12,9,8,15,9,13,15,7,10,12,11,11,14,8,13,9,9,14,12,10,15,8,9,15,10,13,11,12,12,11,14,9,13,10,10,14,15,9,10,15,11,13,14,10,12,12,13,11,15,10,11,14,11,15,12,13,14,11,13,12,15,11,12,14,13,13,14,12,12,15,15,12,13,14,14,13,13,15,15,13,14,14,14,15,15,14,15,15,0,1,1,0,1,1,0,2,2,0,1,2,0,3,2,1,3,0,1,3,3,1,2,2,2,3,3,2,3,3,0,0,4,0,5,0,4,1,6,0,5,1,7,0,6,1,7,1,0,4,0,5,1,4,0,6,1,5,0,7,1,6,1,7,2,4,4,2,2,5,3,4,4,3,5,2,3,5,2,6,4,4,5,3,2,7,6,2,3,6,4,5,7,2,5,4,6,3,3,7,5,5,7,3,4,6,6,4,4,7,5,6,7,4,6,5,5,7,7,5,6,6,6,7,7,6,7,7,0,0,0,0,183,29,193,4,110,59,130,9,217,38,67,13,220,118,4,19,107,107,197,23,178,77,134,26,5,80,71,30,184,237,8,38,15,240,201,34,214,214,138,47,97,203,75,43,100,155,12,53,211,134,205,49,10,160,142,60,189,189,79,56,112,219,17,76,199,198,208,72,30,224,147,69,169,253,82,65,172,173,21,95,27,176,212,91,194,150,151,86,117,139,86,82,200,54,25,106,127,43,216,110,166,13,155,99,17,16,90,103,20,64,29,121,163,93,220,125,122,123,159,112,205,102,94,116,224,182,35,152,87,171,226,156,142,141,161,145,57,144,96,149,60,192,39,139,139,221,230,143,82,251,165,130,229,230,100,134,88,91,43,190,239,70,234,186,54,96,169,183,129,125,104,179,132,45,47,173,51,48,238,169,234,22,173,164,93,11,108,160,144,109,50,212,39,112,243,208,254,86,176,221,73,75,113,217,76,27,54,199,251,6,247,195,34,32,180,206,149,61,117,202,40,128,58,242,159,157,251,246,70,187,184,251,241,166,121,255,244,246,62,225,67,235,255,229,154,205,188,232,45,208,125,236,119,112,134,52,192,109,71,48,25,75,4,61,174,86,197,57,171,6,130,39,28,27,67,35,197,61,0,46,114,32,193,42,207,157,142,18,120,128,79,22,161,166,12,27,22,187,205,31,19,235,138,1,164,246,75,5,125,208,8,8,202,205,201,12,7,171,151,120,176,182,86,124,105,144,21,113,222,141,212,117,219,221,147,107,108,192,82,111,181,230,17,98,2,251,208,102,191,70,159,94,8,91,94,90,209,125,29,87,102,96,220,83,99,48,155,77,212,45,90,73,13,11,25,68,186,22,216,64,151,198,165,172,32,219,100,168,249,253,39,165,78,224,230,161,75,176,161,191,252,173,96,187,37,139,35,182,146,150,226,178,47,43,173,138,152,54,108,142,65,16,47,131,246,13,238,135,243,93,169,153,68,64,104,157,157,102,43,144,42,123,234,148,231,29,180,224,80,0,117,228,137,38,54,233,62,59,247,237,59,107,176,243,140,118,113,247,85,80,50,250,226,77,243,254,95,240,188,198,232,237,125,194,49,203,62,207,134,214,255,203,131,134,184,213,52,155,121,209,237,189,58,220,90,160,251,216,238,224,12,105,89,253,205,109,128,219,142,96,55,198,79,100,50,150,8,122,133,139,201,126,92,173,138,115,235,176,75,119,86,13,4,79,225,16,197,75,56,54,134,70,143,43,71,66,138,123,0,92,61,102,193,88,228,64,130,85,83,93,67,81,158,59,29,37,41,38,220,33,240,0,159,44,71,29,94,40,66,77,25,54,245,80,216,50,44,118,155,63,155,107,90,59,38,214,21,3,145,203,212,7,72,237,151,10,255,240,86,14,250,160,17,16,77,189,208,20,148,155,147,25,35,134,82,29,14,86,47,241,185,75,238,245,96,109,173,248,215,112,108,252,210,32,43,226,101,61,234,230,188,27,169,235,11,6,104,239,182,187,39,215,1,166,230,211,216,128,165,222,111,157,100,218,106,205,35,196,221,208,226,192,4,246,161,205,179,235,96,201,126,141,62,189,201,144,255,185,16,182,188,180,167,171,125,176,162,251,58,174,21,230,251,170,204,192,184,167,123,221,121,163,198,96,54,155,113,125,247,159,168,91,180,146,31,70,117,150,26,22,50,136,173,11,243,140,116,45,176,129,195,48,113,133,153,144,138,93,46,141,75,89,247,171,8,84,64,182,201,80,69,230,142,78,242,251,79,74,43,221,12,71,156,192,205,67,33,125,130,123,150,96,67,127,79,70,0,114,248,91,193,118,253,11,134,104,74,22,71,108,147,48,4,97,36,45,197,101,233,75,155,17,94,86,90,21,135,112,25,24,48,109,216,28,53,61,159,2,130,32,94,6,91,6,29,11,236,27,220,15,81,166,147,55,230,187,82,51,63,157,17,62,136,128,208,58,141,208,151,36,58,205,86,32,227,235,21,45,84,246,212,41,121,38,169,197,206,59,104,193,23,29,43,204,160,0,234,200,165,80,173,214,18,77,108,210,203,107,47,223,124,118,238,219,193,203,161,227,118,214,96,231,175,240,35,234,24,237,226,238,29,189,165,240,170,160,100,244,115,134,39,249,196,155,230,253,9,253,184,137,190,224,121,141,103,198,58,128,208,219,251,132,213,139,188,154,98,150,125,158,187,176,62,147,12,173,255,151,177,16,176,175,6,13,113,171,223,43,50,166,104,54,243,162,109,102,180,188,218,123,117,184,3,93,54,181,180,64,247,177,79,103,103,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+153600);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC); 
  Module["_llvm_ctlz_i32"] = _llvm_ctlz_i32;

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  function _abort() {
      Module['abort']();
    }

  var _fabs=Math_abs;

   
  Module["_strlen"] = _strlen;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  var _cos=Math_cos;

   
  Module["_i64Add"] = _i64Add;

  
  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return Math.floor(Math.random()*256); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  var _floor=Math_floor;

  function _yuv_display_stub(w, h, xdec, ydec,
  				Y, Y_stride,
  				Cb, Cb_stride,
  				Cr, Cr_stride){
  	
  	var yuv = { width: w,
  		    height: h,
  		    hdec: xdec,
  		    vdec: ydec,
  		    bytesY: new Uint8Array(Module.HEAPU8.buffer, Y, Y_stride*h),
  		    strideY: Y_stride,
  		    bytesCb: new Uint8Array(Module.HEAPU8.buffer, Cb, Cb_stride*(h>>ydec)),
  		    strideCb: Cb_stride,
  		    bytesCr: new Uint8Array(Module.HEAPU8.buffer, Cr, Cr_stride*(h>>ydec)),
  		    strideCr: Cr_stride };
  	
  	yuv_display(yuv);
      }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _sqrt=Math_sqrt;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          ctx = GL.getContext(contextHandle).GLctx;
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _sin=Math_sin;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_v=env.invoke_v;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _yuv_display_stub=env._yuv_display_stub;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _cos=env._cos;
  var _puts=env._puts;
  var _mkport=env._mkport;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var _fputc=env._fputc;
  var _abort=env._abort;
  var _time=env._time;
  var _gettimeofday=env._gettimeofday;
  var _fputs=env._fputs;
  var _sqrt=env._sqrt;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _od_block_size_decode($dec,$adapt,$bsize,$stride) {
 $dec = $dec|0;
 $adapt = $adapt|0;
 $bsize = $bsize|0;
 $stride = $stride|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $i$214 = 0, $or$cond = 0, $or$cond1 = 0, $scevgep$1 = 0, $scevgep$2 = 0, $scevgep$3 = 0, $split16$0 = 0, $tmp$1 = 0, $tmp2 = 0, $tmp2$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $stride ^ -1;
 $1 = (($bsize) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (($bsize) + -1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 ^ $2;
 $7 = $6&255;
 $8 = ($5&255)<($2&255);
 $9 = $8 ? $7 : 0;
 $10 = $9 ^ $3;
 $11 = (0 - ($stride))|0;
 $12 = (($bsize) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $10 ^ $14;
 $16 = ($14>>>0)<($10>>>0);
 $17 = $16 ? $15 : 0;
 $18 = $17 ^ $10;
 $19 = (($stride) + -1)|0;
 $20 = (($bsize) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 ^ $18;
 $24 = ($22>>>0)<($18>>>0);
 $25 = $24 ? $23 : 0;
 $26 = $25 ^ $18;
 $27 = (1 - ($stride))|0;
 $28 = (($bsize) + ($27)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $26 ^ $30;
 $32 = ($30|0)<($26|0);
 $33 = $32 ? $31 : 0;
 $34 = $33 ^ $26;
 $35 = $stride << 1;
 $36 = (($35) + -1)|0;
 $37 = (($bsize) + ($36)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 ^ $34;
 $41 = ($39|0)<($34|0);
 $42 = $41 ? $40 : 0;
 $43 = $42 ^ $34;
 $44 = (2 - ($stride))|0;
 $45 = (($bsize) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $43 ^ $47;
 $49 = ($47|0)<($43|0);
 $50 = $49 ? $48 : 0;
 $51 = $50 ^ $43;
 $52 = ($stride*3)|0;
 $53 = (($52) + -1)|0;
 $54 = (($bsize) + ($53)|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 ^ $51;
 $58 = ($56|0)<($51|0);
 $59 = $58 ? $57 : 0;
 $60 = $59 ^ $51;
 $61 = (3 - ($stride))|0;
 $62 = (($bsize) + ($61)|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $60 ^ $64;
 $66 = ($64|0)<($60|0);
 $67 = $66 ? $65 : 0;
 $68 = $67 ^ $60;
 $69 = ((($adapt) + (($68*14)|0)|0) + 1836|0);
 $70 = (($adapt) + 1832|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (_od_decode_cdf_adapt($dec,$69,7,$71)|0);
 $73 = (8 + ($72<<3)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((8 + ($72<<3)|0) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($74|0)==(3);
 if ($77) {
  HEAP8[$bsize>>0]=50529027&255;HEAP8[$bsize+1>>0]=(50529027>>8)&255;HEAP8[$bsize+2>>0]=(50529027>>16)&255;HEAP8[$bsize+3>>0]=50529027>>24;
  $scevgep$1 = (($bsize) + ($stride)|0);
  HEAP8[$scevgep$1>>0]=50529027&255;HEAP8[$scevgep$1+1>>0]=(50529027>>8)&255;HEAP8[$scevgep$1+2>>0]=(50529027>>16)&255;HEAP8[$scevgep$1+3>>0]=50529027>>24;
  $222 = $stride << 1;
  $scevgep$2 = (($bsize) + ($222)|0);
  HEAP8[$scevgep$2>>0]=50529027&255;HEAP8[$scevgep$2+1>>0]=(50529027>>8)&255;HEAP8[$scevgep$2+2>>0]=(50529027>>16)&255;HEAP8[$scevgep$2+3>>0]=50529027>>24;
  $223 = ($stride*3)|0;
  $scevgep$3 = (($bsize) + ($223)|0);
  HEAP8[$scevgep$3>>0]=50529027&255;HEAP8[$scevgep$3+1>>0]=(50529027>>8)&255;HEAP8[$scevgep$3+2>>0]=(50529027>>16)&255;HEAP8[$scevgep$3+3>>0]=50529027>>24;
 } else {
  $78 = ($76|0)>(1);
  $79 = ($74|0)<(2);
  $or$cond = $78 & $79;
  if ($or$cond) {
   $80 = ((($adapt) + ($74<<5)|0) + 1884|0);
   $81 = (($adapt) + 1880|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_od_decode_cdf_adapt($dec,$80,16,$82)|0);
   $split16$0 = $83;
  } else {
   $84 = ($74|0)==(2);
   $$ = $84 ? 15 : 0;
   $split16$0 = $$;
  }
  $85 = $split16$0 >>> 3;
  $86 = $85 & 1;
  $87 = (($86) + 1)|0;
  $88 = $87&255;
  HEAP8[$bsize>>0] = $88;
  $89 = $split16$0 >>> 2;
  $90 = $89 & 1;
  $91 = (($90) + 1)|0;
  $92 = $91&255;
  $93 = (($bsize) + 2|0);
  HEAP8[$93>>0] = $92;
  $94 = $split16$0 >>> 1;
  $95 = $94 & 1;
  $96 = (($95) + 1)|0;
  $97 = $96&255;
  $98 = $stride << 1;
  $99 = (($bsize) + ($98)|0);
  HEAP8[$99>>0] = $97;
  $100 = $split16$0 & 1;
  $101 = (($100) + 1)|0;
  $102 = $101&255;
  $103 = (($98) + 2)|0;
  $104 = (($bsize) + ($103)|0);
  HEAP8[$104>>0] = $102;
  $105 = ($74|0)==(0);
  $106 = ($76|0)>(0);
  $or$cond1 = $105 & $106;
  $107 = (($adapt) + 1952|0);
  $108 = (($adapt) + 1948|0);
  $109 = ($76|0)==(0);
  $i$214 = 0;
  while(1) {
   $110 = $i$214 << 1;
   $111 = Math_imul($110, $stride)|0;
   $112 = $110 | 1;
   $113 = Math_imul($112, $stride)|0;
   $114 = Math_imul($i$214, $stride)|0;
   $115 = $i$214 << 1;
   $116 = Math_imul($115, $stride)|0;
   $117 = $115 | 1;
   $118 = Math_imul($117, $stride)|0;
   if ($or$cond1) {
    $119 = (($bsize) + ($111)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)==(2);
    if ($121) {
     label = 9;
    } else {
     $122 = HEAP32[$108>>2]|0;
     $123 = (_od_decode_cdf_adapt($dec,$107,16,$122)|0);
     $124 = $123 & 1;
     $125 = $124&255;
     HEAP8[$119>>0] = $125;
     $126 = $123 >>> 1;
     $127 = $126 & 1;
     $128 = $127&255;
     $129 = $111 | 1;
     $130 = (($bsize) + ($129)|0);
     HEAP8[$130>>0] = $128;
     $131 = $123 >>> 2;
     $132 = $131 & 1;
     $133 = $132&255;
     $134 = (($bsize) + ($113)|0);
     HEAP8[$134>>0] = $133;
     $135 = $123 >>> 3;
     $136 = $135 & 1;
     $137 = $136&255;
     $138 = (($113) + 1)|0;
     $139 = (($bsize) + ($138)|0);
     HEAP8[$139>>0] = $137;
    }
   } else {
    label = 9;
   }
   if ((label|0) == 9) {
    label = 0;
    if ($109) {
     $tmp2 = $114 << 1;
     $140 = (($bsize) + ($tmp2)|0);
     HEAP8[$140>>0] = 0;
    }
    $141 = (($bsize) + ($116)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = (($118) + 1)|0;
    $144 = (($bsize) + ($143)|0);
    HEAP8[$144>>0] = $142;
    $145 = $116 | 1;
    $146 = (($bsize) + ($145)|0);
    HEAP8[$146>>0] = $142;
    $147 = (($bsize) + ($118)|0);
    HEAP8[$147>>0] = $142;
   }
   if ($or$cond1) {
    $224 = (($111) + 2)|0;
    $225 = (($bsize) + ($224)|0);
    $226 = HEAP8[$225>>0]|0;
    $227 = ($226<<24>>24)==(2);
    if ($227) {
     label = 17;
    } else {
     $228 = HEAP32[$108>>2]|0;
     $229 = (_od_decode_cdf_adapt($dec,$107,16,$228)|0);
     $230 = $229 & 1;
     $231 = $230&255;
     HEAP8[$225>>0] = $231;
     $232 = $229 >>> 1;
     $233 = $232 & 1;
     $234 = $233&255;
     $235 = $224 | 1;
     $236 = (($bsize) + ($235)|0);
     HEAP8[$236>>0] = $234;
     $237 = $229 >>> 2;
     $238 = $237 & 1;
     $239 = $238&255;
     $240 = (($113) + 2)|0;
     $241 = (($bsize) + ($240)|0);
     HEAP8[$241>>0] = $239;
     $242 = $229 >>> 3;
     $243 = $242 & 1;
     $244 = $243&255;
     $245 = (($113) + 3)|0;
     $246 = (($bsize) + ($245)|0);
     HEAP8[$246>>0] = $244;
    }
   } else {
    label = 17;
   }
   if ((label|0) == 17) {
    label = 0;
    if ($109) {
     $tmp$1 = $114 << 1;
     $tmp2$1 = (($tmp$1) + 2)|0;
     $247 = (($bsize) + ($tmp2$1)|0);
     HEAP8[$247>>0] = 0;
    }
    $248 = (($116) + 2)|0;
    $249 = (($bsize) + ($248)|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = (($118) + 2)|0;
    $252 = (($118) + 3)|0;
    $253 = (($bsize) + ($252)|0);
    HEAP8[$253>>0] = $250;
    $254 = $248 | 1;
    $255 = (($bsize) + ($254)|0);
    HEAP8[$255>>0] = $250;
    $256 = (($bsize) + ($251)|0);
    HEAP8[$256>>0] = $250;
   }
   $257 = (($i$214) + 1)|0;
   $exitcond = ($257|0)==(2);
   if ($exitcond) {
    break;
   } else {
    $i$214 = $257;
   }
  }
 }
 $148 = HEAP8[$bsize>>0]|0;
 $149 = ($148&255)<(2);
 $150 = $149 ? $148 : 2;
 HEAP8[$bsize>>0] = $150;
 $151 = (($bsize) + 1|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = ($152&255)<(2);
 $154 = $153 ? $152 : 2;
 HEAP8[$151>>0] = $154;
 $155 = (($bsize) + 2|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = ($156&255)<(2);
 $158 = $157 ? $156 : 2;
 HEAP8[$155>>0] = $158;
 $159 = (($bsize) + 3|0);
 $160 = HEAP8[$159>>0]|0;
 $161 = ($160&255)<(2);
 $162 = $161 ? $160 : 2;
 HEAP8[$159>>0] = $162;
 $163 = (($bsize) + ($stride)|0);
 $164 = HEAP8[$163>>0]|0;
 $165 = ($164&255)<(2);
 $166 = $165 ? $164 : 2;
 HEAP8[$163>>0] = $166;
 $167 = (($stride) + 1)|0;
 $168 = (($bsize) + ($167)|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = ($169&255)<(2);
 $171 = $170 ? $169 : 2;
 HEAP8[$168>>0] = $171;
 $172 = (($stride) + 2)|0;
 $173 = (($bsize) + ($172)|0);
 $174 = HEAP8[$173>>0]|0;
 $175 = ($174&255)<(2);
 $176 = $175 ? $174 : 2;
 HEAP8[$173>>0] = $176;
 $177 = (($stride) + 3)|0;
 $178 = (($bsize) + ($177)|0);
 $179 = HEAP8[$178>>0]|0;
 $180 = ($179&255)<(2);
 $181 = $180 ? $179 : 2;
 HEAP8[$178>>0] = $181;
 $182 = $stride << 1;
 $183 = (($bsize) + ($182)|0);
 $184 = HEAP8[$183>>0]|0;
 $185 = ($184&255)<(2);
 $186 = $185 ? $184 : 2;
 HEAP8[$183>>0] = $186;
 $187 = $182 | 1;
 $188 = (($bsize) + ($187)|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = ($189&255)<(2);
 $191 = $190 ? $189 : 2;
 HEAP8[$188>>0] = $191;
 $192 = (($182) + 2)|0;
 $193 = (($bsize) + ($192)|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = ($194&255)<(2);
 $196 = $195 ? $194 : 2;
 HEAP8[$193>>0] = $196;
 $197 = (($182) + 3)|0;
 $198 = (($bsize) + ($197)|0);
 $199 = HEAP8[$198>>0]|0;
 $200 = ($199&255)<(2);
 $201 = $200 ? $199 : 2;
 HEAP8[$198>>0] = $201;
 $202 = ($stride*3)|0;
 $203 = (($bsize) + ($202)|0);
 $204 = HEAP8[$203>>0]|0;
 $205 = ($204&255)<(2);
 $206 = $205 ? $204 : 2;
 HEAP8[$203>>0] = $206;
 $207 = (($202) + 1)|0;
 $208 = (($bsize) + ($207)|0);
 $209 = HEAP8[$208>>0]|0;
 $210 = ($209&255)<(2);
 $211 = $210 ? $209 : 2;
 HEAP8[$208>>0] = $211;
 $212 = (($202) + 2)|0;
 $213 = (($bsize) + ($212)|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = ($214&255)<(2);
 $216 = $215 ? $214 : 2;
 HEAP8[$213>>0] = $216;
 $217 = (($202) + 3)|0;
 $218 = (($bsize) + ($217)|0);
 $219 = HEAP8[$218>>0]|0;
 $220 = ($219&255)<(2);
 $221 = $220 ? $219 : 2;
 HEAP8[$218>>0] = $221;
 STACKTOP = sp;return;
}
function _od_bin_fdct4x4($y,$ystride,$x,$xstride) {
 $y = $y|0;
 $ystride = $ystride|0;
 $x = $x|0;
 $xstride = $xstride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $z = sp;
 _od_bin_fdct4($z,$x,$xstride);
 $0 = (($z) + 16|0);
 $1 = (($x) + 4|0);
 _od_bin_fdct4($0,$1,$xstride);
 $2 = (($z) + 32|0);
 $3 = (($x) + 8|0);
 _od_bin_fdct4($2,$3,$xstride);
 $4 = (($z) + 48|0);
 $5 = (($x) + 12|0);
 _od_bin_fdct4($4,$5,$xstride);
 _od_bin_fdct4($y,$z,4);
 $6 = (($y) + ($ystride<<2)|0);
 $7 = (($z) + 4|0);
 _od_bin_fdct4($6,$7,4);
 $8 = $ystride << 1;
 $9 = (($y) + ($8<<2)|0);
 $10 = (($z) + 8|0);
 _od_bin_fdct4($9,$10,4);
 $11 = ($ystride*3)|0;
 $12 = (($y) + ($11<<2)|0);
 $13 = (($z) + 12|0);
 _od_bin_fdct4($12,$13,4);
 STACKTOP = sp;return;
}
function _od_bin_fdct8x8($y,$ystride,$x,$xstride) {
 $y = $y|0;
 $ystride = $ystride|0;
 $x = $x|0;
 $xstride = $xstride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $z = sp;
 _od_bin_fdct8($z,$x,$xstride);
 $0 = (($z) + 32|0);
 $1 = (($x) + 4|0);
 _od_bin_fdct8($0,$1,$xstride);
 $2 = (($z) + 64|0);
 $3 = (($x) + 8|0);
 _od_bin_fdct8($2,$3,$xstride);
 $4 = (($z) + 96|0);
 $5 = (($x) + 12|0);
 _od_bin_fdct8($4,$5,$xstride);
 $6 = (($z) + 128|0);
 $7 = (($x) + 16|0);
 _od_bin_fdct8($6,$7,$xstride);
 $8 = (($z) + 160|0);
 $9 = (($x) + 20|0);
 _od_bin_fdct8($8,$9,$xstride);
 $10 = (($z) + 192|0);
 $11 = (($x) + 24|0);
 _od_bin_fdct8($10,$11,$xstride);
 $12 = (($z) + 224|0);
 $13 = (($x) + 28|0);
 _od_bin_fdct8($12,$13,$xstride);
 _od_bin_fdct8($y,$z,8);
 $14 = (($y) + ($ystride<<2)|0);
 $15 = (($z) + 4|0);
 _od_bin_fdct8($14,$15,8);
 $16 = $ystride << 1;
 $17 = (($y) + ($16<<2)|0);
 $18 = (($z) + 8|0);
 _od_bin_fdct8($17,$18,8);
 $19 = ($ystride*3)|0;
 $20 = (($y) + ($19<<2)|0);
 $21 = (($z) + 12|0);
 _od_bin_fdct8($20,$21,8);
 $22 = $ystride << 2;
 $23 = (($y) + ($22<<2)|0);
 $24 = (($z) + 16|0);
 _od_bin_fdct8($23,$24,8);
 $25 = ($ystride*5)|0;
 $26 = (($y) + ($25<<2)|0);
 $27 = (($z) + 20|0);
 _od_bin_fdct8($26,$27,8);
 $28 = ($ystride*6)|0;
 $29 = (($y) + ($28<<2)|0);
 $30 = (($z) + 24|0);
 _od_bin_fdct8($29,$30,8);
 $31 = ($ystride*7)|0;
 $32 = (($y) + ($31<<2)|0);
 $33 = (($z) + 28|0);
 _od_bin_fdct8($32,$33,8);
 STACKTOP = sp;return;
}
function _od_bin_fdct16x16($y,$ystride,$x,$xstride) {
 $y = $y|0;
 $ystride = $ystride|0;
 $x = $x|0;
 $xstride = $xstride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $z = sp;
 $i$02 = 0;
 while(1) {
  $0 = $i$02 << 4;
  $1 = (($z) + ($0<<2)|0);
  $2 = (($x) + ($i$02<<2)|0);
  _od_bin_fdct16($1,$2,$xstride);
  $3 = (($i$02) + 1)|0;
  $exitcond3 = ($3|0)==(16);
  if ($exitcond3) {
   $i$11 = 0;
   break;
  } else {
   $i$02 = $3;
  }
 }
 while(1) {
  $4 = Math_imul($i$11, $ystride)|0;
  $5 = (($y) + ($4<<2)|0);
  $6 = (($z) + ($i$11<<2)|0);
  _od_bin_fdct16($5,$6,16);
  $7 = (($i$11) + 1)|0;
  $exitcond = ($7|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $7;
  }
 }
 STACKTOP = sp;return;
}
function _od_bin_idct4x4($x,$xstride,$y,$ystride) {
 $x = $x|0;
 $xstride = $xstride|0;
 $y = $y|0;
 $ystride = $ystride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $z = sp;
 _od_bin_idct4($z,4,$y);
 $0 = (($z) + 4|0);
 $1 = (($y) + ($ystride<<2)|0);
 _od_bin_idct4($0,4,$1);
 $2 = (($z) + 8|0);
 $3 = $ystride << 1;
 $4 = (($y) + ($3<<2)|0);
 _od_bin_idct4($2,4,$4);
 $5 = (($z) + 12|0);
 $6 = ($ystride*3)|0;
 $7 = (($y) + ($6<<2)|0);
 _od_bin_idct4($5,4,$7);
 _od_bin_idct4($x,$xstride,$z);
 $8 = (($x) + 4|0);
 $9 = (($z) + 16|0);
 _od_bin_idct4($8,$xstride,$9);
 $10 = (($x) + 8|0);
 $11 = (($z) + 32|0);
 _od_bin_idct4($10,$xstride,$11);
 $12 = (($x) + 12|0);
 $13 = (($z) + 48|0);
 _od_bin_idct4($12,$xstride,$13);
 STACKTOP = sp;return;
}
function _od_bin_idct8x8($x,$xstride,$y,$ystride) {
 $x = $x|0;
 $xstride = $xstride|0;
 $y = $y|0;
 $ystride = $ystride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $z = sp;
 _od_bin_idct8($z,8,$y);
 $0 = (($z) + 4|0);
 $1 = (($y) + ($ystride<<2)|0);
 _od_bin_idct8($0,8,$1);
 $2 = (($z) + 8|0);
 $3 = $ystride << 1;
 $4 = (($y) + ($3<<2)|0);
 _od_bin_idct8($2,8,$4);
 $5 = (($z) + 12|0);
 $6 = ($ystride*3)|0;
 $7 = (($y) + ($6<<2)|0);
 _od_bin_idct8($5,8,$7);
 $8 = (($z) + 16|0);
 $9 = $ystride << 2;
 $10 = (($y) + ($9<<2)|0);
 _od_bin_idct8($8,8,$10);
 $11 = (($z) + 20|0);
 $12 = ($ystride*5)|0;
 $13 = (($y) + ($12<<2)|0);
 _od_bin_idct8($11,8,$13);
 $14 = (($z) + 24|0);
 $15 = ($ystride*6)|0;
 $16 = (($y) + ($15<<2)|0);
 _od_bin_idct8($14,8,$16);
 $17 = (($z) + 28|0);
 $18 = ($ystride*7)|0;
 $19 = (($y) + ($18<<2)|0);
 _od_bin_idct8($17,8,$19);
 _od_bin_idct8($x,$xstride,$z);
 $20 = (($x) + 4|0);
 $21 = (($z) + 32|0);
 _od_bin_idct8($20,$xstride,$21);
 $22 = (($x) + 8|0);
 $23 = (($z) + 64|0);
 _od_bin_idct8($22,$xstride,$23);
 $24 = (($x) + 12|0);
 $25 = (($z) + 96|0);
 _od_bin_idct8($24,$xstride,$25);
 $26 = (($x) + 16|0);
 $27 = (($z) + 128|0);
 _od_bin_idct8($26,$xstride,$27);
 $28 = (($x) + 20|0);
 $29 = (($z) + 160|0);
 _od_bin_idct8($28,$xstride,$29);
 $30 = (($x) + 24|0);
 $31 = (($z) + 192|0);
 _od_bin_idct8($30,$xstride,$31);
 $32 = (($x) + 28|0);
 $33 = (($z) + 224|0);
 _od_bin_idct8($32,$xstride,$33);
 STACKTOP = sp;return;
}
function _od_bin_idct16x16($x,$xstride,$y,$ystride) {
 $x = $x|0;
 $xstride = $xstride|0;
 $y = $y|0;
 $ystride = $ystride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $z = sp;
 $i$02 = 0;
 while(1) {
  $0 = (($z) + ($i$02<<2)|0);
  $1 = Math_imul($i$02, $ystride)|0;
  $2 = (($y) + ($1<<2)|0);
  _od_bin_idct16($0,16,$2);
  $3 = (($i$02) + 1)|0;
  $exitcond3 = ($3|0)==(16);
  if ($exitcond3) {
   $i$11 = 0;
   break;
  } else {
   $i$02 = $3;
  }
 }
 while(1) {
  $4 = (($x) + ($i$11<<2)|0);
  $5 = $i$11 << 4;
  $6 = (($z) + ($5<<2)|0);
  _od_bin_idct16($4,$xstride,$6);
  $7 = (($i$11) + 1)|0;
  $exitcond = ($7|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $7;
  }
 }
 STACKTOP = sp;return;
}
function _od_bin_fdct4($y,$x,$xstride) {
 $y = $y|0;
 $x = $x|0;
 $xstride = $xstride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x>>2]|0;
 $1 = (($x) + ($xstride<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $xstride << 1;
 $4 = (($x) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($xstride*3)|0;
 $7 = (($x) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) - ($8))|0;
 $10 = (($5) + ($2))|0;
 $11 = (($10|0) / 2)&-1;
 $12 = (($11) - ($5))|0;
 $13 = (($9|0) / 2)&-1;
 $14 = (($0) - ($13))|0;
 $15 = (($14) + ($11))|0;
 $16 = (($15) - ($10))|0;
 $17 = ($12*23013)|0;
 $18 = (($17) + 16384)|0;
 $19 = $18 >> 15;
 $20 = (($9) - ($19))|0;
 $21 = ($20*21407)|0;
 $22 = (($21) + 16384)|0;
 $23 = $22 >> 15;
 $24 = (($23) + ($12))|0;
 $25 = ($24*18293)|0;
 $26 = (($25) + 8192)|0;
 $27 = $26 >> 14;
 $28 = (($20) - ($27))|0;
 HEAP32[$y>>2] = $15;
 $29 = (($y) + 4|0);
 HEAP32[$29>>2] = $24;
 $30 = (($y) + 8|0);
 HEAP32[$30>>2] = $16;
 $31 = (($y) + 12|0);
 HEAP32[$31>>2] = $28;
 STACKTOP = sp;return;
}
function _od_bin_fdct8($y,$x,$xstride) {
 $y = $y|0;
 $x = $x|0;
 $xstride = $xstride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x>>2]|0;
 $1 = (($x) + ($xstride<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $xstride << 1;
 $4 = (($x) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($xstride*3)|0;
 $7 = (($x) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $xstride << 2;
 $10 = (($x) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($xstride*5)|0;
 $13 = (($x) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($xstride*6)|0;
 $16 = (($x) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($xstride*7)|0;
 $19 = (($x) + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($0) - ($20))|0;
 $22 = (($21|0) / 2)&-1;
 $23 = (($0) - ($22))|0;
 $24 = (($17) + ($2))|0;
 $25 = (($24|0) / 2)&-1;
 $26 = (($17) - ($25))|0;
 $27 = (($5) - ($14))|0;
 $28 = (($27|0) / 2)&-1;
 $29 = (($11) + ($8))|0;
 $30 = (($29|0) / 2)&-1;
 $31 = (($30) + ($23))|0;
 $32 = (($31) - ($29))|0;
 $33 = (($28) - ($5))|0;
 $34 = (($33) + ($25))|0;
 $35 = (($34) - ($24))|0;
 $36 = ($35*13573)|0;
 $37 = (($36) + 16384)|0;
 $38 = $37 >> 15;
 $39 = (($31) - ($38))|0;
 $40 = ($39*11585)|0;
 $41 = (($40) + 8192)|0;
 $42 = $41 >> 14;
 $43 = (($42) + ($35))|0;
 $44 = ($43*13573)|0;
 $45 = (($44) + 16384)|0;
 $46 = $45 >> 15;
 $47 = (($39) - ($46))|0;
 $48 = ($34*21895)|0;
 $49 = (($48) + 16384)|0;
 $50 = $49 >> 15;
 $51 = (($32) - ($50))|0;
 $52 = ($51*15137)|0;
 $53 = (($52) + 8192)|0;
 $54 = $53 >> 14;
 $55 = (($54) + ($34))|0;
 $56 = ($55*21895)|0;
 $57 = (($56) + 16384)|0;
 $58 = $57 >> 15;
 $59 = (($51) - ($58))|0;
 $60 = ($26*19195)|0;
 $61 = (($60) + 16384)|0;
 $62 = $61 >> 15;
 $63 = (($62) + ($27))|0;
 $64 = ($63*11585)|0;
 $65 = (($64) + 8192)|0;
 $66 = $65 >> 14;
 $67 = (($66) + ($26))|0;
 $68 = ($67*7489)|0;
 $69 = (($68) + 4096)|0;
 $70 = $69 >> 13;
 $71 = (($67|0) / 2)&-1;
 $72 = (($11) - ($30))|0;
 $73 = (($71) + ($72))|0;
 $74 = (($67) - ($73))|0;
 $75 = (($70) - ($63))|0;
 $76 = (($75) + ($22))|0;
 $77 = (($21) - ($76))|0;
 $78 = ($77*3227)|0;
 $79 = (($78) + 16384)|0;
 $80 = $79 >> 15;
 $81 = (($80) + ($73))|0;
 $82 = ($81*6393)|0;
 $83 = (($82) + 16384)|0;
 $84 = $83 >> 15;
 $85 = (($77) - ($84))|0;
 $86 = ($85*3227)|0;
 $87 = (($86) + 16384)|0;
 $88 = $87 >> 15;
 $89 = (($88) + ($81))|0;
 $90 = ($76*2485)|0;
 $91 = (($90) + 4096)|0;
 $92 = $91 >> 13;
 $93 = (($92) + ($74))|0;
 $94 = ($93*18205)|0;
 $95 = (($94) + 16384)|0;
 $96 = $95 >> 15;
 $97 = (($76) - ($96))|0;
 $98 = ($97*2485)|0;
 $99 = (($98) + 4096)|0;
 $100 = $99 >> 13;
 $101 = (($100) + ($93))|0;
 HEAP32[$y>>2] = $47;
 $102 = (($y) + 4|0);
 HEAP32[$102>>2] = $85;
 $103 = (($y) + 8|0);
 HEAP32[$103>>2] = $55;
 $104 = (($y) + 12|0);
 HEAP32[$104>>2] = $97;
 $105 = (($y) + 16|0);
 HEAP32[$105>>2] = $43;
 $106 = (($y) + 20|0);
 HEAP32[$106>>2] = $101;
 $107 = (($y) + 24|0);
 HEAP32[$107>>2] = $59;
 $108 = (($y) + 28|0);
 HEAP32[$108>>2] = $89;
 STACKTOP = sp;return;
}
function _od_bin_fdct16($y,$x,$xstride) {
 $y = $y|0;
 $x = $x|0;
 $xstride = $xstride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x>>2]|0;
 $1 = (($x) + ($xstride<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $xstride << 1;
 $4 = (($x) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($xstride*3)|0;
 $7 = (($x) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $xstride << 2;
 $10 = (($x) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($xstride*5)|0;
 $13 = (($x) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($xstride*6)|0;
 $16 = (($x) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($xstride*7)|0;
 $19 = (($x) + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $xstride << 3;
 $22 = (($x) + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($xstride*9)|0;
 $25 = (($x) + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($xstride*10)|0;
 $28 = (($x) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($xstride*11)|0;
 $31 = (($x) + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($xstride*12)|0;
 $34 = (($x) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($xstride*13)|0;
 $37 = (($x) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($xstride*14)|0;
 $40 = (($x) + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($xstride*15)|0;
 $43 = (($x) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($0) - ($44))|0;
 $46 = (($41) + ($2))|0;
 $47 = (($5) - ($38))|0;
 $48 = (($35) + ($8))|0;
 $49 = (($11) - ($32))|0;
 $50 = (($29) + ($14))|0;
 $51 = (($17) - ($26))|0;
 $52 = (($23) + ($20))|0;
 $53 = (($45|0) / 2)&-1;
 $54 = (($0) - ($53))|0;
 $55 = (($46|0) / 2)&-1;
 $56 = (($55) - ($41))|0;
 $57 = (($47|0) / 2)&-1;
 $58 = (($5) - ($57))|0;
 $59 = (($48|0) / 2)&-1;
 $60 = (($59) - ($35))|0;
 $61 = (($49|0) / 2)&-1;
 $62 = (($50|0) / 2)&-1;
 $63 = (($62) - ($29))|0;
 $64 = (($51|0) / 2)&-1;
 $65 = (($52|0) / 2)&-1;
 $66 = (($65) - ($23))|0;
 $67 = (($65) + ($54))|0;
 $68 = (($64) - ($17))|0;
 $69 = (($68) + ($55))|0;
 $70 = (($62) + ($58))|0;
 $71 = (($61) - ($11))|0;
 $72 = (($71) + ($59))|0;
 $73 = (($67) - ($52))|0;
 $74 = (($46) - ($69))|0;
 $75 = (($70) - ($50))|0;
 $76 = (($72) - ($48))|0;
 $77 = (($67) + ($76))|0;
 $78 = (($74) + ($70))|0;
 $79 = (($78|0) / 2)&-1;
 $80 = (($79) - ($70))|0;
 $81 = (($77|0) / 2)&-1;
 $82 = (($67) - ($81))|0;
 $83 = (($82) + ($79))|0;
 $84 = (($83) - ($78))|0;
 $85 = ($80*23013)|0;
 $86 = (($85) + 16384)|0;
 $87 = $86 >> 15;
 $88 = (($77) - ($87))|0;
 $89 = ($88*10703)|0;
 $90 = (($89) + 8192)|0;
 $91 = $90 >> 14;
 $92 = (($91) + ($80))|0;
 $93 = ($92*9147)|0;
 $94 = (($93) + 4096)|0;
 $95 = $94 >> 13;
 $96 = (($88) - ($95))|0;
 $97 = ($75*13573)|0;
 $98 = (($97) + 16384)|0;
 $99 = $98 >> 15;
 $100 = (($99) + ($69))|0;
 $101 = ($100*11585)|0;
 $102 = (($101) + 8192)|0;
 $103 = $102 >> 14;
 $104 = (($75) - ($103))|0;
 $105 = ($104*13573)|0;
 $106 = (($105) + 16384)|0;
 $107 = $106 >> 15;
 $108 = (($107) + ($100))|0;
 $109 = (($104) + ($72))|0;
 $110 = (($108) + ($73))|0;
 $111 = (($109|0) / 2)&-1;
 $112 = (($111) - ($72))|0;
 $113 = (($110|0) / 2)&-1;
 $114 = (($113) - ($108))|0;
 $115 = ($110*2275)|0;
 $116 = (($115) + 1024)|0;
 $117 = $116 >> 11;
 $118 = (($117) + ($112))|0;
 $119 = ($118*9041)|0;
 $120 = (($119) + 16384)|0;
 $121 = $120 >> 15;
 $122 = (($110) - ($121))|0;
 $123 = ($122*2873)|0;
 $124 = (($123) + 1024)|0;
 $125 = $124 >> 11;
 $126 = (($118) - ($125))|0;
 $127 = ($109*8593)|0;
 $128 = (($127) + 8192)|0;
 $129 = $128 >> 14;
 $130 = (($114) - ($129))|0;
 $131 = ($130*12873)|0;
 $132 = (($131) + 8192)|0;
 $133 = $132 >> 14;
 $134 = (($133) + ($109))|0;
 $135 = ($134*7335)|0;
 $136 = (($135) + 16384)|0;
 $137 = $136 >> 15;
 $138 = (($137) + ($130))|0;
 $139 = ($45*1035)|0;
 $140 = (($139) + 1024)|0;
 $141 = $140 >> 11;
 $142 = (($66) + ($141))|0;
 $143 = ($142*14699)|0;
 $144 = (($143) + 8192)|0;
 $145 = $144 >> 14;
 $146 = (($45) - ($145))|0;
 $147 = ($146*851)|0;
 $148 = (($147) + 4096)|0;
 $149 = $148 >> 13;
 $150 = (($142) - ($149))|0;
 $151 = ($51*17515)|0;
 $152 = (($151) + 16384)|0;
 $153 = $152 >> 15;
 $154 = (($56) + ($153))|0;
 $155 = ($154*20435)|0;
 $156 = (($155) + 8192)|0;
 $157 = $156 >> 14;
 $158 = (($51) - ($157))|0;
 $159 = ($158*4379)|0;
 $160 = (($159) + 8192)|0;
 $161 = $160 >> 14;
 $162 = ($47*12905)|0;
 $163 = (($162) + 8192)|0;
 $164 = $163 >> 14;
 $165 = (($63) + ($164))|0;
 $166 = ($165*3363)|0;
 $167 = (($166) + 4096)|0;
 $168 = $167 >> 13;
 $169 = (($47) - ($168))|0;
 $170 = ($169*14101)|0;
 $171 = (($170) + 8192)|0;
 $172 = $171 >> 14;
 $173 = (($165) - ($172))|0;
 $174 = ($49*5417)|0;
 $175 = (($174) + 4096)|0;
 $176 = $175 >> 13;
 $177 = (($60) + ($176))|0;
 $178 = ($177*23059)|0;
 $179 = (($178) + 8192)|0;
 $180 = $179 >> 14;
 $181 = (($49) - ($180))|0;
 $182 = ($181*20055)|0;
 $183 = (($182) + 16384)|0;
 $184 = $183 >> 15;
 $185 = (($184) + ($177))|0;
 $186 = (($150) - ($181))|0;
 $187 = (($173) + ($158))|0;
 $188 = (($186|0) / 2)&-1;
 $189 = (($150) - ($188))|0;
 $190 = (($187|0) / 2)&-1;
 $191 = (($190) - ($173))|0;
 $192 = (($185) + ($146))|0;
 $sum = (($161) + ($154))|0;
 $193 = (($169) - ($sum))|0;
 $194 = (($192|0) / 2)&-1;
 $195 = (($193|0) / 2)&-1;
 $196 = (($189) + ($195))|0;
 $197 = (($146) - ($194))|0;
 $198 = (($197) + ($190))|0;
 $199 = (($191) + ($188))|0;
 $200 = (($195) - ($169))|0;
 $201 = (($200) + ($194))|0;
 $202 = (($193) - ($196))|0;
 $203 = (($187) - ($198))|0;
 $204 = (($199) - ($186))|0;
 $205 = (($192) - ($201))|0;
 $206 = ($202*10947)|0;
 $207 = (($206) + 8192)|0;
 $208 = $207 >> 14;
 $209 = (($198) - ($208))|0;
 $210 = ($209*15137)|0;
 $211 = (($210) + 8192)|0;
 $212 = $211 >> 14;
 $213 = (($212) + ($202))|0;
 $214 = ($213*10947)|0;
 $215 = (($214) + 8192)|0;
 $216 = $215 >> 14;
 $217 = (($209) - ($216))|0;
 $218 = ($196*21895)|0;
 $219 = (($218) + 16384)|0;
 $220 = $219 >> 15;
 $221 = (($220) + ($203))|0;
 $222 = ($221*15137)|0;
 $223 = (($222) + 8192)|0;
 $224 = $223 >> 14;
 $225 = (($196) - ($224))|0;
 $226 = ($225*10947)|0;
 $227 = (($226) + 8192)|0;
 $228 = $227 >> 14;
 $229 = (($228) + ($221))|0;
 $230 = ($204*13573)|0;
 $231 = (($230) + 16384)|0;
 $232 = $231 >> 15;
 $233 = (($205) - ($232))|0;
 $234 = ($233*11585)|0;
 $235 = (($234) + 8192)|0;
 $236 = $235 >> 14;
 $237 = (($236) + ($204))|0;
 $238 = ($237*13573)|0;
 $239 = (($238) + 16384)|0;
 $240 = $239 >> 15;
 $241 = (($233) - ($240))|0;
 HEAP32[$y>>2] = $83;
 $242 = (($y) + 4|0);
 HEAP32[$242>>2] = $241;
 $243 = (($y) + 8|0);
 HEAP32[$243>>2] = $122;
 $244 = (($y) + 12|0);
 HEAP32[$244>>2] = $225;
 $245 = (($y) + 16|0);
 HEAP32[$245>>2] = $92;
 $246 = (($y) + 20|0);
 HEAP32[$246>>2] = $217;
 $247 = (($y) + 24|0);
 HEAP32[$247>>2] = $138;
 $248 = (($y) + 28|0);
 HEAP32[$248>>2] = $201;
 $249 = (($y) + 32|0);
 HEAP32[$249>>2] = $84;
 $250 = (($y) + 36|0);
 HEAP32[$250>>2] = $199;
 $251 = (($y) + 40|0);
 HEAP32[$251>>2] = $134;
 $252 = (($y) + 44|0);
 HEAP32[$252>>2] = $213;
 $253 = (($y) + 48|0);
 HEAP32[$253>>2] = $96;
 $254 = (($y) + 52|0);
 HEAP32[$254>>2] = $229;
 $255 = (($y) + 56|0);
 HEAP32[$255>>2] = $126;
 $256 = (($y) + 60|0);
 HEAP32[$256>>2] = $237;
 STACKTOP = sp;return;
}
function _od_bin_idct4($x,$xstride,$y) {
 $x = $x|0;
 $xstride = $xstride|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$y>>2]|0;
 $1 = (($y) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($y) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($y) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($2*18293)|0;
 $8 = (($7) + 8192)|0;
 $9 = $8 >> 14;
 $10 = (($9) + ($6))|0;
 $11 = ($10*21407)|0;
 $12 = (($11) + 16384)|0;
 $13 = $12 >> 15;
 $14 = (($2) - ($13))|0;
 $15 = ($14*23013)|0;
 $16 = (($15) + 16384)|0;
 $17 = $16 >> 15;
 $18 = (($17) + ($10))|0;
 $19 = (($0) - ($4))|0;
 $20 = (($19|0) / 2)&-1;
 $21 = (($18|0) / 2)&-1;
 $22 = (($21) - ($20))|0;
 $23 = (($22) + ($0))|0;
 $24 = (($20) - ($14))|0;
 HEAP32[$x>>2] = $23;
 $25 = (($19) - ($24))|0;
 $26 = (($x) + ($xstride<<2)|0);
 HEAP32[$26>>2] = $25;
 $27 = $xstride << 1;
 $28 = (($x) + ($27<<2)|0);
 HEAP32[$28>>2] = $24;
 $29 = (($23) - ($18))|0;
 $30 = ($xstride*3)|0;
 $31 = (($x) + ($30<<2)|0);
 HEAP32[$31>>2] = $29;
 STACKTOP = sp;return;
}
function _od_bin_idct8($x,$xstride,$y) {
 $x = $x|0;
 $xstride = $xstride|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$y>>2]|0;
 $1 = (($y) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($y) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($y) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($y) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($y) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($y) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($y) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($6*2485)|0;
 $16 = (($15) + 4096)|0;
 $17 = $16 >> 13;
 $18 = (($10) - ($17))|0;
 $19 = ($18*18205)|0;
 $20 = (($19) + 16384)|0;
 $21 = $20 >> 15;
 $22 = (($21) + ($6))|0;
 $23 = ($22*2485)|0;
 $24 = (($23) + 4096)|0;
 $25 = $24 >> 13;
 $26 = (($18) - ($25))|0;
 $27 = ($2*3227)|0;
 $28 = (($27) + 16384)|0;
 $29 = $28 >> 15;
 $30 = (($14) - ($29))|0;
 $31 = ($30*6393)|0;
 $32 = (($31) + 16384)|0;
 $33 = $32 >> 15;
 $34 = (($33) + ($2))|0;
 $35 = ($34*3227)|0;
 $36 = (($35) + 16384)|0;
 $37 = $36 >> 15;
 $38 = (($30) - ($37))|0;
 $39 = (($34) + ($22))|0;
 $40 = (($39|0) / 2)&-1;
 $41 = (($40) - ($22))|0;
 $42 = (($38) + ($26))|0;
 $43 = (($42|0) / 2)&-1;
 $44 = ($42*7489)|0;
 $45 = (($44) + 4096)|0;
 $46 = $45 >> 13;
 $47 = (($46) + ($41))|0;
 $48 = ($47*11585)|0;
 $49 = (($48) + 8192)|0;
 $50 = $49 >> 14;
 $51 = (($42) - ($50))|0;
 $52 = ($51*19195)|0;
 $53 = (($52) + 16384)|0;
 $54 = $53 >> 15;
 $55 = (($47) - ($54))|0;
 $56 = ($4*21895)|0;
 $57 = (($56) + 16384)|0;
 $58 = $57 >> 15;
 $59 = (($12) + ($58))|0;
 $60 = ($59*15137)|0;
 $61 = (($60) + 8192)|0;
 $62 = $61 >> 14;
 $63 = (($4) - ($62))|0;
 $64 = ($63*21895)|0;
 $65 = (($64) + 16384)|0;
 $66 = $65 >> 15;
 $67 = ($8*13573)|0;
 $68 = (($67) + 16384)|0;
 $69 = $68 >> 15;
 $70 = (($69) + ($0))|0;
 $71 = ($70*11585)|0;
 $72 = (($71) + 8192)|0;
 $73 = $72 >> 14;
 $74 = (($8) - ($73))|0;
 $75 = ($74*13573)|0;
 $76 = (($75) + 16384)|0;
 $77 = $76 >> 15;
 $78 = (($77) + ($70))|0;
 $79 = (($63) - ($74))|0;
 $80 = (($79|0) / 2)&-1;
 $81 = (($80) - ($63))|0;
 $sum = (($66) + ($59))|0;
 $82 = (($78) - ($sum))|0;
 $83 = (($82|0) / 2)&-1;
 $84 = (($78) - ($83))|0;
 $85 = (($38) - ($43))|0;
 $86 = (($85) + ($83))|0;
 $87 = (($82) - ($86))|0;
 $88 = (($55|0) / 2)&-1;
 $89 = (($81) + ($88))|0;
 $90 = (($89) - ($55))|0;
 $91 = (($51) + ($80))|0;
 $92 = (($79) - ($91))|0;
 $93 = (($84) + ($40))|0;
 $94 = (($93) - ($39))|0;
 HEAP32[$x>>2] = $93;
 $95 = (($x) + ($xstride<<2)|0);
 HEAP32[$95>>2] = $92;
 $96 = $xstride << 1;
 $97 = (($x) + ($96<<2)|0);
 HEAP32[$97>>2] = $89;
 $98 = ($xstride*3)|0;
 $99 = (($x) + ($98<<2)|0);
 HEAP32[$99>>2] = $87;
 $100 = $xstride << 2;
 $101 = (($x) + ($100<<2)|0);
 HEAP32[$101>>2] = $86;
 $102 = ($xstride*5)|0;
 $103 = (($x) + ($102<<2)|0);
 HEAP32[$103>>2] = $90;
 $104 = ($xstride*6)|0;
 $105 = (($x) + ($104<<2)|0);
 HEAP32[$105>>2] = $91;
 $106 = ($xstride*7)|0;
 $107 = (($x) + ($106<<2)|0);
 HEAP32[$107>>2] = $94;
 STACKTOP = sp;return;
}
function _od_bin_idct16($x,$xstride,$y) {
 $x = $x|0;
 $xstride = $xstride|0;
 $y = $y|0;
 var $$neg2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$y>>2]|0;
 $1 = (($y) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($y) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($y) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($y) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($y) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($y) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($y) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($y) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($y) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($y) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($y) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($y) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($y) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($y) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($y) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30*13573)|0;
 $32 = (($31) + 16384)|0;
 $33 = $32 >> 15;
 $34 = (($33) + ($2))|0;
 $35 = ($34*11585)|0;
 $36 = (($35) + 8192)|0;
 $37 = $36 >> 14;
 $38 = (($30) - ($37))|0;
 $39 = ($38*13573)|0;
 $40 = (($39) + 16384)|0;
 $41 = $40 >> 15;
 $42 = (($34) + ($14))|0;
 $43 = (($42) + ($41))|0;
 $44 = ($6*10947)|0;
 $45 = (($44) + 8192)|0;
 $46 = $45 >> 14;
 $47 = (($26) - ($46))|0;
 $48 = ($47*15137)|0;
 $49 = (($48) + 8192)|0;
 $50 = $49 >> 14;
 $51 = (($50) + ($6))|0;
 $52 = ($22*10947)|0;
 $53 = (($52) + 8192)|0;
 $54 = $53 >> 14;
 $55 = (($54) + ($10))|0;
 $56 = ($55*15137)|0;
 $57 = (($56) + 8192)|0;
 $58 = $57 >> 14;
 $59 = (($22) - ($58))|0;
 $60 = ($59*10947)|0;
 $61 = (($60) + 8192)|0;
 $62 = $61 >> 14;
 $63 = (($62) + ($55))|0;
 $64 = ($51*21895)|0;
 $65 = (($64) + 16384)|0;
 $66 = $65 >> 15;
 $67 = (($63) - ($66))|0;
 $68 = (($67) + ($47))|0;
 $69 = (($18) - ($38))|0;
 $70 = (($59) + ($51))|0;
 $71 = (($69|0) / 2)&-1;
 $72 = (($70|0) / 2)&-1;
 $73 = (($71) - ($72))|0;
 $74 = (($51) + ($73))|0;
 $75 = (($43|0) / 2)&-1;
 $76 = (($75) - ($14))|0;
 $77 = (($76) + ($72))|0;
 $78 = (($68|0) / 2)&-1;
 $79 = (($75) - ($78))|0;
 $80 = (($63) + ($79))|0;
 $81 = (($71) - ($18))|0;
 $82 = (($78) + ($81))|0;
 $83 = (($68) - ($82))|0;
 $84 = (($74) - ($69))|0;
 $85 = ($84*20055)|0;
 $86 = (($85) + 16384)|0;
 $87 = $86 >> 15;
 $$neg2 = (($43) - ($80))|0;
 $88 = (($$neg2) - ($87))|0;
 $89 = ($88*23059)|0;
 $90 = (($89) + 8192)|0;
 $91 = $90 >> 14;
 $92 = (($91) + ($84))|0;
 $93 = ($92*5417)|0;
 $94 = (($93) + 4096)|0;
 $95 = $94 >> 13;
 $96 = (($77) - ($70))|0;
 $97 = ($77*14101)|0;
 $98 = (($97) + 8192)|0;
 $99 = $98 >> 14;
 $100 = (($99) + ($82))|0;
 $101 = ($100*3363)|0;
 $102 = (($101) + 4096)|0;
 $103 = $102 >> 13;
 $104 = (($103) + ($77))|0;
 $105 = ($104*12905)|0;
 $106 = (($105) + 8192)|0;
 $107 = $106 >> 14;
 $108 = ($83*4379)|0;
 $109 = (($108) + 8192)|0;
 $110 = $109 >> 14;
 $111 = (($96) - ($110))|0;
 $112 = ($111*20435)|0;
 $113 = (($112) + 8192)|0;
 $114 = $113 >> 14;
 $115 = (($114) + ($83))|0;
 $116 = ($115*17515)|0;
 $117 = (($116) + 16384)|0;
 $118 = $117 >> 15;
 $119 = ($80*851)|0;
 $120 = (($119) + 4096)|0;
 $121 = $120 >> 13;
 $122 = (($121) + ($74))|0;
 $123 = ($122*14699)|0;
 $124 = (($123) + 8192)|0;
 $125 = $124 >> 14;
 $126 = (($125) + ($80))|0;
 $127 = ($126*1035)|0;
 $128 = (($127) + 1024)|0;
 $129 = $128 >> 11;
 $130 = ($20*7335)|0;
 $131 = (($130) + 16384)|0;
 $132 = $131 >> 15;
 $133 = (($12) - ($132))|0;
 $134 = ($133*12873)|0;
 $135 = (($134) + 8192)|0;
 $136 = $135 >> 14;
 $137 = (($20) - ($136))|0;
 $138 = ($4*2873)|0;
 $139 = (($138) + 1024)|0;
 $140 = $139 >> 11;
 $141 = (($28) + ($140))|0;
 $142 = ($141*9041)|0;
 $143 = (($142) + 16384)|0;
 $144 = $143 >> 15;
 $145 = (($144) + ($4))|0;
 $146 = (($145|0) / 2)&-1;
 $147 = (($146) - ($133))|0;
 $148 = ($137*8593)|0;
 $149 = (($148) + 8192)|0;
 $150 = $149 >> 14;
 $151 = (($147) - ($150))|0;
 $152 = (($137|0) / 2)&-1;
 $153 = (($152) - ($141))|0;
 $154 = ($145*2275)|0;
 $155 = (($154) + 1024)|0;
 $156 = $155 >> 11;
 $157 = (($153) + ($156))|0;
 $158 = (($137) - ($157))|0;
 $159 = ($158*13573)|0;
 $160 = (($159) + 16384)|0;
 $161 = $160 >> 15;
 $162 = (($151) - ($161))|0;
 $163 = ($162*11585)|0;
 $164 = (($163) + 8192)|0;
 $165 = $164 >> 14;
 $166 = (($165) + ($158))|0;
 $167 = ($166*13573)|0;
 $168 = (($167) + 16384)|0;
 $169 = $168 >> 15;
 $170 = (($162) - ($169))|0;
 $171 = ($8*9147)|0;
 $172 = (($171) + 4096)|0;
 $173 = $172 >> 13;
 $174 = (($24) + ($173))|0;
 $175 = ($174*10703)|0;
 $176 = (($175) + 8192)|0;
 $177 = $176 >> 14;
 $178 = (($8) - ($177))|0;
 $179 = ($178*23013)|0;
 $180 = (($179) + 16384)|0;
 $181 = $180 >> 15;
 $182 = (($181) + ($174))|0;
 $183 = (($0) - ($16))|0;
 $184 = (($183|0) / 2)&-1;
 $185 = (($182|0) / 2)&-1;
 $186 = (($185) - ($184))|0;
 $187 = (($186) + ($0))|0;
 $188 = (($184) - ($178))|0;
 $189 = (($170) - ($188))|0;
 $190 = (($189) + ($183))|0;
 $191 = (($187) - ($182))|0;
 $192 = (($191) + ($157))|0;
 $193 = (($188) - ($166))|0;
 $194 = (($151) - ($145))|0;
 $195 = (($187) + ($194))|0;
 $196 = (($192|0) / 2)&-1;
 $197 = (($196) - ($157))|0;
 $198 = (($193|0) / 2)&-1;
 $199 = (($188) - ($198))|0;
 $200 = (($190|0) / 2)&-1;
 $201 = (($200) - ($170))|0;
 $202 = (($195|0) / 2)&-1;
 $203 = (($187) - ($202))|0;
 $204 = (($129) - ($122))|0;
 $205 = (($204) + ($202))|0;
 $206 = (($115|0) / 2)&-1;
 $207 = (($201) + ($206))|0;
 $208 = (($107) - ($100))|0;
 $209 = (($208) + ($198))|0;
 $210 = (($92|0) / 2)&-1;
 $211 = (($210) + ($197))|0;
 $212 = (($95) - ($88))|0;
 $213 = (($212) + ($196))|0;
 $214 = (($104|0) / 2)&-1;
 $215 = (($214) + ($199))|0;
 $216 = (($118) - ($111))|0;
 $217 = (($216) + ($200))|0;
 $218 = (($126|0) / 2)&-1;
 $219 = (($218) + ($203))|0;
 HEAP32[$x>>2] = $219;
 $220 = (($190) - ($217))|0;
 $221 = (($x) + ($xstride<<2)|0);
 HEAP32[$221>>2] = $220;
 $222 = $xstride << 1;
 $223 = (($x) + ($222<<2)|0);
 HEAP32[$223>>2] = $215;
 $224 = (($192) - ($213))|0;
 $225 = ($xstride*3)|0;
 $226 = (($x) + ($225<<2)|0);
 HEAP32[$226>>2] = $224;
 $227 = $xstride << 2;
 $228 = (($x) + ($227<<2)|0);
 HEAP32[$228>>2] = $211;
 $229 = (($193) - ($209))|0;
 $230 = ($xstride*5)|0;
 $231 = (($x) + ($230<<2)|0);
 HEAP32[$231>>2] = $229;
 $232 = ($xstride*6)|0;
 $233 = (($x) + ($232<<2)|0);
 HEAP32[$233>>2] = $207;
 $234 = (($195) - ($205))|0;
 $235 = ($xstride*7)|0;
 $236 = (($x) + ($235<<2)|0);
 HEAP32[$236>>2] = $234;
 $237 = $xstride << 3;
 $238 = (($x) + ($237<<2)|0);
 HEAP32[$238>>2] = $205;
 $239 = (($207) - ($115))|0;
 $240 = ($xstride*9)|0;
 $241 = (($x) + ($240<<2)|0);
 HEAP32[$241>>2] = $239;
 $242 = ($xstride*10)|0;
 $243 = (($x) + ($242<<2)|0);
 HEAP32[$243>>2] = $209;
 $244 = (($211) - ($92))|0;
 $245 = ($xstride*11)|0;
 $246 = (($x) + ($245<<2)|0);
 HEAP32[$246>>2] = $244;
 $247 = ($xstride*12)|0;
 $248 = (($x) + ($247<<2)|0);
 HEAP32[$248>>2] = $213;
 $249 = (($215) - ($104))|0;
 $250 = ($xstride*13)|0;
 $251 = (($x) + ($250<<2)|0);
 HEAP32[$251>>2] = $249;
 $252 = ($xstride*14)|0;
 $253 = (($x) + ($252<<2)|0);
 HEAP32[$253>>2] = $217;
 $254 = (($219) - ($126))|0;
 $255 = ($xstride*15)|0;
 $256 = (($x) + ($255<<2)|0);
 HEAP32[$256>>2] = $254;
 STACKTOP = sp;return;
}
function _daala_decode_alloc($info,$setup) {
 $info = $info|0;
 $setup = $setup|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($info|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_malloc(6832)|0);
  $2 = (_od_dec_init($1,$info)|0);
  $3 = ($2|0)<(0);
  if ($3) {
   _free($1);
   $$0 = 0;
  } else {
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _od_dec_init($dec,$info) {
 $dec = $dec|0;
 $info = $info|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_od_state_init($dec,$info)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = $0;
 } else {
  $2 = (($dec) + 6824|0);
  HEAP32[$2>>2] = 0;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _daala_decode_free($dec) {
 $dec = $dec|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dec|0)==(0|0);
 if (!($0)) {
  _od_dec_clear($dec);
  _free($dec);
 }
 STACKTOP = sp;return;
}
function _od_dec_clear($dec) {
 $dec = $dec|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _od_state_clear($dec);
 STACKTOP = sp;return;
}
function _od_single_band_decode($dec,$ctx,$ln,$pli,$bx,$by,$has_ur) {
 $dec = $dec|0;
 $ctx = $ctx|0;
 $ln = $ln|0;
 $pli = $pli|0;
 $bx = $bx|0;
 $by = $by|0;
 $has_ur = $has_ur|0;
 var $$sum = 0, $$sum2 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $dc_quant$010 = 0;
 var $dc_quant$07 = 0, $or$cond = 0, $or$cond6 = 0, $pred = 0, $predt = 0, $storemerge = 0, $tmp = 0, $tmp11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $pred = sp + 1024|0;
 $predt = sp;
 $0 = (($ln) + 2)|0;
 $1 = 1 << $0;
 $2 = ((($ctx) + ($pli<<2)|0) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $bx << $ln;
 $5 = $by << $ln;
 $6 = ((($dec) + ($pli<<4)|0) + 556|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($dec) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >> $8;
 $12 = (($ctx) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($ctx) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($pli<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($ctx) + ($pli<<2)|0) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($ctx) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = (($ctx) + 44|0);
  $24 = (($ctx) + 40|0);
  $25 = HEAP32[$23>>2]|0;
  $26 = HEAP32[$24>>2]|0;
  $27 = (64 + ($ln<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $5 << 2;
  $30 = Math_imul($29, $11)|0;
  $31 = $4 << 2;
  $$sum = (($30) + ($31))|0;
  $32 = (($26) + ($$sum<<2)|0);
  $33 = (($25) + ($$sum<<2)|0);
  FUNCTION_TABLE_viiii[$28 & 15]($32,$11,$33,$11);
 }
 _od_decode_compute_pred($dec,$ctx,$pred,$ln,$pli,$4,$5,$has_ur);
 $34 = ($3|0)!=(0);
 $35 = $34&1;
 $36 = $35 ^ 1;
 _od_raster_to_coding_order($predt,$1,$pred,$1,$36);
 $37 = ((($dec) + ($pli<<2)|0) + 6808|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)>(1);
 $40 = $39 ? $38 : 1;
 if ($34) {
  $45 = ((154456 + (($pli*12)|0)|0) + ($ln<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($47, $40)|0;
  $49 = $48 >> 4;
  $50 = ($49|0)>(1);
  $51 = $50 ? $49 : 1;
  $52 = ((154456 + (($pli*12)|0)|0) + ($ln<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((154696 + (($pli*12)|0)|0) + ($ln<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (154968 + ($ln<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$20>>2]|0;
  _pvq_decode($dec,$predt,$pred,$40,$pli,$ln,$53,$55,$57,$58);
  $dc_quant$07 = $51;
 } else {
  $41 = ($pli|0)==(0);
  $42 = ($38|0)==(0);
  $or$cond = $41 | $42;
  if ($or$cond) {
   $dc_quant$010 = $40;
  } else {
   $43 = (($40) + 1)|0;
   $44 = $43 >> 1;
   $dc_quant$010 = $44;
  }
  _od_single_band_scalar_decode($dec,$ln,$pred,$predt,$40,$pli);
  $dc_quant$07 = $dc_quant$010;
 }
 $59 = HEAP32[$20>>2]|0;
 $60 = ($59|0)==(0);
 if ($60) {
  $61 = $34&1;
  if ($34) {
   $62 = HEAP32[$pred>>2]|0;
   $63 = ($62|0)==(0);
   if (!($63)) {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   $64 = (($dec) + 6768|0);
   $65 = ((($dec) + (($pli*388)|0)|0) + 3168|0);
   $66 = (((($dec) + (($pli*36)|0)|0) + (($ln*12)|0)|0) + 6288|0);
   $67 = (_generic_decode($64,$65,-1,$66,2)|0);
   $68 = (($67) + ($61))|0;
   HEAP32[$pred>>2] = $68;
   $69 = ($68|0)==(0);
   if (!($69)) {
    $70 = (_od_ec_dec_bits($64,1)|0);
    $71 = ($70|0)!=(0);
    $72 = $71 ? -1 : 1;
    $73 = HEAP32[$pred>>2]|0;
    $74 = Math_imul($72, $73)|0;
    HEAP32[$pred>>2] = $74;
   }
  }
  $75 = HEAP32[$pred>>2]|0;
  $76 = Math_imul($75, $dc_quant$07)|0;
  $77 = HEAP32[$predt>>2]|0;
  $78 = (($76) + ($77))|0;
  $storemerge = $78;
 } else {
  $79 = Math_imul($11, $5)|0;
  $tmp = (($79) + ($4))|0;
  $tmp11 = $tmp << 2;
  $80 = (($17) + ($tmp11<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $storemerge = $81;
 }
 HEAP32[$pred>>2] = $storemerge;
 $82 = $5 << 2;
 $83 = Math_imul($11, $82)|0;
 $84 = $4 << 2;
 $85 = (($83) + ($84))|0;
 $86 = (($17) + ($85<<2)|0);
 _od_coding_order_to_raster($86,$11,$pred,$1,$36);
 $87 = HEAP32[$20>>2]|0;
 $88 = ($87|0)!=(0);
 $89 = ($pli|0)==(0);
 $or$cond6 = $88 & $89;
 if (!($or$cond6)) {
  $92 = (80 + ($ln<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum2 = (($83) + ($84))|0;
  $94 = (($13) + ($$sum2<<2)|0);
  $95 = (($17) + ($$sum2<<2)|0);
  FUNCTION_TABLE_viiii[$93 & 15]($94,$11,$95,$11);
  STACKTOP = sp;return;
 }
 $$sum4 = (($83) + ($84))|0;
 $90 = (($19) + ($$sum4<<2)|0);
 $91 = (($17) + ($$sum4<<2)|0);
 _od_convert_block_down($90,$11,$91,$11,$ln,0,0);
 $92 = (80 + ($ln<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 $$sum2 = (($83) + ($84))|0;
 $94 = (($13) + ($$sum2<<2)|0);
 $95 = (($17) + ($$sum2<<2)|0);
 FUNCTION_TABLE_viiii[$93 & 15]($94,$11,$95,$11);
 STACKTOP = sp;return;
}
function _od_decode_compute_pred($dec,$ctx,$pred,$ln,$pli,$bx,$by,$has_ur) {
 $dec = $dec|0;
 $ctx = $ctx|0;
 $pred = $pred|0;
 $ln = $ln|0;
 $pli = $pli|0;
 $bx = $bx|0;
 $by = $by|0;
 $has_ur = $has_ur|0;
 var $$pn = 0, $$pn$in = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci$013 = 0, $ci$110 = 0;
 var $coeffs = 0, $exitcond = 0, $exitcond32 = 0, $exitcond34 = 0, $exitcond37 = 0, $mode_cdf = 0, $nsize$0 = 0, $or$cond = 0, $scevgep = 0, $scevgep36 = 0, $storemerge = 0, $storemerge$in = 0, $strides = 0, $tmp = 0, $tmp7 = 0, $x$29 = 0, $y$018 = 0, $y$126 = 0, $y$212 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $mode_cdf = sp + 32|0;
 $coeffs = sp + 16|0;
 $strides = sp;
 $0 = (($ln) + 2)|0;
 $1 = 1 << $0;
 $2 = $1 << $0;
 $3 = ((($dec) + ($pli<<4)|0) + 556|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($dec) + ($pli<<4)|0) + 557|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($dec) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >> $5;
 $12 = HEAP32[$ctx>>2]|0;
 $13 = (($ctx) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($pli<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($ctx) + ($pli<<2)|0) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($ctx) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($ctx) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($ctx) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = ($1|0)>(0);
  if (!($26)) {
   STACKTOP = sp;return;
  }
  $27 = $by << 2;
  $28 = $bx << 2;
  $ci$013 = 0;$y$212 = 0;
  while(1) {
   $161 = (($y$212) + ($27))|0;
   $162 = Math_imul($161, $11)|0;
   $163 = (($162) + ($28))|0;
   $ci$110 = $ci$013;$x$29 = 0;
   while(1) {
    $164 = (($163) + ($x$29))|0;
    $165 = (($20) + ($164<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (($ci$110) + 1)|0;
    $168 = (($pred) + ($ci$110<<2)|0);
    HEAP32[$168>>2] = $166;
    $169 = (($x$29) + 1)|0;
    $exitcond = ($169|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $ci$110 = $167;$x$29 = $169;
    }
   }
   $170 = (($1) + ($ci$013))|0;
   $171 = (($y$212) + 1)|0;
   $exitcond32 = ($171|0)==($1|0);
   if ($exitcond32) {
    break;
   } else {
    $ci$013 = $170;$y$212 = $171;
   }
  }
  STACKTOP = sp;return;
 }
 $29 = ($bx|0)>(0);
 $30 = ($by|0)>(0);
 $or$cond = $29 & $30;
 if ($or$cond) {
  $32 = ($pli|0)==(0);
  if (!($32)) {
   $85 = $by << $8;
   $86 = $10 >> 2;
   $87 = Math_imul($85, $86)|0;
   $88 = $bx << $5;
   $89 = (($87) + ($88))|0;
   $90 = (($12) + ($89)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91 << 24 >> 24;
   $93 = (($dec) + 692|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($dec) + 696|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (1320 + (($92*12)|0)|0);
   _od_chroma_pred($pred,$16,$22,$11,$bx,$by,$ln,$5,$8,$94,$96,$97);
   STACKTOP = sp;return;
  }
  $33 = 1 << $ln;
  $34 = (($by) - ($33))|0;
  $35 = $34 << 2;
  $36 = Math_imul($11, $35)|0;
  $37 = (($bx) - ($33))|0;
  $38 = $37 << 2;
  $$sum = (($36) + ($38))|0;
  $39 = (($18) + ($$sum<<2)|0);
  HEAP32[$coeffs>>2] = $39;
  $40 = $bx << 2;
  $$sum1 = (($36) + ($40))|0;
  $41 = (($18) + ($$sum1<<2)|0);
  $42 = (($coeffs) + 4|0);
  HEAP32[$42>>2] = $41;
  $43 = (($33) + ($bx))|0;
  $44 = $43 << 2;
  $$sum2 = (($36) + ($44))|0;
  $45 = (($18) + ($$sum2<<2)|0);
  $46 = (($coeffs) + 8|0);
  HEAP32[$46>>2] = $45;
  $47 = $by << 2;
  $48 = Math_imul($47, $11)|0;
  $$sum3 = (($48) + ($38))|0;
  $49 = (($18) + ($$sum3<<2)|0);
  $50 = (($coeffs) + 12|0);
  HEAP32[$50>>2] = $49;
  $51 = ($has_ur|0)==(0);
  if ($51) {
   $52 = HEAP32[$42>>2]|0;
   HEAP32[$46>>2] = $52;
  }
  HEAP32[$strides>>2] = $11;
  $53 = (($strides) + 4|0);
  HEAP32[$53>>2] = $11;
  $54 = (($strides) + 8|0);
  HEAP32[$54>>2] = $11;
  $55 = (($strides) + 12|0);
  HEAP32[$55>>2] = $11;
  $56 = $11 >> 2;
  $57 = Math_imul($56, $by)|0;
  $58 = (($bx) + -1)|0;
  $59 = (($58) + ($57))|0;
  $60 = (($12) + ($59)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61 << 24 >> 24;
  $63 = (($by) + -1)|0;
  $64 = Math_imul($56, $63)|0;
  $65 = (($64) + ($bx))|0;
  $66 = (($65) + -1)|0;
  $67 = (($12) + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68 << 24 >> 24;
  $70 = (($12) + ($65)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = ((($dec) + (($pli*80)|0)|0) + 6480|0);
  _od_intra_pred_cdf($mode_cdf,$73,10,$62,$69,$72);
  $74 = (1472 + ($ln<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  FUNCTION_TABLE_viiii[$75 & 15]($pred,$coeffs,$strides,0);
  $76 = (($pred) + 4|0);
  $77 = $2 << 2;
  $78 = (($77) + -4)|0;
  _memset(($76|0),0,($78|0))|0;
  $79 = ($33|0)>(0);
  if ($79) {
   $80 = Math_imul($56, $by)|0;
   $81 = (($80) + ($bx))|0;
   $y$018 = 0;
   while(1) {
    $82 = Math_imul($56, $y$018)|0;
    $83 = (($81) + ($82))|0;
    $scevgep = (($12) + ($83)|0);
    _memset(($scevgep|0),0,($33|0))|0;
    $84 = (($y$018) + 1)|0;
    $exitcond34 = ($84|0)==($33|0);
    if ($exitcond34) {
     break;
    } else {
     $y$018 = $84;
    }
   }
  }
  _od_intra_pred_update($73,10,0,$62,$69,$72);
  STACKTOP = sp;return;
 }
 $31 = ($2|0)>(0);
 if ($31) {
  $98 = $2 << 2;
  _memset(($pred|0),0,($98|0))|0;
 }
 if ($29) {
  $99 = $by << $8;
  $100 = $99 >> 1;
  $101 = (($dec) + 696|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = Math_imul($102, $100)|0;
  $104 = (($bx) + -1)|0;
  $105 = $104 << $5;
  $106 = $105 >> 1;
  $107 = (($103) + ($106))|0;
  $108 = (($dec) + 692|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + ($107)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = (($112) - ($5))|0;
  $114 = $113 >> 31;
  $115 = $114 ^ -1;
  $116 = $113 & $115;
  $117 = -1 << $116;
  $118 = $117 & $by;
  $119 = Math_imul($118, $11)|0;
  $120 = (($117) + ($bx))|0;
  $tmp = (($119) + ($120))|0;
  $$pn$in = $tmp;$nsize$0 = $116;
  label = 19;
 } else {
  if ($30) {
   $121 = (($by) + -1)|0;
   $122 = $121 << $8;
   $123 = $122 >> 1;
   $124 = (($dec) + 696|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = Math_imul($125, $123)|0;
   $127 = $bx << $5;
   $128 = $127 >> 1;
   $129 = (($126) + ($128))|0;
   $130 = (($dec) + 692|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) - ($5))|0;
   $136 = $135 >> 31;
   $137 = $136 ^ -1;
   $138 = $135 & $137;
   $139 = 1 << $138;
   $140 = (($by) - ($139))|0;
   $141 = Math_imul($140, $11)|0;
   $142 = (0 - ($139))|0;
   $143 = $142 & $bx;
   $tmp7 = (($141) + ($143))|0;
   $$pn$in = $tmp7;$nsize$0 = $138;
   label = 19;
  }
 }
 do {
  if ((label|0) == 19) {
   $$pn = $$pn$in << 2;
   $storemerge$in = (($16) + ($$pn<<2)|0);
   $storemerge = HEAP32[$storemerge$in>>2]|0;
   HEAP32[$pred>>2] = $storemerge;
   $144 = ($nsize$0|0)>($ln|0);
   if ($144) {
    $145 = (($nsize$0) - ($ln))|0;
    $146 = HEAP32[$pred>>2]|0;
    $147 = $146 >> $145;
    HEAP32[$pred>>2] = $147;
    break;
   }
   $148 = ($nsize$0|0)<($ln|0);
   if ($148) {
    $149 = (($ln) - ($nsize$0))|0;
    $150 = HEAP32[$pred>>2]|0;
    $151 = $150 << $149;
    HEAP32[$pred>>2] = $151;
   }
  }
 } while(0);
 $152 = ($pli|0)==(0);
 if (!($152)) {
  STACKTOP = sp;return;
 }
 $153 = 1 << $ln;
 $154 = ($153|0)>(0);
 if (!($154)) {
  STACKTOP = sp;return;
 }
 $155 = $11 >> 2;
 $156 = Math_imul($155, $by)|0;
 $157 = (($156) + ($bx))|0;
 $y$126 = 0;
 while(1) {
  $158 = Math_imul($155, $y$126)|0;
  $159 = (($157) + ($158))|0;
  $scevgep36 = (($12) + ($159)|0);
  _memset(($scevgep36|0),0,($153|0))|0;
  $160 = (($y$126) + 1)|0;
  $exitcond37 = ($160|0)==($153|0);
  if ($exitcond37) {
   break;
  } else {
   $y$126 = $160;
  }
 }
 STACKTOP = sp;return;
}
function _od_single_band_scalar_decode($dec,$ln,$pred,$predt,$q,$pli) {
 $dec = $dec|0;
 $ln = $ln|0;
 $pred = $pred|0;
 $predt = $predt|0;
 $q = $q|0;
 $pli = $pli|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adapt_curr = 0, $exitcond = 0, $zzi$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $adapt_curr = sp;
 $0 = (($dec) + 720|0);
 $1 = $ln << 1;
 $2 = (($1) + 4)|0;
 $3 = 1 << $2;
 $4 = (($dec) + 6768|0);
 $5 = ((($dec) + (($pli*388)|0)|0) + 4720|0);
 $6 = (((($dec) + (($pli*12)|0)|0) + ($ln<<2)|0) + 6432|0);
 $7 = (_generic_decode($4,$5,-1,$6,0)|0);
 $8 = (($pred) + 4|0);
 $9 = (($3) + -1)|0;
 _laplace_decode_vector($4,$8,$9,$7,$adapt_curr,$0);
 $10 = ($3|0)>(1);
 if ($10) {
  $zzi$01 = 1;
  while(1) {
   $11 = (($pred) + ($zzi$01<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = Math_imul($12, $q)|0;
   $14 = (($predt) + ($zzi$01<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + ($15))|0;
   HEAP32[$11>>2] = $16;
   $17 = (($zzi$01) + 1)|0;
   $exitcond = ($17|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $zzi$01 = $17;
   }
  }
 }
 $18 = HEAP32[$adapt_curr>>2]|0;
 $19 = ($18|0)>(0);
 if ($19) {
  $20 = $18 << 8;
  $21 = HEAP32[$0>>2]|0;
  $22 = (($20) - ($21))|0;
  $23 = $22 >> 4;
  $24 = (($23) + ($21))|0;
  HEAP32[$0>>2] = $24;
  $25 = (($adapt_curr) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($dec) + 724|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) - ($28))|0;
  $30 = $29 >> 4;
  $31 = (($30) + ($28))|0;
  HEAP32[$27>>2] = $31;
 }
 $32 = (($adapt_curr) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)>(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = (($dec) + 728|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($33) - ($36))|0;
 $38 = $37 >> 4;
 $39 = (($38) + ($36))|0;
 HEAP32[$35>>2] = $39;
 $40 = (($adapt_curr) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($dec) + 732|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) - ($43))|0;
 $45 = $44 >> 4;
 $46 = (($45) + ($43))|0;
 HEAP32[$42>>2] = $46;
 STACKTOP = sp;return;
}
function _od_32x32_decode($dec,$ctx,$ln,$pli,$bx,$by,$has_ur) {
 $dec = $dec|0;
 $ctx = $ctx|0;
 $ln = $ln|0;
 $pli = $pli|0;
 $bx = $bx|0;
 $by = $by|0;
 $has_ur = $has_ur|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bx << 1;
 $1 = $by << 1;
 $2 = (($ln) + -1)|0;
 _od_single_band_decode($dec,$ctx,$2,$pli,$0,$1,1);
 $3 = $0 | 1;
 _od_single_band_decode($dec,$ctx,$2,$pli,$3,$1,$has_ur);
 $4 = $1 | 1;
 _od_single_band_decode($dec,$ctx,$2,$pli,$0,$4,1);
 _od_single_band_decode($dec,$ctx,$2,$pli,$3,$4,0);
 STACKTOP = sp;return;
}
function _daala_decode_packet_in($dec,$img,$op) {
 $dec = $dec|0;
 $img = $img|0;
 $op = $op|0;
 var $$ = 0, $$0 = 0, $$75 = 0, $$in = 0, $$lobit = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctmp = 0, $dtmp = 0, $exitcond = 0, $exitcond60 = 0, $exitcond61 = 0, $exitcond62 = 0, $exitcond63 = 0;
 var $exitcond64 = 0, $exitcond65 = 0, $exitcond66 = 0, $exitcond67 = 0, $exitcond68 = 0, $exitcond69 = 0, $exitcond70 = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $lbuf = 0, $ltmp = 0, $mbctx = 0, $mctmp = 0, $mdtmp = 0, $or$cond = 0, $or$cond2 = 0, $or$cond74 = 0;
 var $pli$254 = 0, $pli$424 = 0, $pli$521 = 0, $plj$036 = 0, $refi$0 = 0, $sbx$049 = 0, $sbx$129 = 0, $sbx$210 = 0, $sby$052 = 0, $sby$133 = 0, $sby$212 = 0, $x$043 = 0, $x$115 = 0, $y$047 = 0, $y$118 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $mbctx = sp + 96|0;
 $ctmp = sp + 80|0;
 $dtmp = sp + 64|0;
 $mctmp = sp + 48|0;
 $mdtmp = sp + 32|0;
 $ltmp = sp + 16|0;
 $lbuf = sp;
 $0 = ($dec|0)==(0|0);
 $1 = ($img|0)==(0|0);
 $or$cond = $0 | $1;
 $2 = ($op|0)==(0|0);
 $or$cond2 = $or$cond | $2;
 if ($or$cond2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($dec) + 6824|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = -10;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($op) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  HEAP32[$3>>2] = 2147483647;
 }
 $9 = (($dec) + 6768|0);
 $10 = HEAP32[$op>>2]|0;
 $11 = (($op) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 _od_ec_dec_init($9,$10,$12);
 $13 = (_od_ec_decode_bool_q15($9,16384)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = -24;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (_od_ec_decode_bool_q15($9,16384)|0);
 $16 = (($mbctx) + 68|0);
 HEAP32[$16>>2] = $15;
 $17 = (($dec) + 156|0);
 $18 = (($dec) + 168|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(-1);
 if ($20) {
  $21 = (($dec) + 160|0);
  HEAP32[$21>>2] = $19;
  $22 = HEAP32[$17>>2]|0;
  $23 = ($22|0)<(0);
  if ($23) {
   $24 = HEAP32[$18>>2]|0;
   HEAP32[$17>>2] = $24;
  }
 }
 $25 = (($dec) + 164|0);
 $26 = HEAP32[$17>>2]|0;
 $27 = (($dec) + 160|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$25>>2]|0;
 $refi$0 = 0;
 while(1) {
  $30 = ($refi$0|0)==($26|0);
  if (!($30)) {
   $31 = ($refi$0|0)==($28|0);
   $32 = ($refi$0|0)==($29|0);
   $or$cond74 = $31 | $32;
   if (!($or$cond74)) {
    break;
   }
  }
  $33 = (($refi$0) + 1)|0;
  $refi$0 = $33;
 }
 HEAP32[$18>>2] = $refi$0;
 $34 = (($dec) + 684|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($dec) + 688|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($dec) + 720|0);
 $39 = HEAP32[$16>>2]|0;
 _od_adapt_ctx_reset($38,$39);
 _od_decode_block_sizes($dec);
 $40 = HEAP32[$16>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  _od_dec_mv_unpack($dec);
  _od_state_mc_predict($dec,1);
 }
 $42 = (($dec) + 72|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($dec) + 76|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($dec) + 36|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($dec) + 556|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = (($dec) + 557|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = (($50) + 2)|0;
 $55 = $43 >> $54;
 $56 = (($53) + 2)|0;
 $57 = $45 >> $56;
 $58 = Math_imul($57, $55)|0;
 $59 = (_calloc($58,1)|0);
 HEAP32[$mbctx>>2] = $59;
 $60 = HEAP32[$16>>2]|0;
 $61 = ($60|0)==(0);
 if ($61) {
  label = 17;
 } else {
  $62 = (($dec) + 480|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (($dec) + 481|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $43 >> $64;
  $69 = $45 >> $67;
  $70 = Math_imul($69, $68)|0;
  $71 = (_calloc($70,4)|0);
  $72 = (($mbctx) + 24|0);
  HEAP32[$72>>2] = $71;
  $$pr = HEAP32[$16>>2]|0;
  $73 = ($$pr|0)==(0);
  if ($73) {
   label = 17;
  } else {
   label = 19;
  }
 }
 if ((label|0) == 17) {
  $74 = ($47|0)>(0);
  if ($74) {
   $75 = ($37|0)>(0);
   $76 = ($35|0)>(0);
   $77 = (($dec) + 692|0);
   $78 = (($dec) + 696|0);
   $79 = (($37) + -1)|0;
   $pli$254 = 0;
   while(1) {
    $81 = ((($dec) + ($pli$254<<4)|0) + 480|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = ((($dec) + ($pli$254<<4)|0) + 481|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $43 >> $83;
    $88 = $45 >> $86;
    $89 = Math_imul($88, $87)|0;
    $90 = (_calloc($89,4)|0);
    $91 = (($mctmp) + ($pli$254<<2)|0);
    HEAP32[$91>>2] = $90;
    $92 = (_calloc($89,4)|0);
    $93 = (($mdtmp) + ($pli$254<<2)|0);
    HEAP32[$93>>2] = $92;
    $94 = ((($dec) + ($pli$254<<2)|0) + 6808|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0);
    $97 = $96 ? 0 : 4;
    $98 = ((($dec) + ($pli$254<<4)|0) + 476|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ((($dec) + ($pli$254<<4)|0) + 488|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($88|0)>(0);
    if ($102) {
     $103 = ($87|0)>(0);
     $y$047 = 0;
     while(1) {
      if ($103) {
       $104 = Math_imul($y$047, $101)|0;
       $105 = Math_imul($y$047, $87)|0;
       $106 = HEAP32[$91>>2]|0;
       $x$043 = 0;
       while(1) {
        $107 = (($x$043) + ($104))|0;
        $108 = (($99) + ($107)|0);
        $109 = HEAP8[$108>>0]|0;
        $110 = $109&255;
        $111 = (($110) + -128)|0;
        $112 = $111 << $97;
        $113 = (($x$043) + ($105))|0;
        $114 = (($106) + ($113<<2)|0);
        HEAP32[$114>>2] = $112;
        $115 = (($x$043) + 1)|0;
        $exitcond69 = ($115|0)==($87|0);
        if ($exitcond69) {
         break;
        } else {
         $x$043 = $115;
        }
       }
      }
      $116 = (($y$047) + 1)|0;
      $exitcond70 = ($116|0)==($88|0);
      if ($exitcond70) {
       break;
      } else {
       $y$047 = $116;
      }
     }
    }
    if ($75) {
     $sby$052 = 0;
     while(1) {
      if ($76) {
       $117 = HEAP32[$91>>2]|0;
       $118 = ($sby$052|0)<($79|0);
       $119 = $118 ? 2 : 0;
       $sbx$049 = 0;
       while(1) {
        $120 = HEAP32[$77>>2]|0;
        $121 = HEAP32[$78>>2]|0;
        $122 = ($sbx$049|0)>(0);
        $123 = $122&1;
        $124 = $123 | $119;
        _od_apply_prefilter($117,$87,$sbx$049,$sby$052,3,$120,$121,$83,$86,$124);
        $125 = (($sbx$049) + 1)|0;
        $exitcond71 = ($125|0)==($35|0);
        if ($exitcond71) {
         break;
        } else {
         $sbx$049 = $125;
        }
       }
      }
      $126 = (($sby$052) + 1)|0;
      $exitcond72 = ($126|0)==($37|0);
      if ($exitcond72) {
       break;
      } else {
       $sby$052 = $126;
      }
     }
    }
    $127 = (($pli$254) + 1)|0;
    $exitcond73 = ($127|0)==($47|0);
    if ($exitcond73) {
     label = 19;
     break;
    } else {
     $pli$254 = $127;
    }
   }
  }
 }
 if ((label|0) == 19) {
  $80 = ($47|0)>(0);
  if ($80) {
   $indvars$iv = 0;
   while(1) {
    $139 = ((($dec) + ($indvars$iv<<4)|0) + 556|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = ((($dec) + ($indvars$iv<<4)|0) + 557|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $145 = $43 >> $141;
    $146 = $45 >> $144;
    $147 = (_od_ec_dec_uint($9,8192)|0);
    $148 = ((($dec) + ($indvars$iv<<2)|0) + 6808|0);
    HEAP32[$148>>2] = $147;
    $149 = ($147|0)==(0);
    if ($149) {
     $153 = 0;
    } else {
     $150 = (_od_ec_decode_bool_q15($9,16384)|0);
     $151 = ($150|0)!=(0);
     $153 = $151;
    }
    $152 = $153&1;
    $154 = ((($mbctx) + ($indvars$iv<<2)|0) + 52|0);
    HEAP32[$154>>2] = $152;
    $155 = Math_imul($146, $145)|0;
    $156 = (_calloc($155,4)|0);
    $157 = (($ctmp) + ($indvars$iv<<2)|0);
    HEAP32[$157>>2] = $156;
    $158 = (_calloc($155,4)|0);
    $159 = (($dtmp) + ($indvars$iv<<2)|0);
    HEAP32[$159>>2] = $158;
    $160 = ($indvars$iv|0)>(0);
    do {
     if ($160) {
      $161 = $143 | $140;
      $162 = ($161<<24>>24)==(0);
      if ($162) {
       $178 = (($ltmp) + ($indvars$iv<<2)|0);
       HEAP32[$178>>2] = 0;
       $179 = HEAP32[$157>>2]|0;
       $180 = (($lbuf) + ($indvars$iv<<2)|0);
       HEAP32[$180>>2] = $179;
       break;
      }
      $163 = ($indvars$iv|0)>(1);
      if ($163) {
       $164 = (($ltmp) + ($indvars$iv<<2)|0);
       $165 = (($lbuf) + ($indvars$iv<<2)|0);
       $plj$036 = 1;
       while(1) {
        $166 = ((($dec) + ($plj$036<<4)|0) + 556|0);
        $167 = HEAP8[$166>>0]|0;
        $168 = ($140<<24>>24)==($167<<24>>24);
        if ($168) {
         $169 = ((($dec) + ($plj$036<<4)|0) + 557|0);
         $170 = HEAP8[$169>>0]|0;
         $171 = ($143<<24>>24)==($170<<24>>24);
         if ($171) {
          HEAP32[$164>>2] = 0;
          $172 = (($ltmp) + ($plj$036<<2)|0);
          $173 = HEAP32[$172>>2]|0;
          HEAP32[$165>>2] = $173;
         }
        }
        $174 = (($plj$036) + 1)|0;
        $exitcond67 = ($174|0)==($indvars$iv|0);
        if ($exitcond67) {
         break;
        } else {
         $plj$036 = $174;
        }
       }
      }
      $175 = (_calloc($155,4)|0);
      $176 = (($ltmp) + ($indvars$iv<<2)|0);
      HEAP32[$176>>2] = $175;
      $177 = (($lbuf) + ($indvars$iv<<2)|0);
      HEAP32[$177>>2] = $175;
     } else {
      $181 = (($ltmp) + ($indvars$iv<<2)|0);
      HEAP32[$181>>2] = 0;
      $182 = (($lbuf) + ($indvars$iv<<2)|0);
      HEAP32[$182>>2] = 0;
     }
    } while(0);
    $indvars$iv$next = (($indvars$iv) + 1)|0;
    $exitcond68 = ($indvars$iv$next|0)==($47|0);
    if ($exitcond68) {
     break;
    } else {
     $indvars$iv = $indvars$iv$next;
    }
   }
  }
 }
 $128 = ($37|0)>(0);
 if ($128) {
  $129 = ($35|0)>(0);
  $130 = ($47|0)>(0);
  $131 = (($mbctx) + 16|0);
  $132 = (($mbctx) + 20|0);
  $133 = (($mbctx) + 44|0);
  $134 = (($mbctx) + 40|0);
  $135 = (($mbctx) + 48|0);
  $136 = (($mbctx) + 72|0);
  $137 = (($35) + -1)|0;
  $138 = (($35) + -1)|0;
  $sby$133 = 0;
  while(1) {
   if ($129) {
    $183 = ($sby$133|0)>(0);
    $184 = ($sby$133|0)>(0);
    $sbx$129 = 0;
    while(1) {
     if ($130) {
      $191 = ($sbx$129|0)<($137|0);
      $192 = ($sbx$129|0)<($138|0);
      $pli$424 = 0;
      while(1) {
       $193 = (($ctmp) + ($pli$424<<2)|0);
       $194 = HEAP32[$193>>2]|0;
       HEAP32[$131>>2] = $194;
       HEAP32[$132>>2] = $dtmp;
       $195 = (($mctmp) + ($pli$424<<2)|0);
       $196 = HEAP32[$195>>2]|0;
       HEAP32[$133>>2] = $196;
       $197 = (($mdtmp) + ($pli$424<<2)|0);
       $198 = HEAP32[$197>>2]|0;
       HEAP32[$134>>2] = $198;
       $199 = (($lbuf) + ($pli$424<<2)|0);
       $200 = HEAP32[$199>>2]|0;
       HEAP32[$135>>2] = $200;
       $201 = ((($dec) + ($pli$424<<4)|0) + 556|0);
       $202 = HEAP8[$201>>0]|0;
       $203 = $202&255;
       $204 = ((($dec) + ($pli$424<<4)|0) + 557|0);
       $205 = HEAP8[$204>>0]|0;
       $206 = $205&255;
       ;HEAP32[$136+0>>2]=0|0;HEAP32[$136+4>>2]=0|0;HEAP32[$136+8>>2]=0|0;HEAP32[$136+12>>2]=0|0;HEAP32[$136+16>>2]=0|0;HEAP32[$136+20>>2]=0|0;
       $207 = HEAP32[$16>>2]|0;
       $208 = ($207|0)==(0);
       if (!($208)) {
        $$ = $184 & $192;
        $209 = $$&1;
        _od_decode_haar_dc($dec,$mbctx,$pli$424,$sbx$129,$sby$133,3,$203,0,0,$209);
       }
       $$75 = $183 & $191;
       $210 = $$75&1;
       _od_decode_block($dec,$mbctx,$pli$424,$sbx$129,$sby$133,3,$203,$206,$210);
       $211 = (($pli$424) + 1)|0;
       $exitcond64 = ($211|0)==($47|0);
       if ($exitcond64) {
        break;
       } else {
        $pli$424 = $211;
       }
      }
     }
     $212 = (($sbx$129) + 1)|0;
     $exitcond65 = ($212|0)==($35|0);
     if ($exitcond65) {
      break;
     } else {
      $sbx$129 = $212;
     }
    }
   }
   $213 = (($sby$133) + 1)|0;
   $exitcond66 = ($213|0)==($37|0);
   if ($exitcond66) {
    break;
   } else {
    $sby$133 = $213;
   }
  }
 }
 $185 = ($47|0)>(0);
 if ($185) {
  $186 = ($37|0)>(0);
  $187 = ($35|0)>(0);
  $188 = (($dec) + 692|0);
  $189 = (($dec) + 696|0);
  $190 = (($35) + -1)|0;
  $pli$521 = 0;
  while(1) {
   $215 = ((($dec) + ($pli$521<<4)|0) + 556|0);
   $216 = HEAP8[$215>>0]|0;
   $217 = $216&255;
   $218 = ((($dec) + ($pli$521<<4)|0) + 557|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $221 = $43 >> $217;
   $222 = $45 >> $220;
   if ($186) {
    $223 = (($ctmp) + ($pli$521<<2)|0);
    $sby$212 = 0;
    while(1) {
     if ($187) {
      $224 = HEAP32[$223>>2]|0;
      $225 = ($sby$212|0)>(0);
      $226 = $225 ? 8 : 0;
      $sbx$210 = 0;
      while(1) {
       $227 = HEAP32[$188>>2]|0;
       $228 = HEAP32[$189>>2]|0;
       $229 = ($sbx$210|0)<($190|0);
       $230 = $229 ? 4 : 0;
       $231 = $230 | $226;
       _od_apply_postfilter($224,$221,$sbx$210,$sby$212,3,$227,$228,$217,$220,$231);
       $232 = (($sbx$210) + 1)|0;
       $exitcond = ($232|0)==($35|0);
       if ($exitcond) {
        break;
       } else {
        $sbx$210 = $232;
       }
      }
     }
     $233 = (($sby$212) + 1)|0;
     $exitcond60 = ($233|0)==($37|0);
     if ($exitcond60) {
      break;
     } else {
      $sby$212 = $233;
     }
    }
   }
   $234 = ((($dec) + ($pli$521<<4)|0) + 476|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ((($dec) + ($pli$521<<4)|0) + 488|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($222|0)>(0);
   if ($238) {
    $239 = ($221|0)>(0);
    $240 = ((($dec) + ($pli$521<<2)|0) + 6808|0);
    $241 = (($ctmp) + ($pli$521<<2)|0);
    $y$118 = 0;
    while(1) {
     if ($239) {
      $242 = Math_imul($y$118, $221)|0;
      $243 = HEAP32[$241>>2]|0;
      $244 = Math_imul($y$118, $237)|0;
      $x$115 = 0;
      while(1) {
       $245 = HEAP32[$240>>2]|0;
       $246 = ($245|0)==(0);
       $247 = $246 ? 0 : 4;
       $248 = (($x$115) + ($242))|0;
       $249 = (($243) + ($248<<2)|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = 1 << $247;
       $252 = $251 >> 1;
       $253 = (($252) + ($250))|0;
       $254 = $253 >> $247;
       $255 = (($254) + 128)|0;
       $$lobit = $255 >>> 31;
       $256 = (($$lobit) + 255)|0;
       $257 = ($255|0)>(255);
       $258 = $257 ? 255 : $255;
       $259 = $256 & $258;
       $260 = $259&255;
       $261 = (($x$115) + ($244))|0;
       $262 = (($235) + ($261)|0);
       HEAP8[$262>>0] = $260;
       $263 = (($x$115) + 1)|0;
       $exitcond61 = ($263|0)==($221|0);
       if ($exitcond61) {
        break;
       } else {
        $x$115 = $263;
       }
      }
     }
     $264 = (($y$118) + 1)|0;
     $exitcond62 = ($264|0)==($222|0);
     if ($exitcond62) {
      break;
     } else {
      $y$118 = $264;
     }
    }
   }
   $265 = (($pli$521) + 1)|0;
   $exitcond63 = ($265|0)==($47|0);
   if ($exitcond63) {
    break;
   } else {
    $pli$521 = $265;
   }
  }
  $214 = ($47|0)>(0);
  if ($214) {
   $$in = $47;
   while(1) {
    $266 = (($$in) + -1)|0;
    $267 = (($ltmp) + ($266<<2)|0);
    $268 = HEAP32[$267>>2]|0;
    _free($268);
    $269 = (($dtmp) + ($266<<2)|0);
    $270 = HEAP32[$269>>2]|0;
    _free($270);
    $271 = (($ctmp) + ($266<<2)|0);
    $272 = HEAP32[$271>>2]|0;
    _free($272);
    $273 = HEAP32[$16>>2]|0;
    $274 = ($273|0)==(0);
    if ($274) {
     $275 = (($mdtmp) + ($266<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     _free($276);
     $277 = (($mctmp) + ($266<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     _free($278);
    }
    $279 = ($266|0)>(0);
    if ($279) {
     $$in = $266;
    } else {
     break;
    }
   }
  }
 }
 $280 = HEAP32[$mbctx>>2]|0;
 _free($280);
 $281 = HEAP32[$16>>2]|0;
 $282 = ($281|0)==(0);
 if (!($282)) {
  $283 = (($mbctx) + 24|0);
  $284 = HEAP32[$283>>2]|0;
  _free($284);
 }
 $285 = HEAP32[$18>>2]|0;
 $286 = ((($dec) + (($285*76)|0)|0) + 172|0);
 $287 = (($dec) + 476|0);
 _od_state_upsample8($dec,$286,$287);
 dest=$img+0|0; src=$287+0|0; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $288 = (($dec) + 4|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (($img) + 68|0);
 HEAP32[$290>>2] = $289;
 $291 = (($dec) + 8|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = (($img) + 72|0);
 HEAP32[$293>>2] = $292;
 $294 = (($dec) + 664|0);
 $295 = $294;
 $296 = $295;
 $297 = HEAP32[$296>>2]|0;
 $298 = (($295) + 4)|0;
 $299 = $298;
 $300 = HEAP32[$299>>2]|0;
 $301 = (_i64Add(($297|0),($300|0),1,0)|0);
 $302 = tempRet0;
 $303 = $294;
 $304 = $303;
 HEAP32[$304>>2] = $301;
 $305 = (($303) + 4)|0;
 $306 = $305;
 HEAP32[$306>>2] = $302;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _od_decode_block_sizes($dec) {
 $dec = $dec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$03 = 0, $j$02 = 0;
 var $tmp = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _od_state_init_border($dec);
 $0 = (($dec) + 684|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($dec) + 688|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ($1|0)>(0);
 $6 = (($dec) + 6768|0);
 $7 = (($dec) + 720|0);
 $8 = (($dec) + 696|0);
 $9 = (($dec) + 692|0);
 $i$03 = 0;
 while(1) {
  if ($5) {
   $j$02 = 0;
   while(1) {
    $10 = HEAP32[$8>>2]|0;
    $11 = Math_imul($10, $i$03)|0;
    $tmp = (($11) + ($j$02))|0;
    $tmp1 = $tmp << 2;
    $12 = HEAP32[$9>>2]|0;
    $13 = (($12) + ($tmp1)|0);
    _od_block_size_decode($6,$7,$13,$10);
    $14 = (($j$02) + 1)|0;
    $exitcond = ($14|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $j$02 = $14;
    }
   }
  }
  $15 = (($i$03) + 1)|0;
  $exitcond6 = ($15|0)==($3|0);
  if ($exitcond6) {
   break;
  } else {
   $i$03 = $15;
  }
 }
 STACKTOP = sp;return;
}
function _od_dec_mv_unpack($dec) {
 $dec = $dec|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $vx$026 = 0, $vx$120 = 0, $vx$211 = 0, $vx$36 = 0, $vx$41 = 0, $vy$029 = 0, $vy$124 = 0, $vy$217 = 0, $vy$310 = 0, $vy$42 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _od_state_mvs_clear($dec);
 $0 = (($dec) + 676|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 2;
 $3 = (($2) + 4)|0;
 $4 = (($dec) + 680|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 2;
 $7 = (($6) + 4)|0;
 $8 = (($dec) + 6768|0);
 $9 = (_od_ec_dec_uint($8,3)|0);
 $10 = (($dec) + 716|0);
 HEAP32[$10>>2] = $9;
 $11 = (($dec) + 544|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 32)|0;
 $14 = (3 - ($9))|0;
 $15 = $13 << $14;
 $16 = (($dec) + 548|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 32)|0;
 $19 = $18 << $14;
 $20 = (($dec) + 672|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($7|0)<(0);
 if (!($22)) {
  $23 = ($3|0)<(0);
  $vy$029 = 0;
  while(1) {
   if (!($23)) {
    $24 = (($21) + ($vy$029<<2)|0);
    $vx$026 = 0;
    while(1) {
     $27 = HEAP32[$24>>2]|0;
     $28 = (($27) + (($vx$026*12)|0)|0);
     $29 = ((($27) + (($vx$026*12)|0)|0) + 8|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30 | 1;
     HEAP8[$29>>0] = $31;
     _od_decode_mv($dec,$28,$vx$026,$vy$029,0,$9,$15,$19);
     $32 = (($vx$026) + 4)|0;
     $33 = ($32|0)>($3|0);
     if ($33) {
      break;
     } else {
      $vx$026 = $32;
     }
    }
   }
   $34 = (($vy$029) + 4)|0;
   $35 = ($34|0)>($7|0);
   if ($35) {
    break;
   } else {
    $vy$029 = $34;
   }
  }
  $25 = ($7|0)<(2);
  if (!($25)) {
   $26 = ($3|0)<(2);
   $vy$124 = 2;
   while(1) {
    if (!($26)) {
     $36 = (($21) + ($vy$124<<2)|0);
     $vx$120 = 2;
     while(1) {
      $38 = (_od_mv_level1_prob($21,$vx$120,$vy$124)|0);
      $39 = HEAP32[$36>>2]|0;
      $40 = (_od_ec_decode_bool_q15($8,$38)|0);
      $41 = ((($39) + (($vx$120*12)|0)|0) + 8|0);
      $42 = $40&255;
      $43 = HEAP8[$41>>0]|0;
      $44 = $42 & 1;
      $45 = $43 & -2;
      $46 = $45 | $44;
      HEAP8[$41>>0] = $46;
      $47 = ($44<<24>>24)==(0);
      if (!($47)) {
       $48 = (($39) + (($vx$120*12)|0)|0);
       _od_decode_mv($dec,$48,$vx$120,$vy$124,1,$9,$15,$19);
      }
      $49 = (($vx$120) + 4)|0;
      $50 = ($49|0)>($3|0);
      if ($50) {
       break;
      } else {
       $vx$120 = $49;
      }
     }
    }
    $51 = (($vy$124) + 4)|0;
    $52 = ($51|0)>($7|0);
    if ($52) {
     break;
    } else {
     $vy$124 = $51;
    }
   }
  }
  $37 = ($7|0)<(0);
  if (!($37)) {
   $vy$217 = 0;
   while(1) {
    $$lobit = $vy$217 & 2;
    $55 = $$lobit ^ 2;
    $56 = ($55|0)>($3|0);
    if (!($56)) {
     $57 = (($21) + ($vy$217<<2)|0);
     $58 = (($vy$217) + -2)|0;
     $59 = ($58|0)<(0);
     $60 = (($vy$217) + 2)|0;
     $61 = ($60|0)>($7|0);
     $62 = (($21) + ($60<<2)|0);
     $63 = (($21) + ($58<<2)|0);
     $vx$211 = $55;
     while(1) {
      $64 = HEAP32[$57>>2]|0;
      $65 = (($64) + (($vx$211*12)|0)|0);
      if ($59) {
       label = 22;
      } else {
       $66 = HEAP32[$63>>2]|0;
       $67 = ((($66) + (($vx$211*12)|0)|0) + 8|0);
       $68 = HEAP8[$67>>0]|0;
       $69 = $68 & 1;
       $70 = ($69<<24>>24)==(0);
       if (!($70)) {
        label = 22;
       }
      }
      do {
       if ((label|0) == 22) {
        label = 0;
        $71 = (($vx$211) + -2)|0;
        $72 = ($71|0)<(0);
        if (!($72)) {
         $73 = HEAP32[$57>>2]|0;
         $74 = ((($73) + (($71*12)|0)|0) + 8|0);
         $75 = HEAP8[$74>>0]|0;
         $76 = $75 & 1;
         $77 = ($76<<24>>24)==(0);
         if ($77) {
          break;
         }
        }
        if (!($61)) {
         $78 = HEAP32[$62>>2]|0;
         $79 = ((($78) + (($vx$211*12)|0)|0) + 8|0);
         $80 = HEAP8[$79>>0]|0;
         $81 = $80 & 1;
         $82 = ($81<<24>>24)==(0);
         if ($82) {
          break;
         }
        }
        $83 = (($vx$211) + 2)|0;
        $84 = ($83|0)>($3|0);
        if (!($84)) {
         $85 = HEAP32[$57>>2]|0;
         $86 = ((($85) + (($83*12)|0)|0) + 8|0);
         $87 = HEAP8[$86>>0]|0;
         $88 = $87 & 1;
         $89 = ($88<<24>>24)==(0);
         if ($89) {
          break;
         }
        }
        $90 = (_od_ec_decode_bool_q15($8,13684)|0);
        $91 = ((($64) + (($vx$211*12)|0)|0) + 8|0);
        $92 = $90&255;
        $93 = HEAP8[$91>>0]|0;
        $94 = $92 & 1;
        $95 = $93 & -2;
        $96 = $95 | $94;
        HEAP8[$91>>0] = $96;
        $97 = ($94<<24>>24)==(0);
        if (!($97)) {
         _od_decode_mv($dec,$65,$vx$211,$vy$217,2,$9,$15,$19);
        }
       }
      } while(0);
      $98 = (($vx$211) + 4)|0;
      $99 = ($98|0)>($3|0);
      if ($99) {
       break;
      } else {
       $vx$211 = $98;
      }
     }
    }
    $100 = (($vy$217) + 2)|0;
    $101 = ($100|0)>($7|0);
    if ($101) {
     break;
    } else {
     $vy$217 = $100;
    }
   }
   $53 = ($7|0)<(1);
   if (!($53)) {
    $54 = ($3|0)<(1);
    $vy$310 = 1;
    while(1) {
     if (!($54)) {
      $102 = (($21) + ($vy$310<<2)|0);
      $103 = (($vy$310) + -1)|0;
      $104 = (($21) + ($103<<2)|0);
      $105 = (($vy$310) + 1)|0;
      $106 = (($21) + ($105<<2)|0);
      $vx$36 = 1;
      while(1) {
       $112 = HEAP32[$102>>2]|0;
       $113 = (($112) + (($vx$36*12)|0)|0);
       $114 = (($vx$36) + -1)|0;
       $115 = HEAP32[$104>>2]|0;
       $116 = ((($115) + (($114*12)|0)|0) + 8|0);
       $117 = HEAP8[$116>>0]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if (!($119)) {
        $120 = (($vx$36) + 1)|0;
        $121 = ((($115) + (($120*12)|0)|0) + 8|0);
        $122 = HEAP8[$121>>0]|0;
        $123 = $122 & 1;
        $124 = ($123<<24>>24)==(0);
        if (!($124)) {
         $125 = HEAP32[$106>>2]|0;
         $126 = ((($125) + (($120*12)|0)|0) + 8|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = $127 & 1;
         $129 = ($128<<24>>24)==(0);
         if (!($129)) {
          $130 = ((($125) + (($114*12)|0)|0) + 8|0);
          $131 = HEAP8[$130>>0]|0;
          $132 = $131 & 1;
          $133 = ($132<<24>>24)==(0);
          if (!($133)) {
           $134 = (_od_ec_decode_bool_q15($8,16384)|0);
           $135 = ((($112) + (($vx$36*12)|0)|0) + 8|0);
           $136 = $134&255;
           $137 = HEAP8[$135>>0]|0;
           $138 = $136 & 1;
           $139 = $137 & -2;
           $140 = $139 | $138;
           HEAP8[$135>>0] = $140;
           $141 = ($138<<24>>24)==(0);
           if (!($141)) {
            _od_decode_mv($dec,$113,$vx$36,$vy$310,3,$9,$15,$19);
           }
          }
         }
        }
       }
       $142 = (($vx$36) + 2)|0;
       $143 = ($142|0)>($3|0);
       if ($143) {
        break;
       } else {
        $vx$36 = $142;
       }
      }
     }
     $144 = (($vy$310) + 2)|0;
     $145 = ($144|0)>($7|0);
     if ($145) {
      break;
     } else {
      $vy$310 = $144;
     }
    }
   }
  }
 }
 $107 = $6 | 2;
 $108 = ($107|0)<(2);
 if ($108) {
  STACKTOP = sp;return;
 }
 $109 = $2 | 2;
 $110 = $5 << 2;
 $111 = $110 | 3;
 $vy$42 = 2;
 while(1) {
  $146 = $vy$42 & 1;
  $147 = $146 ^ 3;
  $148 = ($147|0)>($109|0);
  if (!($148)) {
   $149 = (($21) + ($vy$42<<2)|0);
   $150 = (($vy$42) + -1)|0;
   $151 = (($21) + ($150<<2)|0);
   $152 = (($vy$42) + 1)|0;
   $153 = (($21) + ($152<<2)|0);
   $vx$41 = $147;
   while(1) {
    $154 = HEAP32[$149>>2]|0;
    $155 = (($154) + (($vx$41*12)|0)|0);
    $156 = HEAP32[$151>>2]|0;
    $157 = ((($156) + (($vx$41*12)|0)|0) + 8|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158 & 1;
    $160 = ($159<<24>>24)==(0);
    if (!($160)) {
     $161 = (($vx$41) + -1)|0;
     $162 = ((($154) + (($161*12)|0)|0) + 8|0);
     $163 = HEAP8[$162>>0]|0;
     $164 = $163 & 1;
     $165 = ($164<<24>>24)==(0);
     if (!($165)) {
      $166 = HEAP32[$153>>2]|0;
      $167 = ((($166) + (($vx$41*12)|0)|0) + 8|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = $168 & 1;
      $170 = ($169<<24>>24)==(0);
      if (!($170)) {
       $171 = (($vx$41) + 1)|0;
       $172 = ((($154) + (($171*12)|0)|0) + 8|0);
       $173 = HEAP8[$172>>0]|0;
       $174 = $173 & 1;
       $175 = ($174<<24>>24)==(0);
       if (!($175)) {
        $176 = (_od_ec_decode_bool_q15($8,16384)|0);
        $177 = ((($154) + (($vx$41*12)|0)|0) + 8|0);
        $178 = $176&255;
        $179 = HEAP8[$177>>0]|0;
        $180 = $178 & 1;
        $181 = $179 & -2;
        $182 = $181 | $180;
        HEAP8[$177>>0] = $182;
        $183 = ($180<<24>>24)==(0);
        if (!($183)) {
         _od_decode_mv($dec,$155,$vx$41,$vy$42,4,$9,$15,$19);
        }
       }
      }
     }
    }
    $184 = (($vx$41) + 2)|0;
    $185 = ($184|0)>($109|0);
    if ($185) {
     break;
    } else {
     $vx$41 = $184;
    }
   }
  }
  $186 = (($vy$42) + 1)|0;
  $exitcond = ($186|0)==($111|0);
  if ($exitcond) {
   break;
  } else {
   $vy$42 = $186;
  }
 }
 STACKTOP = sp;return;
}
function _od_decode_haar_dc($dec,$ctx,$pli,$bx,$by,$l,$xdec,$hgrad,$vgrad,$has_ur) {
 $dec = $dec|0;
 $ctx = $ctx|0;
 $pli = $pli|0;
 $bx = $bx|0;
 $by = $by|0;
 $l = $l|0;
 $xdec = $xdec|0;
 $hgrad = $hgrad|0;
 $vgrad = $vgrad|0;
 $has_ur = $has_ur|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$2$1 = 0, $$2$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dc_quant$0 = 0, $or$cond = 0, $quant$0 = 0, $quant2$0 = 0, $quant2$0$1 = 0, $quant2$0$2 = 0, $sb_dc_pred$0 = 0, $x = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = (($ctx) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($pli<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($dec) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> $xdec;
 $7 = $by << $l;
 $8 = $7 >> 1;
 $9 = (($dec) + 696|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($10, $8)|0;
 $12 = $bx << $l;
 $13 = $12 >> 1;
 $14 = (($11) + ($13))|0;
 $15 = (($dec) + 692|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($14)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 ^ $xdec;
 $21 = ($19|0)<($xdec|0);
 $22 = $21 ? $20 : 0;
 $23 = $22 ^ $19;
 $24 = ((($dec) + ($pli<<2)|0) + 6808|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $dc_quant$0 = 1;
 } else {
  $27 = (154984 + ($pli<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($28, $25)|0;
  $30 = $29 >> 4;
  $31 = ($30|0)>(1);
  $32 = $31 ? $30 : 1;
  $dc_quant$0 = $32;
 }
 $33 = ($l|0)==(3);
 if ($33) {
  $34 = (($dec) + 684|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($dec) + ($pli<<2)|0) + 700|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($l) - ($xdec))|0;
  $39 = (($38) + 2)|0;
  $40 = ($by|0)>(0);
  $41 = ($bx|0)>(0);
  $or$cond = $40 & $41;
  do {
   if ($or$cond) {
    $42 = ($has_ur|0)==(0);
    $43 = Math_imul($35, $by)|0;
    $44 = (($bx) + -1)|0;
    $45 = (($44) + ($43))|0;
    $46 = (($37) + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    if ($42) {
     $68 = ($47*23)|0;
     $69 = (($by) + -1)|0;
     $70 = Math_imul($35, $69)|0;
     $71 = (($70) + ($bx))|0;
     $72 = (($71) + -1)|0;
     $73 = (($37) + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = Math_imul($74, -10)|0;
     $76 = (($37) + ($71<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77*19)|0;
     $79 = (($68) + 16)|0;
     $80 = (($79) + ($75))|0;
     $81 = (($80) + ($78))|0;
     $82 = $81 >> 5;
     $sb_dc_pred$0 = $82;
     break;
    } else {
     $48 = ($47*22)|0;
     $49 = (($by) + -1)|0;
     $50 = Math_imul($35, $49)|0;
     $51 = (($50) + ($bx))|0;
     $52 = (($51) + -1)|0;
     $53 = (($37) + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = Math_imul($54, -9)|0;
     $56 = (($37) + ($51<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57*15)|0;
     $59 = (($51) + 1)|0;
     $60 = (($37) + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $61 << 2;
     $63 = (($48) + 16)|0;
     $64 = (($63) + ($55))|0;
     $65 = (($64) + ($58))|0;
     $66 = (($65) + ($62))|0;
     $67 = $66 >> 5;
     $sb_dc_pred$0 = $67;
     break;
    }
   } else {
    if ($40) {
     $83 = (($by) + -1)|0;
     $84 = Math_imul($35, $83)|0;
     $85 = (($84) + ($bx))|0;
     $86 = (($37) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $sb_dc_pred$0 = $87;
     break;
    }
    if ($41) {
     $88 = Math_imul($35, $by)|0;
     $89 = (($bx) + -1)|0;
     $90 = (($89) + ($88))|0;
     $91 = (($37) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $sb_dc_pred$0 = $92;
    } else {
     $sb_dc_pred$0 = 0;
    }
   }
  } while(0);
  $93 = (($dec) + 6768|0);
  $94 = ((($dec) + (($pli*388)|0)|0) + 3168|0);
  $95 = ((($dec) + ($pli<<2)|0) + 6272|0);
  $96 = (_generic_decode($93,$94,-1,$95,2)|0);
  $97 = ($96|0)==(0);
  if ($97) {
   $quant$0 = 0;
  } else {
   $98 = (_od_ec_dec_bits($93,1)|0);
   $99 = ($98|0)==(0);
   $100 = (0 - ($96))|0;
   $$ = $99 ? $96 : $100;
   $quant$0 = $$;
  }
  $101 = Math_imul($quant$0, $dc_quant$0)|0;
  $102 = (($101) + ($sb_dc_pred$0))|0;
  $103 = $by << $39;
  $104 = Math_imul($6, $103)|0;
  $105 = $bx << $39;
  $106 = (($104) + ($105))|0;
  $107 = (($3) + ($106<<2)|0);
  HEAP32[$107>>2] = $102;
  $108 = Math_imul($35, $by)|0;
  $109 = (($108) + ($bx))|0;
  $110 = (($37) + ($109<<2)|0);
  HEAP32[$110>>2] = $102;
  if ($40) {
   $111 = (($by) + -1)|0;
   $112 = Math_imul($35, $111)|0;
   $113 = (($112) + ($bx))|0;
   $114 = (($37) + ($113<<2)|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) - ($102))|0;
   $$01 = $116;
  } else {
   $$01 = $vgrad;
  }
  if ($41) {
   $117 = (($109) + -1)|0;
   $118 = (($37) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) - ($102))|0;
   $$0 = $120;$$1 = $$01;
  } else {
   $$0 = $hgrad;$$1 = $$01;
  }
 } else {
  $$0 = $hgrad;$$1 = $vgrad;
 }
 $121 = ($23|0)<($l|0);
 if (!($121)) {
  STACKTOP = sp;return;
 }
 $122 = (($l) + -1)|0;
 $123 = $bx << 1;
 $124 = $by << 1;
 $125 = (($122) - ($xdec))|0;
 $126 = (($125) + 2)|0;
 $127 = $124 << $126;
 $128 = Math_imul($6, $127)|0;
 $129 = $123 << $126;
 $130 = (($128) + ($129))|0;
 $131 = (($3) + ($130<<2)|0);
 $132 = HEAP32[$131>>2]|0;
 HEAP32[$x>>2] = $132;
 $133 = $123 | 1;
 $134 = $133 << $126;
 $135 = (($128) + ($134))|0;
 $136 = (($3) + ($135<<2)|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (($x) + 4|0);
 HEAP32[$138>>2] = $137;
 $139 = $124 | 1;
 $140 = $139 << $126;
 $141 = Math_imul($6, $140)|0;
 $142 = (($141) + ($129))|0;
 $143 = (($3) + ($142<<2)|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($x) + 8|0);
 HEAP32[$145>>2] = $144;
 $146 = (($141) + ($134))|0;
 $147 = (($3) + ($146<<2)|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($x) + 12|0);
 HEAP32[$149>>2] = $148;
 $150 = (($dec) + 6768|0);
 $151 = ((($dec) + (($pli*388)|0)|0) + 3168|0);
 $152 = (((($dec) + (($pli*36)|0)|0) + (($122*12)|0)|0) + 6288|0);
 $153 = (_generic_decode($150,$151,-1,$152,2)|0);
 $154 = ($153|0)==(0);
 if ($154) {
  $quant2$0 = 0;
 } else {
  $155 = (_od_ec_dec_bits($150,1)|0);
  $156 = ($155|0)==(0);
  $157 = (0 - ($153))|0;
  $$2 = $156 ? $153 : $157;
  $quant2$0 = $$2;
 }
 $158 = Math_imul($quant2$0, $dc_quant$0)|0;
 $159 = (($x) + 4|0);
 HEAP32[$159>>2] = $158;
 $160 = (((($dec) + (($pli*36)|0)|0) + (($122*12)|0)|0) + 6292|0);
 $161 = (_generic_decode($150,$151,-1,$160,2)|0);
 $162 = ($161|0)==(0);
 if ($162) {
  $quant2$0$1 = 0;
 } else {
  $163 = (_od_ec_dec_bits($150,1)|0);
  $164 = ($163|0)==(0);
  $165 = (0 - ($161))|0;
  $$2$1 = $164 ? $161 : $165;
  $quant2$0$1 = $$2$1;
 }
 $166 = Math_imul($quant2$0$1, $dc_quant$0)|0;
 $167 = (($x) + 8|0);
 HEAP32[$167>>2] = $166;
 $168 = (((($dec) + (($pli*36)|0)|0) + (($122*12)|0)|0) + 6296|0);
 $169 = (_generic_decode($150,$151,-1,$168,2)|0);
 $170 = ($169|0)==(0);
 if ($170) {
  $quant2$0$2 = 0;
 } else {
  $171 = (_od_ec_dec_bits($150,1)|0);
  $172 = ($171|0)==(0);
  $173 = (0 - ($169))|0;
  $$2$2 = $172 ? $169 : $173;
  $quant2$0$2 = $$2$2;
 }
 $174 = Math_imul($quant2$0$2, $dc_quant$0)|0;
 $175 = (($x) + 12|0);
 HEAP32[$175>>2] = $174;
 $176 = (($$0|0) / 5)&-1;
 $177 = HEAP32[$138>>2]|0;
 $178 = (($177) + ($176))|0;
 HEAP32[$138>>2] = $178;
 $179 = (($$1|0) / 5)&-1;
 $180 = HEAP32[$145>>2]|0;
 $181 = (($180) + ($179))|0;
 HEAP32[$145>>2] = $181;
 $182 = HEAP32[$138>>2]|0;
 $183 = HEAP32[$x>>2]|0;
 $184 = (($183) + ($181))|0;
 HEAP32[$x>>2] = $184;
 $185 = HEAP32[$138>>2]|0;
 $186 = HEAP32[$149>>2]|0;
 $187 = (($186) - ($185))|0;
 HEAP32[$149>>2] = $187;
 $188 = HEAP32[$x>>2]|0;
 $189 = (($188) - ($187))|0;
 $190 = $189 >> 1;
 $191 = HEAP32[$138>>2]|0;
 $192 = (($190) - ($191))|0;
 HEAP32[$138>>2] = $192;
 $193 = HEAP32[$145>>2]|0;
 $194 = (($190) - ($193))|0;
 HEAP32[$145>>2] = $194;
 $195 = HEAP32[$138>>2]|0;
 $196 = HEAP32[$x>>2]|0;
 $197 = (($196) - ($195))|0;
 HEAP32[$x>>2] = $197;
 $198 = HEAP32[$145>>2]|0;
 $199 = HEAP32[$149>>2]|0;
 $200 = (($199) + ($198))|0;
 HEAP32[$149>>2] = $200;
 $201 = HEAP32[$x>>2]|0;
 HEAP32[$131>>2] = $201;
 $202 = HEAP32[$138>>2]|0;
 HEAP32[$136>>2] = $202;
 $203 = HEAP32[$145>>2]|0;
 HEAP32[$143>>2] = $203;
 $204 = HEAP32[$149>>2]|0;
 HEAP32[$147>>2] = $204;
 _od_decode_haar_dc($dec,$ctx,$pli,$123,$124,$122,$xdec,$182,$181,0);
 _od_decode_haar_dc($dec,$ctx,$pli,$133,$124,$122,$xdec,$182,$181,0);
 _od_decode_haar_dc($dec,$ctx,$pli,$123,$139,$122,$xdec,$182,$181,0);
 _od_decode_haar_dc($dec,$ctx,$pli,$133,$139,$122,$xdec,$182,$181,0);
 STACKTOP = sp;return;
}
function _od_decode_block($dec,$ctx,$pli,$bx,$by,$l,$xdec,$ydec,$has_ur) {
 $dec = $dec|0;
 $ctx = $ctx|0;
 $pli = $pli|0;
 $bx = $bx|0;
 $by = $by|0;
 $l = $l|0;
 $xdec = $xdec|0;
 $ydec = $ydec|0;
 $has_ur = $has_ur|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bx$tr = 0, $by$tr = 0, $has_ur$tr = 0, $l$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dec) + 696|0);
 $1 = (($dec) + 692|0);
 $bx$tr = $bx;$by$tr = $by;$has_ur$tr = $has_ur;$l$tr = $l;
 while(1) {
  $2 = $by$tr << $l$tr;
  $3 = $2 >> 1;
  $4 = HEAP32[$0>>2]|0;
  $5 = Math_imul($3, $4)|0;
  $6 = $bx$tr << $l$tr;
  $7 = $6 >> 1;
  $8 = (($5) + ($7))|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 ^ $xdec;
  $14 = ($12|0)<($xdec|0);
  $15 = $14 ? $13 : 0;
  $16 = $15 ^ $12;
  $17 = ($16|0)==($l$tr|0);
  if ($17) {
   break;
  }
  $40 = (($l$tr) + -1)|0;
  $41 = $bx$tr << 1;
  $42 = $by$tr << 1;
  _od_decode_block($dec,$ctx,$pli,$41,$42,$40,$xdec,$ydec,1);
  $43 = $41 | 1;
  _od_decode_block($dec,$ctx,$pli,$43,$42,$40,$xdec,$ydec,$has_ur$tr);
  $44 = $42 | 1;
  _od_decode_block($dec,$ctx,$pli,$41,$44,$40,$xdec,$ydec,1);
  $bx$tr = $43;$by$tr = $44;$has_ur$tr = 0;$l$tr = $40;
 }
 $18 = (($16) - ($xdec))|0;
 $19 = (($ctx) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $38 = (96 + ($18<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_viiiiiii[$39 & 7]($dec,$ctx,$18,$pli,$bx$tr,$by$tr,$has_ur$tr);
  STACKTOP = sp;return;
 }
 $22 = (($dec) + 72|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >> $xdec;
 $25 = (($18) + 2)|0;
 $26 = $by$tr << $25;
 $27 = Math_imul($24, $26)|0;
 $28 = $bx$tr << $25;
 $$sum = (($27) + ($28))|0;
 $29 = (($20) + ($$sum<<2)|0);
 $30 = (($ctx) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($l$tr) + 2)|0;
 $34 = $by$tr << $33;
 $35 = Math_imul($23, $34)|0;
 $36 = $bx$tr << $33;
 $$sum1 = (($35) + ($36))|0;
 $37 = (($32) + ($$sum1<<2)|0);
 _od_resample_luma_coeffs($29,$24,$37,$23,$xdec,$ydec,$18,$12);
 $38 = (96 + ($18<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_viiiiiii[$39 & 7]($dec,$ctx,$18,$pli,$bx$tr,$by$tr,$has_ur$tr);
 STACKTOP = sp;return;
}
function _od_decode_mv($dec,$mvg,$vx,$vy,$level,$mv_res,$width,$height) {
 $dec = $dec|0;
 $mvg = $mvg|0;
 $vx = $vx|0;
 $vy = $vy|0;
 $level = $level|0;
 $mv_res = $mv_res|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ex = 0, $ey = 0, $ox$0 = 0, $ox$0$ = 0, $ox$1 = 0, $oy$0 = 0, $oy$0$ = 0, $oy$1 = 0;
 var $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ex = sp + 12|0;
 $ey = sp + 8|0;
 $pred = sp;
 $0 = (($dec) + 2704|0);
 $1 = ((($dec) + ($level<<2)|0) + 3092|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >> $mv_res;
 HEAP32[$ex>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4 >> $mv_res;
 HEAP32[$ey>>2] = $5;
 $6 = (($dec) + 6768|0);
 $7 = (($dec) + 3132|0);
 $8 = (($dec) + 3164|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_od_decode_cdf_adapt($6,$7,16,$9)|0);
 $11 = $10 >> 2;
 $12 = $10 & 3;
 $13 = ($12|0)==(3);
 if ($13) {
  $14 = (3 - ($mv_res))|0;
  $15 = $width << $14;
  $16 = (_generic_decode($6,$0,$15,$ex,2)|0);
  $17 = (($16) + ($12))|0;
  $ox$0 = $17;
 } else {
  $ox$0 = $12;
 }
 $18 = ($11|0)==(3);
 if ($18) {
  $19 = (3 - ($mv_res))|0;
  $20 = $height << $19;
  $21 = (_generic_decode($6,$0,$20,$ey,2)|0);
  $22 = (($21) + ($11))|0;
  $oy$0 = $22;
 } else {
  $oy$0 = $11;
 }
 $23 = HEAP32[$1>>2]|0;
 $24 = $ox$0 << $mv_res;
 $25 = $24 << 16;
 $26 = (($23) - ($25))|0;
 $27 = $26 >> 6;
 $28 = (($23) - ($27))|0;
 HEAP32[$1>>2] = $28;
 $29 = ((($dec) + ($level<<2)|0) + 3112|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $oy$0 << $mv_res;
 $32 = $31 << 16;
 $33 = (($30) - ($32))|0;
 $34 = $33 >> 6;
 $35 = (($30) - ($34))|0;
 HEAP32[$29>>2] = $35;
 $36 = ($ox$0|0)==(0);
 if ($36) {
  $ox$1 = 0;
 } else {
  $37 = (_od_ec_dec_bits($6,1)|0);
  $38 = ($37|0)==(0);
  $39 = (0 - ($ox$0))|0;
  $ox$0$ = $38 ? $ox$0 : $39;
  $ox$1 = $ox$0$;
 }
 $40 = ($oy$0|0)==(0);
 if ($40) {
  $oy$1 = 0;
 } else {
  $41 = (_od_ec_dec_bits($6,1)|0);
  $42 = ($41|0)==(0);
  $43 = (0 - ($oy$0))|0;
  $oy$0$ = $42 ? $oy$0 : $43;
  $oy$1 = $oy$0$;
 }
 _od_state_get_predictor($dec,$pred,$vx,$vy,$level,$mv_res);
 $44 = HEAP32[$pred>>2]|0;
 $45 = (($44) + ($ox$1))|0;
 $46 = $45 << $mv_res;
 HEAP32[$mvg>>2] = $46;
 $47 = (($pred) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + ($oy$1))|0;
 $50 = $49 << $mv_res;
 $51 = (($mvg) + 4|0);
 HEAP32[$51>>2] = $50;
 STACKTOP = sp;return;
}
function _daala_decode($buffer,$bpos,$blen) {
 $buffer = $buffer|0;
 $bpos = $bpos|0;
 $blen = $blen|0;
 var $$ = 0, $$0 = 0, $$01$ph17 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $status$0$ph16 = 0, $status$1 = 0, $status$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bpos|0)==(0);
 if ($0) {
  (_ogg_sync_init(120)|0);
  _daala_info_init(152);
  _daala_comment_init(208);
  HEAP32[224>>2] = 0;
  HEAP32[232>>2] = 0;
  $$01$ph17 = 0;$status$0$ph16 = 0;
 } else {
  $$01$ph17 = $bpos;$status$0$ph16 = $bpos;
 }
 L3: while(1) {
  $1 = (_ogg_stream_packetout(240,600)|0);
  $2 = ($1|0)==(1);
  if ($2) {
   $3 = ($$01$ph17|0)<($blen|0);
   while(1) {
    $4 = HEAP32[632>>2]|0;
    if ((($4|0) == 1)) {
     $5 = (_daala_decode_header_in(152,208,640,600)|0);
     $6 = ($5|0)<(0);
     if ($6) {
      label = 7;
      break L3;
     }
     $7 = ($5|0)==(0);
     if ($7) {
      $8 = HEAP32[640>>2]|0;
      $9 = (_daala_decode_alloc(152,$8)|0);
      HEAP32[648>>2] = $9;
      $10 = ($9|0)==(0|0);
      if ($10) {
       label = 10;
       break L3;
      }
      $11 = HEAP32[640>>2]|0;
      _daala_setup_free($11);
      HEAP32[640>>2] = 0;
      $12 = HEAP32[((152 + 4|0))>>2]|0;
      HEAP32[656>>2] = $12;
      $13 = HEAP32[((152 + 8|0))>>2]|0;
      HEAP32[664>>2] = $13;
      HEAP32[632>>2] = 2;
      (_gettimeofday((672|0),(0|0))|0);
      label = 12;
     }
    } else if ((($4|0) == 3) | (($4|0) == 2)) {
     label = 12;
    }
    if ((label|0) == 12) {
     label = 0;
     $14 = HEAP32[((600 + 4|0))>>2]|0;
     $15 = HEAP32[224>>2]|0;
     $16 = (($15) + ($14))|0;
     HEAP32[224>>2] = $16;
     (_gettimeofday((672|0),(0|0))|0);
     $17 = HEAP32[648>>2]|0;
     $18 = (_daala_decode_packet_in($17,680,600)|0);
     $19 = ($18|0)==(0);
     if (!($19)) {
      label = 13;
      break L3;
     }
     (_gettimeofday((760|0),(0|0))|0);
     $20 = HEAP32[760>>2]|0;
     $21 = HEAP32[672>>2]|0;
     $22 = (($20) - ($21))|0;
     $23 = ($22*1000)|0;
     $24 = HEAP32[((760 + 4|0))>>2]|0;
     $25 = HEAP32[((672 + 4|0))>>2]|0;
     $26 = (($24) - ($25))|0;
     $27 = (($26|0) / 1000)&-1;
     $28 = (($27) + ($23))|0;
     $29 = HEAP32[768>>2]|0;
     $30 = (($28) + ($29))|0;
     HEAP32[768>>2] = $30;
     HEAP32[632>>2] = 3;
     $31 = HEAP32[656>>2]|0;
     $32 = HEAP32[664>>2]|0;
     $33 = HEAP32[680>>2]|0;
     $34 = HEAP32[((680 + 12|0))>>2]|0;
     $35 = HEAP32[((680 + 16|0))>>2]|0;
     $36 = HEAP32[((680 + 28|0))>>2]|0;
     $37 = HEAP32[((680 + 32|0))>>2]|0;
     $38 = HEAP32[((680 + 44|0))>>2]|0;
     _yuv_display_stub(($31|0),($32|0),1,1,($33|0),($34|0),($35|0),($36|0),($37|0),($38|0));
     $39 = HEAP32[232>>2]|0;
     $40 = (($39) + 1)|0;
     HEAP32[232>>2] = $40;
     $41 = HEAP32[776>>2]|0;
     $42 = (($41) + 1)|0;
     HEAP32[776>>2] = $42;
     if ($3) {
      $$0 = $$01$ph17;
      label = 32;
      break L3;
     }
    }
    $43 = (_ogg_stream_packetout(240,600)|0);
    $44 = ($43|0)==(1);
    if (!($44)) {
     $$1 = $$01$ph17;$status$1 = $status$0$ph16;
     break;
    }
   }
  } else {
   $$1 = $$01$ph17;$status$1 = $status$0$ph16;
  }
  while(1) {
   $45 = (_ogg_sync_pageout(120,784)|0);
   $46 = ($45|0)==(1);
   if ($46) {
    break;
   }
   $47 = (_ogg_sync_buffer(120,4096)|0);
   $48 = (($blen) - ($$1))|0;
   $49 = ($48|0)>(4096);
   $$ = $49 ? 4096 : $48;
   $50 = ($$|0)>(0);
   if (!($50)) {
    $status$2 = $status$1;
    break L3;
   }
   $51 = ($47|0)==(0|0);
   if ($51) {
    label = 19;
    break L3;
   }
   $52 = (($buffer) + ($$1)|0);
   _memcpy(($47|0),($52|0),($$|0))|0;
   $53 = (($$) + ($$1))|0;
   $54 = (_ogg_sync_wrote(120,$$)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $$1 = $53;$status$1 = $53;
   } else {
    label = 21;
    break L3;
   }
  }
  $56 = (_ogg_page_bos(784)|0);
  $57 = ($56|0)==(0);
  if (!($57)) {
   $58 = (_ogg_page_serialno(784)|0);
   $59 = (_ogg_stream_init(240,$58)|0);
   $60 = ($59|0)==(0);
   if (!($60)) {
    label = 24;
    break;
   }
   HEAP32[632>>2] = 1;
  }
  $61 = (_ogg_stream_pagein(240,784)|0);
  $62 = ($61|0)==(0);
  if ($62) {
   $$01$ph17 = $$1;$status$0$ph16 = $status$1;
  } else {
   label = 27;
   break;
  }
 }
 if ((label|0) == 7) {
  (_puts((984|0))|0);
  $status$2 = -1;
 }
 else if ((label|0) == 10) {
  (_puts((952|0))|0);
  $status$2 = -1;
 }
 else if ((label|0) == 13) {
  (_puts((928|0))|0);
  $status$2 = -1;
 }
 else if ((label|0) == 19) {
  (_puts((896|0))|0);
  $status$2 = -1;
 }
 else if ((label|0) == 21) {
  (_puts((864|0))|0);
  $status$2 = -1;
 }
 else if ((label|0) == 24) {
  (_puts((832|0))|0);
  $status$2 = -1;
 }
 else if ((label|0) == 27) {
  (_puts((800|0))|0);
  $status$2 = -1;
 }
 else if ((label|0) == 32) {
  STACKTOP = sp;return ($$0|0);
 }
 _daala_info_clear(152);
 _daala_comment_clear(208);
 $63 = HEAP32[648>>2]|0;
 $64 = ($63|0)==(0|0);
 if (!($64)) {
  _daala_decode_free($63);
  HEAP32[648>>2] = 0;
 }
 $65 = HEAP32[632>>2]|0;
 $66 = ($65|0)>(0);
 if (!($66)) {
  $$0 = $status$2;
  STACKTOP = sp;return ($$0|0);
 }
 (_ogg_stream_clear(240)|0);
 $$0 = $status$2;
 STACKTOP = sp;return ($$0|0);
}
function _get_bitsperframe() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[224>>2]|0;
 $1 = $0 << 3;
 $2 = HEAP32[232>>2]|0;
 $3 = (($1|0) / ($2|0))&-1;
 HEAP32[224>>2] = 0;
 HEAP32[232>>2] = 0;
 STACKTOP = sp;return ($3|0);
}
function _get_decode_fps() {
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[776>>2]|0;
 $1 = (+($0|0));
 $2 = $1 * 1000.0;
 $3 = HEAP32[768>>2]|0;
 $4 = (+($3|0));
 $5 = $2 / $4;
 $6 = $5;
 HEAP32[768>>2] = 0;
 HEAP32[776>>2] = 0;
 STACKTOP = sp;return (+$6);
}
function _get_fps() {
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((152 + 20|0))>>2]|0;
 $1 = (+($0>>>0));
 $2 = HEAP32[((152 + 24|0))>>2]|0;
 $3 = (+($2>>>0));
 $4 = $1 / $3;
 STACKTOP = sp;return (+$4);
}
function _od_ec_dec_init($dec,$buf,$storage) {
 $dec = $dec|0;
 $buf = $buf|0;
 $storage = $storage|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$dec>>2] = $buf;
 $0 = (($buf) + ($storage)|0);
 $1 = (($dec) + 4|0);
 HEAP32[$1>>2] = $0;
 $2 = (($dec) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($dec) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (($dec) + 16|0);
 HEAP32[$4>>2] = -14;
 $5 = (($dec) + 20|0);
 HEAP32[$5>>2] = $0;
 $6 = (($dec) + 24|0);
 HEAP32[$6>>2] = $buf;
 $7 = (($dec) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = (($dec) + 32|0);
 HEAP16[$8>>1] = -32768;
 $9 = (($dec) + 34|0);
 HEAP16[$9>>1] = -15;
 $10 = (($dec) + 36|0);
 HEAP32[$10>>2] = 0;
 _od_ec_dec_refill($dec);
 STACKTOP = sp;return;
}
function _od_ec_dec_refill($dec) {
 $dec = $dec|0;
 var $$ = 0, $$1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bptr$0$lcssa = 0, $bptr$04 = 0, $cnt$0$lcssa = 0, $cnt$03 = 0, $cnt$1 = 0, $dif$0$lcssa = 0, $dif$02 = 0, $s$05 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($dec) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($dec) + 34|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = (($dec) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($dec) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3 << 16 >> 16;
 $9 = (8 - ($8))|0;
 $10 = ($9|0)>(-1);
 $11 = ($5>>>0)<($7>>>0);
 $$1 = $10 & $11;
 if ($$1) {
  $bptr$04 = $5;$cnt$03 = $3;$dif$02 = $1;$s$05 = $9;
  while(1) {
   $12 = HEAP8[$bptr$04>>0]|0;
   $13 = $12&255;
   $14 = $13 << $s$05;
   $15 = $14 | $dif$02;
   $16 = $cnt$03&65535;
   $17 = (($16) + 8)|0;
   $18 = $17&65535;
   $19 = (($s$05) + -8)|0;
   $20 = (($bptr$04) + 1|0);
   $21 = ($19|0)>(-1);
   $22 = ($20>>>0)<($7>>>0);
   $$ = $21 & $22;
   if ($$) {
    $bptr$04 = $20;$cnt$03 = $18;$dif$02 = $15;$s$05 = $19;
   } else {
    $$lcssa = $22;$bptr$0$lcssa = $20;$cnt$0$lcssa = $18;$dif$0$lcssa = $15;
    break;
   }
  }
 } else {
  $$lcssa = $11;$bptr$0$lcssa = $5;$cnt$0$lcssa = $3;$dif$0$lcssa = $1;
 }
 if ($$lcssa) {
  $cnt$1 = $cnt$0$lcssa;
  HEAP32[$0>>2] = $dif$0$lcssa;
  HEAP16[$2>>1] = $cnt$1;
  HEAP32[$4>>2] = $bptr$0$lcssa;
  STACKTOP = sp;return;
 }
 $23 = $cnt$0$lcssa << 16 >> 16;
 $24 = (16384 - ($23))|0;
 $25 = (($dec) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + ($26))|0;
 HEAP32[$25>>2] = $27;
 $cnt$1 = 16384;
 HEAP32[$0>>2] = $dif$0$lcssa;
 HEAP16[$2>>1] = $cnt$1;
 HEAP32[$4>>2] = $bptr$0$lcssa;
 STACKTOP = sp;return;
}
function _od_ec_dec_normalize($dec,$dif,$rng,$ret) {
 $dec = $dec|0;
 $dif = $dif|0;
 $rng = $rng|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_ctlz_i32(($rng|0))|0);
 $1 = (($0) + -16)|0;
 $2 = (($dec) + 34|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) - ($1))|0;
 $6 = $5&65535;
 HEAP16[$2>>1] = $6;
 $7 = $dif << $1;
 $8 = (($dec) + 28|0);
 HEAP32[$8>>2] = $7;
 $9 = $rng << $1;
 $10 = $9&65535;
 $11 = (($dec) + 32|0);
 HEAP16[$11>>1] = $10;
 $12 = HEAP16[$2>>1]|0;
 $13 = ($12<<16>>16)<(0);
 if (!($13)) {
  STACKTOP = sp;return ($ret|0);
 }
 _od_ec_dec_refill($dec);
 STACKTOP = sp;return ($ret|0);
}
function _od_ec_decode_bool_q15($dec,$fz) {
 $dec = $dec|0;
 $fz = $fz|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($dec) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($dec) + 32|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + -32768)|0;
 $6 = $5 ^ $fz;
 $7 = ($5>>>0)<($fz>>>0);
 $8 = $7 ? $6 : 0;
 $9 = $8 ^ $fz;
 $10 = (($9) + ($fz))|0;
 $11 = $10 << 16;
 $12 = ($1>>>0)>=($11>>>0);
 $13 = $12&1;
 $14 = $12 ? $11 : 0;
 $$ = (($1) - ($14))|0;
 $15 = (($4) - ($10))|0;
 $16 = $12 ? $15 : $10;
 $17 = (_od_ec_dec_normalize($dec,$$,$16,$13)|0);
 STACKTOP = sp;return ($17|0);
}
function _od_ec_decode_cdf_q15($dec,$cdf,$nsyms) {
 $dec = $dec|0;
 $cdf = $cdf|0;
 $nsyms = $nsyms|0;
 var $$lcssa = 0, $$sink = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fl$0$lcssa = 0, $ret$0$lcssa = 0, $ret$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dec) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($dec) + 32|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + -32768)|0;
 $6 = $1 >>> 17;
 $7 = $1 >>> 16;
 $8 = (($7) - ($5))|0;
 $9 = $8 ^ $6;
 $10 = ($8|0)>($6|0);
 $11 = $10 ? $9 : 0;
 $12 = $11 ^ $6;
 $$sink1 = HEAP16[$cdf>>1]|0;
 $13 = $$sink1&65535;
 $14 = ($13>>>0)>($12>>>0);
 if ($14) {
  $$lcssa = $13;$fl$0$lcssa = 0;$ret$0$lcssa = 0;
 } else {
  $33 = $13;$ret$02 = 0;
  while(1) {
   $15 = (($ret$02) + 1)|0;
   $16 = (($cdf) + ($15<<1)|0);
   $$sink = HEAP16[$16>>1]|0;
   $17 = $$sink&65535;
   $18 = ($17>>>0)>($12>>>0);
   if ($18) {
    $$lcssa = $17;$fl$0$lcssa = $33;$ret$0$lcssa = $15;
    break;
   } else {
    $33 = $17;$ret$02 = $15;
   }
  }
 }
 $19 = $fl$0$lcssa ^ $5;
 $20 = ($5>>>0)<($fl$0$lcssa>>>0);
 $21 = $20 ? $19 : 0;
 $22 = $21 ^ $fl$0$lcssa;
 $23 = (($22) + ($fl$0$lcssa))|0;
 $24 = $$lcssa ^ $5;
 $25 = ($5>>>0)<($$lcssa>>>0);
 $26 = $25 ? $24 : 0;
 $27 = $26 ^ $$lcssa;
 $28 = (($$lcssa) - ($23))|0;
 $29 = (($28) + ($27))|0;
 $30 = $23 << 16;
 $31 = (($1) - ($30))|0;
 $32 = (_od_ec_dec_normalize($dec,$31,$29,$ret$0$lcssa)|0);
 STACKTOP = sp;return ($32|0);
}
function _od_ec_decode_cdf_unscaled($dec,$cdf,$nsyms) {
 $dec = $dec|0;
 $cdf = $cdf|0;
 $nsyms = $nsyms|0;
 var $$lcssa = 0, $$sink = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fl$0$lcssa = 0, $ft$0 = 0, $ret$0$lcssa = 0, $ret$02 = 0, $s$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dec) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($dec) + 32|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($nsyms) + -1)|0;
 $6 = (($cdf) + ($5<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) + -1)|0;
 $10 = (_llvm_ctlz_i32(($9|0))|0);
 $11 = (($10) + -17)|0;
 $12 = $8 << $11;
 $13 = (($4) - ($12))|0;
 $14 = ($13>>>0)<($12>>>0);
 if ($14) {
  $ft$0 = $12;$s$0 = $11;
 } else {
  $15 = $12 << 1;
  $16 = (($10) + -16)|0;
  $ft$0 = $15;$s$0 = $16;
 }
 $17 = (($4) - ($ft$0))|0;
 $18 = $1 >>> 17;
 $19 = $1 >>> 16;
 $20 = (($19) - ($17))|0;
 $21 = $20 ^ $18;
 $22 = ($20|0)>($18|0);
 $23 = $22 ? $21 : 0;
 $24 = $23 ^ $18;
 $25 = $24 >> $s$0;
 $$sink1 = HEAP16[$cdf>>1]|0;
 $26 = $$sink1&65535;
 $27 = ($26>>>0)>($25>>>0);
 if ($27) {
  $$lcssa = $26;$fl$0$lcssa = 0;$ret$0$lcssa = 0;
 } else {
  $48 = $26;$ret$02 = 0;
  while(1) {
   $28 = (($ret$02) + 1)|0;
   $29 = (($cdf) + ($28<<1)|0);
   $$sink = HEAP16[$29>>1]|0;
   $30 = $$sink&65535;
   $31 = ($30>>>0)>($25>>>0);
   if ($31) {
    $$lcssa = $30;$fl$0$lcssa = $48;$ret$0$lcssa = $28;
    break;
   } else {
    $48 = $30;$ret$02 = $28;
   }
  }
 }
 $32 = $fl$0$lcssa << $s$0;
 $33 = $$lcssa << $s$0;
 $34 = $32 ^ $17;
 $35 = ($17>>>0)<($32>>>0);
 $36 = $35 ? $34 : 0;
 $37 = $36 ^ $32;
 $38 = (($37) + ($32))|0;
 $39 = $33 ^ $17;
 $40 = ($17>>>0)<($33>>>0);
 $41 = $40 ? $39 : 0;
 $42 = $41 ^ $33;
 $43 = (($33) - ($38))|0;
 $44 = (($43) + ($42))|0;
 $45 = $38 << 16;
 $46 = (($1) - ($45))|0;
 $47 = (_od_ec_dec_normalize($dec,$46,$44,$ret$0$lcssa)|0);
 STACKTOP = sp;return ($47|0);
}
function _od_ec_dec_uint($dec,$ft) {
 $dec = $dec|0;
 $ft = $ft|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ft>>>0)>(16);
 $1 = (($ft) + -1)|0;
 if (!($0)) {
  $16 = Math_imul($1, $ft)|0;
  $17 = $16 >>> 1;
  $$sum = (($17) + -1)|0;
  $18 = (1008 + ($$sum<<1)|0);
  $19 = (_od_ec_decode_cdf_q15($dec,$18,0)|0);
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_llvm_ctlz_i32(($1|0))|0);
 $3 = (32 - ($2))|0;
 $4 = (($3) + -4)|0;
 $5 = $1 >>> $4;
 $6 = (($5) + 1)|0;
 $7 = Math_imul($6, $5)|0;
 $8 = $7 >> 1;
 $$sum1 = (($8) + -1)|0;
 $9 = (1008 + ($$sum1<<1)|0);
 $10 = (_od_ec_decode_cdf_q15($dec,$9,0)|0);
 $11 = $10 << $4;
 $12 = (_od_ec_dec_bits($dec,$4)|0);
 $13 = $11 | $12;
 $14 = ($13>>>0)>($1>>>0);
 if (!($14)) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($dec) + 36|0);
 HEAP32[$15>>2] = 1;
 $$0 = $1;
 STACKTOP = sp;return ($$0|0);
}
function _od_ec_dec_bits($dec,$ftb) {
 $dec = $dec|0;
 $ftb = $ftb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available$0 = 0, $available$1 = 0, $available$2 = 0, $eptr$0 = 0, $eptr$1 = 0, $window$0 = 0, $window$1 = 0, $window$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($dec) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($dec) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($ftb>>>0);
 if ($4) {
  $5 = HEAP32[$dec>>2]|0;
  $6 = (($dec) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $available$0 = $3;$eptr$0 = $7;$window$0 = $1;
  while(1) {
   $8 = ($eptr$0>>>0)>($5>>>0);
   if (!($8)) {
    label = 4;
    break;
   }
   $13 = (($eptr$0) + -1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = $15 << $available$0;
   $17 = $16 | $window$0;
   $18 = (($available$0) + 8)|0;
   $19 = ($18|0)<(25);
   if ($19) {
    $available$0 = $18;$eptr$0 = $13;$window$0 = $17;
   } else {
    $available$1 = $18;$eptr$1 = $13;$window$1 = $17;
    break;
   }
  }
  if ((label|0) == 4) {
   $9 = (16384 - ($available$0))|0;
   $10 = (($dec) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + ($11))|0;
   HEAP32[$10>>2] = $12;
   $available$1 = 16384;$eptr$1 = $eptr$0;$window$1 = $window$0;
  }
  HEAP32[$6>>2] = $eptr$1;
  $available$2 = $available$1;$window$2 = $window$1;
 } else {
  $available$2 = $3;$window$2 = $1;
 }
 $20 = 1 << $ftb;
 $21 = (($20) + -1)|0;
 $22 = $window$2 & $21;
 $23 = $window$2 >>> $ftb;
 $24 = (($available$2) - ($ftb))|0;
 HEAP32[$0>>2] = $23;
 HEAP32[$2>>2] = $24;
 STACKTOP = sp;return ($22|0);
}
function _od_pre_filter4($_y,$_x) {
 $_y = $_y|0;
 $_x = $_x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$_x>>2]|0;
 $1 = (($_x) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (($_x) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($_x) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 1;
 $10 = (($5) - ($9))|0;
 $11 = $3 >> 1;
 $12 = (($0) - ($11))|0;
 $13 = ($8*85)|0;
 $14 = $13 >> 6;
 $15 = (0 - ($14))|0;
 $16 = $15 >>> 31;
 $17 = (($16) + ($14))|0;
 $18 = ($3*75)|0;
 $19 = $18 >> 6;
 $20 = (0 - ($19))|0;
 $21 = $20 >>> 31;
 $22 = (($21) + ($19))|0;
 $23 = Math_imul($17, -15)|0;
 $24 = (($23) + 32)|0;
 $25 = $24 >> 6;
 $26 = (($22) + ($25))|0;
 $27 = ($26*33)|0;
 $28 = (($27) + 32)|0;
 $29 = $28 >> 6;
 $30 = (($29) + ($17))|0;
 $31 = $26 >> 1;
 $32 = (($31) + ($12))|0;
 HEAP32[$_y>>2] = $32;
 $33 = $30 >> 1;
 $34 = (($33) + ($10))|0;
 $35 = (($_y) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = (($34) - ($30))|0;
 $37 = (($_y) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($32) - ($26))|0;
 $39 = (($_y) + 12|0);
 HEAP32[$39>>2] = $38;
 STACKTOP = sp;return;
}
function _od_pre_filter8($_y,$_x) {
 $_y = $_y|0;
 $_x = $_x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$_x>>2]|0;
 $1 = (($_x) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (($_x) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($_x) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = (($_x) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($_x) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($_x) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($_x) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) - ($17))|0;
 $19 = $18 >> 1;
 $20 = (($15) - ($19))|0;
 $21 = $13 >> 1;
 $22 = (($10) - ($21))|0;
 $23 = $8 >> 1;
 $24 = (($5) - ($23))|0;
 $25 = $3 >> 1;
 $26 = (($0) - ($25))|0;
 $27 = ($18*93)|0;
 $28 = $27 >> 6;
 $29 = (0 - ($28))|0;
 $30 = $29 >>> 31;
 $31 = (($30) + ($28))|0;
 $32 = ($13*72)|0;
 $33 = $32 >> 6;
 $34 = (0 - ($33))|0;
 $35 = $34 >>> 31;
 $36 = (($35) + ($33))|0;
 $37 = ($8*73)|0;
 $38 = $37 >> 6;
 $39 = (0 - ($38))|0;
 $40 = $39 >>> 31;
 $41 = (($40) + ($38))|0;
 $42 = ($3*78)|0;
 $43 = $42 >> 6;
 $44 = (0 - ($43))|0;
 $45 = $44 >>> 31;
 $46 = (($45) + ($43))|0;
 $47 = Math_imul($41, -10)|0;
 $48 = (($47) + 32)|0;
 $49 = $48 >> 6;
 $50 = (($46) + ($49))|0;
 $51 = ($50*23)|0;
 $52 = (($51) + 32)|0;
 $53 = $52 >> 6;
 $54 = Math_imul($36, -23)|0;
 $55 = (($54) + 32)|0;
 $56 = $55 >> 6;
 $57 = (($56) + ($41))|0;
 $58 = (($57) + ($53))|0;
 $59 = ($58*37)|0;
 $60 = (($59) + 32)|0;
 $61 = $60 >> 6;
 $62 = Math_imul($31, -28)|0;
 $63 = (($62) + 32)|0;
 $64 = $63 >> 6;
 $65 = (($64) + ($36))|0;
 $66 = (($65) + ($61))|0;
 $67 = ($66*50)|0;
 $68 = (($67) + 32)|0;
 $69 = $68 >> 6;
 $70 = (($69) + ($31))|0;
 $71 = $50 >> 1;
 $72 = (($71) + ($26))|0;
 HEAP32[$_y>>2] = $72;
 $73 = $58 >> 1;
 $74 = (($73) + ($24))|0;
 $75 = (($_y) + 4|0);
 HEAP32[$75>>2] = $74;
 $76 = $66 >> 1;
 $77 = (($76) + ($22))|0;
 $78 = (($_y) + 8|0);
 HEAP32[$78>>2] = $77;
 $79 = $70 >> 1;
 $80 = (($79) + ($20))|0;
 $81 = (($_y) + 12|0);
 HEAP32[$81>>2] = $80;
 $82 = (($80) - ($70))|0;
 $83 = (($_y) + 16|0);
 HEAP32[$83>>2] = $82;
 $84 = (($77) - ($66))|0;
 $85 = (($_y) + 20|0);
 HEAP32[$85>>2] = $84;
 $86 = (($74) - ($58))|0;
 $87 = (($_y) + 24|0);
 HEAP32[$87>>2] = $86;
 $88 = (($72) - ($50))|0;
 $89 = (($_y) + 28|0);
 HEAP32[$89>>2] = $88;
 STACKTOP = sp;return;
}
function _od_pre_filter16($_y,$_x) {
 $_y = $_y|0;
 $_x = $_x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$_x>>2]|0;
 $1 = (($_x) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (($_x) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($_x) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = (($_x) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($_x) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($_x) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($_x) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) - ($17))|0;
 $19 = (($_x) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($_x) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) - ($22))|0;
 $24 = (($_x) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($_x) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) - ($27))|0;
 $29 = (($_x) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($_x) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) - ($32))|0;
 $34 = (($_x) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($_x) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) - ($37))|0;
 $39 = $38 >> 1;
 $40 = (($35) - ($39))|0;
 $41 = $33 >> 1;
 $42 = (($30) - ($41))|0;
 $43 = $28 >> 1;
 $44 = (($25) - ($43))|0;
 $45 = $23 >> 1;
 $46 = (($20) - ($45))|0;
 $47 = $18 >> 1;
 $48 = (($15) - ($47))|0;
 $49 = $13 >> 1;
 $50 = (($10) - ($49))|0;
 $51 = $8 >> 1;
 $52 = (($5) - ($51))|0;
 $53 = $3 >> 1;
 $54 = (($0) - ($53))|0;
 $55 = ($38*94)|0;
 $56 = $55 >> 6;
 $57 = (0 - ($56))|0;
 $58 = $57 >>> 31;
 $59 = (($58) + ($56))|0;
 $60 = ($33*71)|0;
 $61 = $60 >> 6;
 $62 = (0 - ($61))|0;
 $63 = $62 >>> 31;
 $64 = (($63) + ($61))|0;
 $65 = ($28*68)|0;
 $66 = $65 >> 6;
 $67 = (0 - ($66))|0;
 $68 = $67 >>> 31;
 $69 = (($68) + ($66))|0;
 $70 = ($23*68)|0;
 $71 = $70 >> 6;
 $72 = (0 - ($71))|0;
 $73 = $72 >>> 31;
 $74 = (($73) + ($71))|0;
 $75 = ($18*68)|0;
 $76 = $75 >> 6;
 $77 = (0 - ($76))|0;
 $78 = $77 >>> 31;
 $79 = (($78) + ($76))|0;
 $80 = ($13*69)|0;
 $81 = $80 >> 6;
 $82 = (0 - ($81))|0;
 $83 = $82 >>> 31;
 $84 = (($83) + ($81))|0;
 $85 = ($8*70)|0;
 $86 = $85 >> 6;
 $87 = (0 - ($86))|0;
 $88 = $87 >>> 31;
 $89 = (($88) + ($86))|0;
 $90 = ($3*73)|0;
 $91 = $90 >> 6;
 $92 = (0 - ($91))|0;
 $93 = $92 >>> 31;
 $94 = (($93) + ($91))|0;
 $95 = Math_imul($89, -7)|0;
 $96 = (($95) + 32)|0;
 $97 = $96 >> 6;
 $98 = (($94) + ($97))|0;
 $99 = ($98*15)|0;
 $100 = (($99) + 32)|0;
 $101 = $100 >> 6;
 $102 = Math_imul($84, -17)|0;
 $103 = (($102) + 32)|0;
 $104 = $103 >> 6;
 $105 = (($104) + ($89))|0;
 $106 = (($105) + ($101))|0;
 $107 = ($106*26)|0;
 $108 = (($107) + 32)|0;
 $109 = $108 >> 6;
 $110 = Math_imul($79, -26)|0;
 $111 = (($110) + 32)|0;
 $112 = $111 >> 6;
 $113 = (($112) + ($84))|0;
 $114 = (($113) + ($109))|0;
 $115 = ($114*34)|0;
 $116 = (($115) + 32)|0;
 $117 = $116 >> 6;
 $118 = Math_imul($74, -32)|0;
 $119 = (($118) + 32)|0;
 $120 = $119 >> 6;
 $121 = (($120) + ($79))|0;
 $122 = (($121) + ($117))|0;
 $123 = ($122*40)|0;
 $124 = (($123) + 32)|0;
 $125 = $124 >> 6;
 $126 = Math_imul($69, -36)|0;
 $127 = (($126) + 32)|0;
 $128 = $127 >> 6;
 $129 = (($128) + ($74))|0;
 $130 = (($129) + ($125))|0;
 $131 = ($130*45)|0;
 $132 = (($131) + 32)|0;
 $133 = $132 >> 6;
 $134 = Math_imul($64, -37)|0;
 $135 = (($134) + 32)|0;
 $136 = $135 >> 6;
 $137 = (($136) + ($69))|0;
 $138 = (($137) + ($133))|0;
 $139 = ($138*49)|0;
 $140 = (($139) + 32)|0;
 $141 = $140 >> 6;
 $142 = Math_imul($59, -32)|0;
 $143 = (($142) + 32)|0;
 $144 = $143 >> 6;
 $145 = (($144) + ($64))|0;
 $146 = (($145) + ($141))|0;
 $147 = ($146*56)|0;
 $148 = (($147) + 32)|0;
 $149 = $148 >> 6;
 $150 = (($149) + ($59))|0;
 $151 = $98 >> 1;
 $152 = (($151) + ($54))|0;
 HEAP32[$_y>>2] = $152;
 $153 = $106 >> 1;
 $154 = (($153) + ($52))|0;
 $155 = (($_y) + 4|0);
 HEAP32[$155>>2] = $154;
 $156 = $114 >> 1;
 $157 = (($156) + ($50))|0;
 $158 = (($_y) + 8|0);
 HEAP32[$158>>2] = $157;
 $159 = $122 >> 1;
 $160 = (($159) + ($48))|0;
 $161 = (($_y) + 12|0);
 HEAP32[$161>>2] = $160;
 $162 = $130 >> 1;
 $163 = (($162) + ($46))|0;
 $164 = (($_y) + 16|0);
 HEAP32[$164>>2] = $163;
 $165 = $138 >> 1;
 $166 = (($165) + ($44))|0;
 $167 = (($_y) + 20|0);
 HEAP32[$167>>2] = $166;
 $168 = $146 >> 1;
 $169 = (($168) + ($42))|0;
 $170 = (($_y) + 24|0);
 HEAP32[$170>>2] = $169;
 $171 = $150 >> 1;
 $172 = (($171) + ($40))|0;
 $173 = (($_y) + 28|0);
 HEAP32[$173>>2] = $172;
 $174 = (($172) - ($150))|0;
 $175 = (($_y) + 32|0);
 HEAP32[$175>>2] = $174;
 $176 = (($169) - ($146))|0;
 $177 = (($_y) + 36|0);
 HEAP32[$177>>2] = $176;
 $178 = (($166) - ($138))|0;
 $179 = (($_y) + 40|0);
 HEAP32[$179>>2] = $178;
 $180 = (($163) - ($130))|0;
 $181 = (($_y) + 44|0);
 HEAP32[$181>>2] = $180;
 $182 = (($160) - ($122))|0;
 $183 = (($_y) + 48|0);
 HEAP32[$183>>2] = $182;
 $184 = (($157) - ($114))|0;
 $185 = (($_y) + 52|0);
 HEAP32[$185>>2] = $184;
 $186 = (($154) - ($106))|0;
 $187 = (($_y) + 56|0);
 HEAP32[$187>>2] = $186;
 $188 = (($152) - ($98))|0;
 $189 = (($_y) + 60|0);
 HEAP32[$189>>2] = $188;
 STACKTOP = sp;return;
}
function _od_post_filter4($_x,$_y) {
 $_x = $_x|0;
 $_y = $_y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$_y>>2]|0;
 $1 = (($_y) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (($_y) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($_y) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 1;
 $10 = (($5) - ($9))|0;
 $11 = $3 >> 1;
 $12 = (($0) - ($11))|0;
 $13 = ($3*33)|0;
 $14 = (($13) + 32)|0;
 $15 = $14 >> 6;
 $16 = (($8) - ($15))|0;
 $17 = Math_imul($16, -15)|0;
 $18 = (($17) + 32)|0;
 $19 = $18 >>> 6;
 $20 = (($3) - ($19))|0;
 $21 = $20 << 6;
 $22 = (($21|0) / 75)&-1;
 $23 = $16 << 6;
 $24 = (($23|0) / 85)&-1;
 $25 = $22 >> 1;
 $26 = (($25) + ($12))|0;
 HEAP32[$_x>>2] = $26;
 $27 = $24 >> 1;
 $28 = (($10) + ($27))|0;
 $29 = (($_x) + 4|0);
 HEAP32[$29>>2] = $28;
 $30 = (($28) - ($24))|0;
 $31 = (($_x) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = (($26) - ($22))|0;
 $33 = (($_x) + 12|0);
 HEAP32[$33>>2] = $32;
 STACKTOP = sp;return;
}
function _od_post_filter8($_x,$_y) {
 $_x = $_x|0;
 $_y = $_y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$_y>>2]|0;
 $1 = (($_y) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (($_y) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($_y) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = (($_y) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($_y) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($_y) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($_y) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) - ($17))|0;
 $19 = $18 >> 1;
 $20 = (($15) - ($19))|0;
 $21 = $13 >> 1;
 $22 = (($10) - ($21))|0;
 $23 = $8 >> 1;
 $24 = (($5) - ($23))|0;
 $25 = $3 >> 1;
 $26 = (($0) - ($25))|0;
 $27 = ($13*50)|0;
 $28 = (($27) + 32)|0;
 $29 = $28 >> 6;
 $30 = (($18) - ($29))|0;
 $31 = Math_imul($30, -28)|0;
 $32 = (($31) + 32)|0;
 $33 = $32 >> 6;
 $34 = (($13) - ($33))|0;
 $35 = ($8*37)|0;
 $36 = (($35) + 32)|0;
 $37 = $36 >> 6;
 $38 = (($34) - ($37))|0;
 $39 = Math_imul($38, -23)|0;
 $40 = (($39) + 32)|0;
 $41 = $40 >> 6;
 $42 = (($8) - ($41))|0;
 $43 = ($3*23)|0;
 $44 = (($43) + 32)|0;
 $45 = $44 >> 6;
 $46 = (($42) - ($45))|0;
 $47 = Math_imul($46, -10)|0;
 $48 = (($47) + 32)|0;
 $49 = $48 >>> 6;
 $50 = (($3) - ($49))|0;
 $51 = $50 << 6;
 $52 = (($51|0) / 78)&-1;
 $53 = $46 << 6;
 $54 = (($53|0) / 73)&-1;
 $55 = $38 << 6;
 $56 = (($55|0) / 72)&-1;
 $57 = $30 << 6;
 $58 = (($57|0) / 93)&-1;
 $59 = $52 >> 1;
 $60 = (($59) + ($26))|0;
 HEAP32[$_x>>2] = $60;
 $61 = $54 >> 1;
 $62 = (($61) + ($24))|0;
 $63 = (($_x) + 4|0);
 HEAP32[$63>>2] = $62;
 $64 = $56 >> 1;
 $65 = (($64) + ($22))|0;
 $66 = (($_x) + 8|0);
 HEAP32[$66>>2] = $65;
 $67 = $58 >> 1;
 $68 = (($67) + ($20))|0;
 $69 = (($_x) + 12|0);
 HEAP32[$69>>2] = $68;
 $70 = (($68) - ($58))|0;
 $71 = (($_x) + 16|0);
 HEAP32[$71>>2] = $70;
 $72 = (($65) - ($56))|0;
 $73 = (($_x) + 20|0);
 HEAP32[$73>>2] = $72;
 $74 = (($62) - ($54))|0;
 $75 = (($_x) + 24|0);
 HEAP32[$75>>2] = $74;
 $76 = (($60) - ($52))|0;
 $77 = (($_x) + 28|0);
 HEAP32[$77>>2] = $76;
 STACKTOP = sp;return;
}
function _od_post_filter16($_x,$_y) {
 $_x = $_x|0;
 $_y = $_y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$_y>>2]|0;
 $1 = (($_y) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (($_y) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($_y) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = (($_y) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($_y) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($_y) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($_y) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) - ($17))|0;
 $19 = (($_y) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($_y) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) - ($22))|0;
 $24 = (($_y) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($_y) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) - ($27))|0;
 $29 = (($_y) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($_y) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) - ($32))|0;
 $34 = (($_y) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($_y) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) - ($37))|0;
 $39 = $38 >> 1;
 $40 = (($35) - ($39))|0;
 $41 = $33 >> 1;
 $42 = (($30) - ($41))|0;
 $43 = $28 >> 1;
 $44 = (($25) - ($43))|0;
 $45 = $23 >> 1;
 $46 = (($20) - ($45))|0;
 $47 = $18 >> 1;
 $48 = (($15) - ($47))|0;
 $49 = $13 >> 1;
 $50 = (($10) - ($49))|0;
 $51 = $8 >> 1;
 $52 = (($5) - ($51))|0;
 $53 = $3 >> 1;
 $54 = (($0) - ($53))|0;
 $55 = ($33*56)|0;
 $56 = (($55) + 32)|0;
 $57 = $56 >> 6;
 $58 = (($38) - ($57))|0;
 $59 = Math_imul($58, -32)|0;
 $60 = (($59) + 32)|0;
 $61 = $60 >> 6;
 $62 = (($33) - ($61))|0;
 $63 = ($28*49)|0;
 $64 = (($63) + 32)|0;
 $65 = $64 >> 6;
 $66 = (($62) - ($65))|0;
 $67 = Math_imul($66, -37)|0;
 $68 = (($67) + 32)|0;
 $69 = $68 >> 6;
 $70 = (($28) - ($69))|0;
 $71 = ($23*45)|0;
 $72 = (($71) + 32)|0;
 $73 = $72 >> 6;
 $74 = (($70) - ($73))|0;
 $75 = Math_imul($74, -36)|0;
 $76 = (($75) + 32)|0;
 $77 = $76 >> 6;
 $78 = (($23) - ($77))|0;
 $79 = ($18*40)|0;
 $80 = (($79) + 32)|0;
 $81 = $80 >> 6;
 $82 = (($78) - ($81))|0;
 $83 = Math_imul($82, -32)|0;
 $84 = (($83) + 32)|0;
 $85 = $84 >> 6;
 $86 = (($18) - ($85))|0;
 $87 = ($13*34)|0;
 $88 = (($87) + 32)|0;
 $89 = $88 >> 6;
 $90 = (($86) - ($89))|0;
 $91 = Math_imul($90, -26)|0;
 $92 = (($91) + 32)|0;
 $93 = $92 >> 6;
 $94 = (($13) - ($93))|0;
 $95 = ($8*26)|0;
 $96 = (($95) + 32)|0;
 $97 = $96 >> 6;
 $98 = (($94) - ($97))|0;
 $99 = Math_imul($98, -17)|0;
 $100 = (($99) + 32)|0;
 $101 = $100 >> 6;
 $102 = (($8) - ($101))|0;
 $103 = ($3*15)|0;
 $104 = (($103) + 32)|0;
 $105 = $104 >> 6;
 $106 = (($102) - ($105))|0;
 $107 = Math_imul($106, -7)|0;
 $108 = (($107) + 32)|0;
 $109 = $108 >>> 6;
 $110 = (($3) - ($109))|0;
 $111 = $110 << 6;
 $112 = (($111|0) / 73)&-1;
 $113 = $106 << 6;
 $114 = (($113|0) / 70)&-1;
 $115 = $98 << 6;
 $116 = (($115|0) / 69)&-1;
 $117 = $90 << 6;
 $118 = (($117|0) / 68)&-1;
 $119 = $82 << 6;
 $120 = (($119|0) / 68)&-1;
 $121 = $74 << 6;
 $122 = (($121|0) / 68)&-1;
 $123 = $66 << 6;
 $124 = (($123|0) / 71)&-1;
 $125 = $58 << 6;
 $126 = (($125|0) / 94)&-1;
 $127 = $112 >> 1;
 $128 = (($127) + ($54))|0;
 HEAP32[$_x>>2] = $128;
 $129 = $114 >> 1;
 $130 = (($129) + ($52))|0;
 $131 = (($_x) + 4|0);
 HEAP32[$131>>2] = $130;
 $132 = $116 >> 1;
 $133 = (($132) + ($50))|0;
 $134 = (($_x) + 8|0);
 HEAP32[$134>>2] = $133;
 $135 = $118 >> 1;
 $136 = (($135) + ($48))|0;
 $137 = (($_x) + 12|0);
 HEAP32[$137>>2] = $136;
 $138 = $120 >> 1;
 $139 = (($138) + ($46))|0;
 $140 = (($_x) + 16|0);
 HEAP32[$140>>2] = $139;
 $141 = $122 >> 1;
 $142 = (($141) + ($44))|0;
 $143 = (($_x) + 20|0);
 HEAP32[$143>>2] = $142;
 $144 = $124 >> 1;
 $145 = (($144) + ($42))|0;
 $146 = (($_x) + 24|0);
 HEAP32[$146>>2] = $145;
 $147 = $126 >> 1;
 $148 = (($147) + ($40))|0;
 $149 = (($_x) + 28|0);
 HEAP32[$149>>2] = $148;
 $150 = (($148) - ($126))|0;
 $151 = (($_x) + 32|0);
 HEAP32[$151>>2] = $150;
 $152 = (($145) - ($124))|0;
 $153 = (($_x) + 36|0);
 HEAP32[$153>>2] = $152;
 $154 = (($142) - ($122))|0;
 $155 = (($_x) + 40|0);
 HEAP32[$155>>2] = $154;
 $156 = (($139) - ($120))|0;
 $157 = (($_x) + 44|0);
 HEAP32[$157>>2] = $156;
 $158 = (($136) - ($118))|0;
 $159 = (($_x) + 48|0);
 HEAP32[$159>>2] = $158;
 $160 = (($133) - ($116))|0;
 $161 = (($_x) + 52|0);
 HEAP32[$161>>2] = $160;
 $162 = (($130) - ($114))|0;
 $163 = (($_x) + 56|0);
 HEAP32[$163>>2] = $162;
 $164 = (($128) - ($112))|0;
 $165 = (($_x) + 60|0);
 HEAP32[$165>>2] = $164;
 STACKTOP = sp;return;
}
function _od_apply_prefilter($c,$w,$bx,$by,$l,$bsize,$bstride,$xdec,$ydec,$edge) {
 $c = $c|0;
 $w = $w|0;
 $bx = $bx|0;
 $by = $by|0;
 $l = $l|0;
 $bsize = $bsize|0;
 $bstride = $bstride|0;
 $xdec = $xdec|0;
 $ydec = $ydec|0;
 $edge = $edge|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bx$tr = 0, $by$tr = 0, $edge$tr = 0, $l$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($xdec) + 2)|0;
 $bx$tr = $bx;$by$tr = $by;$edge$tr = $edge;$l$tr = $l;
 while(1) {
  $1 = $l$tr&255;
  $2 = $by$tr << $1;
  $3 = $2 >> 1;
  $4 = Math_imul($3, $bstride)|0;
  $5 = $bx$tr << $1;
  $6 = $5 >> 1;
  $7 = (($4) + ($6))|0;
  $8 = (($bsize) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 ^ $0;
  $12 = ($0|0)<($10|0);
  $13 = $12 ? $11 : 0;
  $14 = $13 ^ $10;
  $15 = $14 ^ $xdec;
  $16 = ($14|0)<($xdec|0);
  $17 = $16 ? $15 : 0;
  $18 = $17 ^ $14;
  $19 = ($18|0)==($1|0);
  if ($19) {
   break;
  }
  $24 = (($l$tr) + -1)<<24>>24;
  $25 = $bx$tr << 1;
  $26 = $by$tr << 1;
  $27 = $edge$tr | 2;
  _od_apply_prefilter($c,$w,$25,$26,$24,$bsize,$bstride,$xdec,$ydec,$27);
  $28 = $25 | 1;
  _od_apply_prefilter($c,$w,$28,$26,$24,$bsize,$bstride,$xdec,$ydec,3);
  $29 = $26 | 1;
  _od_apply_prefilter($c,$w,$25,$29,$24,$bsize,$bstride,$xdec,$ydec,$edge$tr);
  $30 = $edge$tr | 1;
  $bx$tr = $28;$by$tr = $29;$edge$tr = $30;$l$tr = $24;
 }
 $20 = $edge$tr & 2;
 $21 = ($20|0)==(0);
 if (!($21)) {
  _od_apply_filter_cols($c,$w,$bx$tr,$by$tr,1,$l$tr,$bsize,$bstride,$xdec,$ydec,0);
 }
 $22 = $edge$tr & 1;
 $23 = ($22|0)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 _od_apply_filter_rows($c,$w,$bx$tr,$by$tr,0,$l$tr,$bsize,$bstride,$xdec,$ydec,0);
 STACKTOP = sp;return;
}
function _od_apply_filter_cols($c,$stride,$bx,$by,$out,$l,$bsize,$bstride,$xdec,$ydec,$inv) {
 $c = $c|0;
 $stride = $stride|0;
 $bx = $bx|0;
 $by = $by|0;
 $out = $out|0;
 $l = $l|0;
 $bsize = $bsize|0;
 $bstride = $bstride|0;
 $xdec = $xdec|0;
 $ydec = $ydec|0;
 $inv = $inv|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond21 = 0, $exitcond22 = 0, $exitcond23 = 0, $exitcond25 = 0, $f$017 = 0, $f$1 = 0, $f$211 = 0, $f$3 = 0, $i$018 = 0;
 var $i$112 = 0, $i$27 = 0, $j$02 = 0, $j$13 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $t = sp;
 $0 = $l&255;
 $1 = $bx << $0;
 $2 = (($out) + ($by))|0;
 $3 = $2 << $0;
 $4 = (($out) + -1)|0;
 $5 = (($4) + ($3))|0;
 $6 = $5 >> 1;
 $7 = Math_imul($6, $bstride)|0;
 $8 = $1 >> 1;
 $9 = (($7) + ($8))|0;
 $10 = (($bsize) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($xdec) + 2)|0;
 $14 = $12 ^ $13;
 $15 = ($13|0)<($12|0);
 $16 = $15 ? $14 : 0;
 $17 = $16 ^ $12;
 $18 = $17 ^ $xdec;
 $19 = ($17|0)<($xdec|0);
 $20 = $19 ? $18 : 0;
 $21 = $20 ^ $17;
 $22 = $21 & 255;
 $23 = ($0>>>0)>($22>>>0);
 if ($23) {
  $24 = 1 << $0;
  $25 = ($24|0)>(0);
  if ($25) {
   $26 = (($ydec) + 2)|0;
   $f$017 = $0;$i$018 = 0;
   while(1) {
    $27 = (($i$018) + ($1))|0;
    $28 = $27 >> 1;
    $29 = (($28) + ($7))|0;
    $30 = (($bsize) + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = $32 ^ $26;
    $34 = ($26|0)<($32|0);
    $35 = $34 ? $33 : 0;
    $36 = $35 ^ $32;
    $37 = $36 ^ $ydec;
    $38 = ($36|0)<($ydec|0);
    $39 = $38 ? $37 : 0;
    $40 = $39 ^ $36;
    $41 = $40 ^ $f$017;
    $42 = ($40|0)<($f$017|0);
    $43 = $42 ? $41 : 0;
    $44 = $43 ^ $f$017;
    $45 = (($i$018) + 1)|0;
    $exitcond25 = ($45|0)==($24|0);
    if ($exitcond25) {
     $f$1 = $44;
     break;
    } else {
     $f$017 = $44;$i$018 = $45;
    }
   }
  } else {
   $f$1 = $0;
  }
 } else {
  $f$1 = $0;
 }
 $46 = ($0>>>0)<($22>>>0);
 if ($46) {
  $47 = 1 << $22;
  $48 = (0 - ($47))|0;
  $49 = $1 & $48;
  $50 = ($47|0)>(0);
  if ($50) {
   $51 = ($out|0)!=(0);
   $52 = $51 ? -1 : 1;
   $53 = (($5) + ($52))|0;
   $54 = $53 >> 1;
   $55 = Math_imul($54, $bstride)|0;
   $56 = (($ydec) + 2)|0;
   $f$211 = $f$1;$i$112 = 0;
   while(1) {
    $57 = (($i$112) + ($49))|0;
    $58 = $57 >> 1;
    $59 = (($58) + ($55))|0;
    $60 = (($bsize) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 ^ $56;
    $64 = ($56|0)<($62|0);
    $65 = $64 ? $63 : 0;
    $66 = $65 ^ $62;
    $67 = $66 ^ $ydec;
    $68 = ($66|0)<($ydec|0);
    $69 = $68 ? $67 : 0;
    $70 = $69 ^ $66;
    $71 = $70 ^ $f$211;
    $72 = ($70|0)<($f$211|0);
    $73 = $72 ? $71 : 0;
    $74 = $73 ^ $f$211;
    $75 = (($i$112) + 1)|0;
    $exitcond23 = ($75|0)==($47|0);
    if ($exitcond23) {
     $f$3 = $74;
     break;
    } else {
     $f$211 = $74;$i$112 = $75;
    }
   }
  } else {
   $f$3 = $f$1;
  }
 } else {
  $f$3 = $f$1;
 }
 $76 = (($0) - ($xdec))|0;
 $77 = (($f$3) - ($xdec))|0;
 $78 = $76 & 255;
 $79 = (($78) + 2)|0;
 $80 = $2 << $79;
 $81 = 2 << $77;
 $82 = (($80) - ($81))|0;
 $83 = Math_imul($82, $stride)|0;
 $84 = $bx << $79;
 $85 = (($83) + ($84))|0;
 $86 = 4 << $78;
 $87 = ($86|0)>(0);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 $88 = 4 << $77;
 $89 = ($88|0)>(0);
 $90 = ($inv|0)!=(0);
 $91 = $90 ? 1296 : 1280;
 $92 = (($91) + ($77<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 $i$27 = 0;
 while(1) {
  if ($89) {
   $94 = (($i$27) + ($85))|0;
   $j$02 = 0;
   while(1) {
    $95 = Math_imul($j$02, $stride)|0;
    $$sum1 = (($94) + ($95))|0;
    $96 = (($c) + ($$sum1<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($t) + ($j$02<<2)|0);
    HEAP32[$98>>2] = $97;
    $99 = (($j$02) + 1)|0;
    $exitcond = ($99|0)==($88|0);
    if ($exitcond) {
     break;
    } else {
     $j$02 = $99;
    }
   }
   FUNCTION_TABLE_vii[$93 & 7]($t,$t);
   $100 = ($88|0)>(0);
   if ($100) {
    $101 = (($i$27) + ($85))|0;
    $j$13 = 0;
    while(1) {
     $102 = (($t) + ($j$13<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = Math_imul($j$13, $stride)|0;
     $$sum = (($101) + ($104))|0;
     $105 = (($c) + ($$sum<<2)|0);
     HEAP32[$105>>2] = $103;
     $106 = (($j$13) + 1)|0;
     $exitcond21 = ($106|0)==($88|0);
     if ($exitcond21) {
      break;
     } else {
      $j$13 = $106;
     }
    }
   }
  } else {
   FUNCTION_TABLE_vii[$93 & 7]($t,$t);
  }
  $107 = (($i$27) + 1)|0;
  $exitcond22 = ($107|0)==($86|0);
  if ($exitcond22) {
   break;
  } else {
   $i$27 = $107;
  }
 }
 STACKTOP = sp;return;
}
function _od_apply_filter_rows($c,$stride,$bx,$by,$out,$l,$bsize,$bstride,$xdec,$ydec,$inv) {
 $c = $c|0;
 $stride = $stride|0;
 $bx = $bx|0;
 $by = $by|0;
 $out = $out|0;
 $l = $l|0;
 $bsize = $bsize|0;
 $bstride = $bstride|0;
 $xdec = $xdec|0;
 $ydec = $ydec|0;
 $inv = $inv|0;
 var $$01 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $exitcond = 0, $exitcond12 = 0, $exitcond14 = 0;
 var $f$08 = 0, $f$1 = 0, $f$23 = 0, $f$3 = 0, $i$09 = 0, $i$14 = 0, $i$22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + ($bx))|0;
 $1 = $l&255;
 $2 = $0 << $1;
 $3 = (($out) + -1)|0;
 $4 = (($3) + ($2))|0;
 $5 = $by << $1;
 $6 = $5 >> 1;
 $7 = Math_imul($6, $bstride)|0;
 $8 = $4 >> 1;
 $9 = (($7) + ($8))|0;
 $10 = (($bsize) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($xdec) + 2)|0;
 $14 = $12 ^ $13;
 $15 = ($13|0)<($12|0);
 $16 = $15 ? $14 : 0;
 $17 = $16 ^ $12;
 $18 = $17 ^ $xdec;
 $19 = ($17|0)<($xdec|0);
 $20 = $19 ? $18 : 0;
 $21 = $20 ^ $17;
 $22 = $21 & 255;
 $23 = ($1>>>0)>($22>>>0);
 if ($23) {
  $24 = 1 << $1;
  $25 = ($24|0)>(0);
  if ($25) {
   $26 = (($ydec) + 2)|0;
   $f$08 = $1;$i$09 = 0;
   while(1) {
    $27 = (($i$09) + ($5))|0;
    $28 = $27 >> 1;
    $29 = Math_imul($28, $bstride)|0;
    $30 = (($29) + ($8))|0;
    $31 = (($bsize) + ($30)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33 ^ $26;
    $35 = ($26|0)<($33|0);
    $36 = $35 ? $34 : 0;
    $37 = $36 ^ $33;
    $38 = $37 ^ $ydec;
    $39 = ($37|0)<($ydec|0);
    $40 = $39 ? $38 : 0;
    $41 = $40 ^ $37;
    $42 = $41 ^ $f$08;
    $43 = ($41|0)<($f$08|0);
    $44 = $43 ? $42 : 0;
    $45 = $44 ^ $f$08;
    $46 = (($i$09) + 1)|0;
    $exitcond14 = ($46|0)==($24|0);
    if ($exitcond14) {
     $f$1 = $45;
     break;
    } else {
     $f$08 = $45;$i$09 = $46;
    }
   }
  } else {
   $f$1 = $1;
  }
 } else {
  $f$1 = $1;
 }
 $47 = ($1>>>0)<($22>>>0);
 if ($47) {
  $48 = 1 << $22;
  $49 = (0 - ($48))|0;
  $50 = $5 & $49;
  $51 = ($48|0)>(0);
  if ($51) {
   $52 = ($out|0)!=(0);
   $53 = $52 ? -1 : 1;
   $54 = (($4) + ($53))|0;
   $55 = $54 >> 1;
   $56 = (($ydec) + 2)|0;
   $f$23 = $f$1;$i$14 = 0;
   while(1) {
    $57 = (($i$14) + ($50))|0;
    $58 = $57 >> 1;
    $59 = Math_imul($58, $bstride)|0;
    $60 = (($59) + ($55))|0;
    $61 = (($bsize) + ($60)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = $63 ^ $56;
    $65 = ($56|0)<($63|0);
    $66 = $65 ? $64 : 0;
    $67 = $66 ^ $63;
    $68 = $67 ^ $ydec;
    $69 = ($67|0)<($ydec|0);
    $70 = $69 ? $68 : 0;
    $71 = $70 ^ $67;
    $72 = $71 ^ $f$23;
    $73 = ($71|0)<($f$23|0);
    $74 = $73 ? $72 : 0;
    $75 = $74 ^ $f$23;
    $76 = (($i$14) + 1)|0;
    $exitcond12 = ($76|0)==($48|0);
    if ($exitcond12) {
     $f$3 = $75;
     break;
    } else {
     $f$23 = $75;$i$14 = $76;
    }
   }
  } else {
   $f$3 = $f$1;
  }
 } else {
  $f$3 = $f$1;
 }
 $77 = (($1) - ($xdec))|0;
 $78 = (($f$3) - ($xdec))|0;
 $79 = $77 & 255;
 $80 = (($79) + 2)|0;
 $81 = 4 << $79;
 $82 = ($81|0)>(0);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = $by << $80;
 $84 = $0 << $80;
 $85 = Math_imul($83, $stride)|0;
 $$neg = -2 << $78;
 $86 = (($85) + ($84))|0;
 $87 = (($86) + ($$neg))|0;
 $88 = (($c) + ($87<<2)|0);
 $89 = ($inv|0)!=(0);
 $90 = $89 ? 1296 : 1280;
 $91 = (($90) + ($78<<2)|0);
 $92 = HEAP32[$91>>2]|0;
 $$01 = $88;$i$22 = 0;
 while(1) {
  FUNCTION_TABLE_vii[$92 & 7]($$01,$$01);
  $93 = (($$01) + ($stride<<2)|0);
  $94 = (($i$22) + 1)|0;
  $exitcond = ($94|0)==($81|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $93;$i$22 = $94;
  }
 }
 STACKTOP = sp;return;
}
function _od_apply_postfilter($c,$w,$bx,$by,$l,$bsize,$bstride,$xdec,$ydec,$edge) {
 $c = $c|0;
 $w = $w|0;
 $bx = $bx|0;
 $by = $by|0;
 $l = $l|0;
 $bsize = $bsize|0;
 $bstride = $bstride|0;
 $xdec = $xdec|0;
 $ydec = $ydec|0;
 $edge = $edge|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bx$tr = 0, $by$tr = 0, $edge$tr = 0, $l$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($xdec) + 2)|0;
 $bx$tr = $bx;$by$tr = $by;$edge$tr = $edge;$l$tr = $l;
 while(1) {
  $1 = $l$tr&255;
  $2 = $by$tr << $1;
  $3 = $2 >> 1;
  $4 = Math_imul($3, $bstride)|0;
  $5 = $bx$tr << $1;
  $6 = $5 >> 1;
  $7 = (($4) + ($6))|0;
  $8 = (($bsize) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 ^ $0;
  $12 = ($0|0)<($10|0);
  $13 = $12 ? $11 : 0;
  $14 = $13 ^ $10;
  $15 = $14 ^ $xdec;
  $16 = ($14|0)<($xdec|0);
  $17 = $16 ? $15 : 0;
  $18 = $17 ^ $14;
  $19 = $18 & 255;
  $20 = ($19|0)==($1|0);
  if ($20) {
   break;
  }
  $25 = (($l$tr) + -1)<<24>>24;
  $26 = $bx$tr << 1;
  $27 = $by$tr << 1;
  $28 = $edge$tr | 4;
  _od_apply_postfilter($c,$w,$26,$27,$25,$bsize,$bstride,$xdec,$ydec,$28);
  $29 = $26 | 1;
  _od_apply_postfilter($c,$w,$29,$27,$25,$bsize,$bstride,$xdec,$ydec,$edge$tr);
  $30 = $27 | 1;
  _od_apply_postfilter($c,$w,$26,$30,$25,$bsize,$bstride,$xdec,$ydec,12);
  $31 = $edge$tr | 8;
  $bx$tr = $29;$by$tr = $30;$edge$tr = $31;$l$tr = $25;
 }
 $21 = $edge$tr & 4;
 $22 = ($21|0)==(0);
 if (!($22)) {
  _od_apply_filter_rows($c,$w,$bx$tr,$by$tr,1,$l$tr,$bsize,$bstride,$xdec,$ydec,1);
 }
 $23 = $edge$tr & 8;
 $24 = ($23|0)==(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 _od_apply_filter_cols($c,$w,$bx$tr,$by$tr,0,$l$tr,$bsize,$bstride,$xdec,$ydec,1);
 STACKTOP = sp;return;
}
function _generic_model_init($model) {
 $model = $model|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($model) + 384|0);
 HEAP32[$0>>2] = 64;
 $i$02 = 0;
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = $1&65535;
  $3 = (($model) + ($i$02<<5)|0);
  HEAP16[$3>>1] = $2;
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 << 1;
  $6 = $5&65535;
  $7 = ((($model) + ($i$02<<5)|0) + 2|0);
  HEAP16[$7>>1] = $6;
  $8 = HEAP32[$0>>2]|0;
  $9 = ($8*3)|0;
  $10 = $9&65535;
  $11 = ((($model) + ($i$02<<5)|0) + 4|0);
  HEAP16[$11>>1] = $10;
  $12 = HEAP32[$0>>2]|0;
  $13 = $12 << 2;
  $14 = $13&65535;
  $15 = ((($model) + ($i$02<<5)|0) + 6|0);
  HEAP16[$15>>1] = $14;
  $16 = HEAP32[$0>>2]|0;
  $17 = ($16*5)|0;
  $18 = $17&65535;
  $19 = ((($model) + ($i$02<<5)|0) + 8|0);
  HEAP16[$19>>1] = $18;
  $20 = HEAP32[$0>>2]|0;
  $21 = ($20*6)|0;
  $22 = $21&65535;
  $23 = ((($model) + ($i$02<<5)|0) + 10|0);
  HEAP16[$23>>1] = $22;
  $24 = HEAP32[$0>>2]|0;
  $25 = ($24*7)|0;
  $26 = $25&65535;
  $27 = ((($model) + ($i$02<<5)|0) + 12|0);
  HEAP16[$27>>1] = $26;
  $28 = HEAP32[$0>>2]|0;
  $29 = $28 << 3;
  $30 = $29&65535;
  $31 = ((($model) + ($i$02<<5)|0) + 14|0);
  HEAP16[$31>>1] = $30;
  $32 = HEAP32[$0>>2]|0;
  $33 = ($32*9)|0;
  $34 = $33&65535;
  $35 = ((($model) + ($i$02<<5)|0) + 16|0);
  HEAP16[$35>>1] = $34;
  $36 = HEAP32[$0>>2]|0;
  $37 = ($36*10)|0;
  $38 = $37&65535;
  $39 = ((($model) + ($i$02<<5)|0) + 18|0);
  HEAP16[$39>>1] = $38;
  $40 = HEAP32[$0>>2]|0;
  $41 = ($40*11)|0;
  $42 = $41&65535;
  $43 = ((($model) + ($i$02<<5)|0) + 20|0);
  HEAP16[$43>>1] = $42;
  $44 = HEAP32[$0>>2]|0;
  $45 = ($44*12)|0;
  $46 = $45&65535;
  $47 = ((($model) + ($i$02<<5)|0) + 22|0);
  HEAP16[$47>>1] = $46;
  $48 = HEAP32[$0>>2]|0;
  $49 = ($48*13)|0;
  $50 = $49&65535;
  $51 = ((($model) + ($i$02<<5)|0) + 24|0);
  HEAP16[$51>>1] = $50;
  $52 = HEAP32[$0>>2]|0;
  $53 = ($52*14)|0;
  $54 = $53&65535;
  $55 = ((($model) + ($i$02<<5)|0) + 26|0);
  HEAP16[$55>>1] = $54;
  $56 = HEAP32[$0>>2]|0;
  $57 = ($56*15)|0;
  $58 = $57&65535;
  $59 = ((($model) + ($i$02<<5)|0) + 28|0);
  HEAP16[$59>>1] = $58;
  $60 = HEAP32[$0>>2]|0;
  $61 = $60 << 4;
  $62 = $61&65535;
  $63 = ((($model) + ($i$02<<5)|0) + 30|0);
  HEAP16[$63>>1] = $62;
  $64 = (($i$02) + 1)|0;
  $exitcond = ($64|0)==(12);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $64;
  }
 }
 STACKTOP = sp;return;
}
function _log_ex($ex_q16) {
 $ex_q16 = $ex_q16|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_od_ilog($ex_q16)|0);
 $1 = ($0|0)<(15);
 if ($1) {
  $2 = Math_imul($ex_q16, $ex_q16)|0;
  $3 = $0 << 1;
  $4 = 2 << $3;
  $5 = ($2|0)>($4|0);
  $$sink = $5;
 } else {
  $6 = (($0) + -8)|0;
  $7 = $ex_q16 >> $6;
  $8 = Math_imul($7, $7)|0;
  $9 = ($8>>>0)>(32768);
  $$sink = $9;
 }
 $10 = $$sink&1;
 $11 = $0 << 1;
 $12 = (($11) + -33)|0;
 $13 = (($12) + ($10))|0;
 $14 = ($13|0)>(0);
 $15 = $14 ? $13 : 0;
 STACKTOP = sp;return ($15|0);
}
function _generic_model_update($model,$ex_q16,$x,$xs,$id,$integration) {
 $model = $model|0;
 $ex_q16 = $ex_q16|0;
 $x = $x|0;
 $xs = $xs|0;
 $id = $id|0;
 $integration = $integration|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $i$11 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($model) + ($id<<5)|0) + 30|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($model) + 384|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4))|0;
 $6 = ($5|0)>(32767);
 if ($6) {
  $i$02 = 0;
  while(1) {
   $7 = ((($model) + ($id<<5)|0) + ($i$02<<1)|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   $10 = $9 >>> 1;
   $11 = (($i$02) + 1)|0;
   $12 = (($11) + ($10))|0;
   $13 = $12&65535;
   HEAP16[$7>>1] = $13;
   $14 = (($i$02) + 1)|0;
   $exitcond = ($14|0)==(16);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $14;
   }
  }
 }
 $15 = ($xs|0)<(15);
 $16 = $15 ? $xs : 15;
 $17 = ($16|0)<(16);
 if ($17) {
  $i$11 = $16;
  while(1) {
   $18 = HEAP32[$3>>2]|0;
   $19 = ((($model) + ($id<<5)|0) + ($i$11<<1)|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = (($21) + ($18))|0;
   $23 = $22&65535;
   HEAP16[$19>>1] = $23;
   $24 = (($i$11) + 1)|0;
   $25 = ($24|0)<(16);
   if ($25) {
    $i$11 = $24;
   } else {
    break;
   }
  }
 }
 $26 = $x ^ 32767;
 $27 = ($x|0)>(32767);
 $28 = $27 ? $26 : 0;
 $29 = $28 ^ $x;
 $30 = (16 - ($integration))|0;
 $31 = $29 << $30;
 $32 = HEAP32[$ex_q16>>2]|0;
 $33 = $32 >> $integration;
 $34 = (($32) + ($31))|0;
 $35 = (($34) - ($33))|0;
 HEAP32[$ex_q16>>2] = $35;
 STACKTOP = sp;return;
}
function _od_decode_cdf_adapt($ec,$cdf,$n,$increment) {
 $ec = $ec|0;
 $cdf = $cdf|0;
 $n = $n|0;
 $increment = $increment|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0, $i$03 = 0, $i$11 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_od_ec_decode_cdf_unscaled($ec,$cdf,$n)|0);
 $1 = (($n) + -1)|0;
 $2 = (($cdf) + ($1<<1)|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + ($increment))|0;
 $6 = ($5|0)>(32767);
 $7 = ($n|0)>(0);
 $or$cond = $6 & $7;
 if ($or$cond) {
  $i$03 = 0;
  while(1) {
   $9 = (($cdf) + ($i$03<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = $11 >>> 1;
   $13 = (($i$03) + 1)|0;
   $14 = (($13) + ($12))|0;
   $15 = $14&65535;
   HEAP16[$9>>1] = $15;
   $16 = (($i$03) + 1)|0;
   $exitcond5 = ($16|0)==($n|0);
   if ($exitcond5) {
    break;
   } else {
    $i$03 = $16;
   }
  }
 }
 $8 = ($0|0)<($n|0);
 if ($8) {
  $i$11 = $0;
 } else {
  STACKTOP = sp;return ($0|0);
 }
 while(1) {
  $17 = (($cdf) + ($i$11<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = (($19) + ($increment))|0;
  $21 = $20&65535;
  HEAP16[$17>>1] = $21;
  $22 = (($i$11) + 1)|0;
  $exitcond = ($22|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $22;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _generic_decode($dec,$model,$max,$ex_q16,$integration) {
 $dec = $dec|0;
 $model = $model|0;
 $max = $max|0;
 $ex_q16 = $ex_q16|0;
 $integration = $integration|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsb$0 = 0, $lsb$1 = 0, $xs$0 = 0, $xs$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($max|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$ex_q16>>2]|0;
 $2 = (_log_ex($1)|0);
 $3 = (($2) + -5)|0;
 $4 = $3 >> 1;
 $5 = ($4|0)>(0);
 $6 = $5 ? $4 : 0;
 $7 = ($2|0)<(11);
 $8 = $7 ? $2 : 11;
 $9 = (($model) + ($8<<5)|0);
 $10 = 1 << $6;
 $11 = $10 >> 1;
 $12 = (($11) + ($max))|0;
 $13 = $12 >> $6;
 $14 = ($max|0)==(-1);
 if ($14) {
  $15 = (_od_ec_decode_cdf_unscaled($dec,$9,16)|0);
  $xs$0 = $15;
 } else {
  $16 = (($13) + 1)|0;
  $17 = $16 ^ 16;
  $18 = ($13|0)>(15);
  $19 = $18 ? $17 : 0;
  $20 = $19 ^ $16;
  $21 = (_od_ec_decode_cdf_unscaled($dec,$9,$20)|0);
  $xs$0 = $21;
 }
 $22 = ($xs$0|0)==(15);
 if ($22) {
  $23 = HEAP32[$ex_q16>>2]|0;
  $24 = $23 >> 7;
  $25 = (($24) + ($11))|0;
  $26 = $25 >> $6;
  $27 = $26 << 8;
  $28 = (($26) + 256)|0;
  $29 = (($27|0) / ($28|0))&-1;
  $30 = ($29|0)<(254);
  $31 = $30 ? $29 : 254;
  $32 = ($31|0)>(2);
  $33 = $32 ? $31 : 2;
  $34 = (($13) + -15)|0;
  $$ = $14 ? -1 : $34;
  $35 = (_laplace_decode_special($dec,$33,$$)|0);
  $36 = (($35) + ($xs$0))|0;
  $xs$1 = $36;
 } else {
  $xs$1 = $xs$0;
 }
 if ($5) {
  $37 = ($xs$1|0)==(0);
  $38 = $37&1;
  $39 = (($6) - ($38))|0;
  $40 = ($39|0)>(0);
  if ($40) {
   $41 = (_od_ec_dec_bits($dec,$39)|0);
   $lsb$0 = $41;
  } else {
   $lsb$0 = 0;
  }
  $42 = $38 ^ 1;
  $43 = (($6) + -1)|0;
  $44 = $42 << $43;
  $45 = (($lsb$0) - ($44))|0;
  $lsb$1 = $45;
 } else {
  $lsb$1 = 0;
 }
 $46 = $xs$1 << $6;
 $47 = (($lsb$1) + ($46))|0;
 _generic_model_update($model,$ex_q16,$47,$xs$1,$8,$integration);
 $$0 = $47;
 STACKTOP = sp;return ($$0|0);
}
function _daala_info_init($_info) {
 $_info = $_info|0;
 var $0 = 0, $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$_info+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP8[$_info>>0] = 0;
 $0 = (($_info) + 1|0);
 HEAP8[$0>>0] = 0;
 $1 = (($_info) + 2|0);
 HEAP8[$1>>0] = 0;
 $2 = (($_info) + 32|0);
 HEAP32[$2>>2] = 31;
 STACKTOP = sp;return;
}
function _daala_info_clear($_info) {
 $_info = $_info|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$_info+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _daala_comment_init($_dc) {
 $_dc = $_dc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$_dc+0>>2]=0|0;HEAP32[$_dc+4>>2]=0|0;HEAP32[$_dc+8>>2]=0|0;HEAP32[$_dc+12>>2]=0|0;
 STACKTOP = sp;return;
}
function _daala_comment_clear($_dc) {
 $_dc = $_dc|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($_dc|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($_dc) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = HEAP32[$_dc>>2]|0;
 if ($3) {
  $6 = $4;$ci$01 = 0;
  while(1) {
   $5 = (($6) + ($ci$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   _free($7);
   $8 = (($ci$01) + 1)|0;
   $9 = HEAP32[$1>>2]|0;
   $10 = ($8|0)<($9|0);
   $11 = HEAP32[$_dc>>2]|0;
   if ($10) {
    $6 = $11;$ci$01 = $8;
   } else {
    $$lcssa = $11;
    break;
   }
  }
 } else {
  $$lcssa = $4;
 }
 _free($$lcssa);
 $12 = (($_dc) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = (($_dc) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 _free($15);
 ;HEAP32[$_dc+0>>2]=0|0;HEAP32[$_dc+4>>2]=0|0;HEAP32[$_dc+8>>2]=0|0;HEAP32[$_dc+12>>2]=0|0;
 STACKTOP = sp;return;
}
function _daala_setup_free($setup) {
 $setup = $setup|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($setup|0)==(0|0);
 if (!($0)) {
  _free($setup);
 }
 STACKTOP = sp;return;
}
function _daala_decode_header_in($info,$dc,$ds,$op) {
 $info = $info|0;
 $dc = $dc|0;
 $ds = $ds|0;
 $op = $op|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $daala = 0, $obb = 0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0, $pli$06 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $obb = sp + 4|0;
 $daala = sp + 16|0;
 $tmp = sp;
 $0 = ($info|0)==(0|0);
 $1 = ($dc|0)==(0|0);
 $or$cond = $0 | $1;
 $2 = ($ds|0)==(0|0);
 $or$cond4 = $or$cond | $2;
 L1: do {
  if ($or$cond4) {
   $$0 = -1;
  } else {
   $3 = ($op|0)==(0|0);
   if ($3) {
    $$0 = -20;
   } else {
    $4 = (($op) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)<(0);
    if ($6) {
     $$0 = -1;
    } else {
     $7 = HEAP32[$op>>2]|0;
     _oggbyte_readinit($obb,$7,$5);
     $8 = (_oggbyte_read1($obb)|0);
     $9 = $8 & 128;
     $10 = ($9|0)==(0);
     if ($10) {
      $11 = (($info) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($12|0)>(0);
      if ($13) {
       $14 = (($dc) + 12|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = ($15|0)==(0|0);
       if (!($16)) {
        $17 = HEAP32[$ds>>2]|0;
        $18 = ($17|0)==(0|0);
        if (!($18)) {
         $$0 = 0;
         break;
        }
       }
      }
     }
     $19 = (_oggbyte_readcopy($obb,$daala,5)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $21 = (_memcmp($daala,1312,5)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       if ((($8|0) == 129)) {
        $89 = (($info) + 4|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($90|0)==(0);
        if ($91) {
         $$0 = -20;
         break;
        }
        $92 = (($dc) + 12|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($93|0)==(0|0);
        if (!($94)) {
         $$0 = -20;
         break;
        }
        $95 = (_od_comment_unpack($dc,$obb)|0);
        $96 = ($95|0)==(0);
        if ($96) {
         $$0 = 2;
         break;
        }
        _daala_comment_clear($dc);
        $$0 = -20;
        break;
       } else if ((($8|0) == 128)) {
        $23 = (($op) + 8|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = ($24|0)==(0);
        if ($25) {
         $$0 = -20;
         break;
        }
        $26 = (($info) + 4|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = ($27|0)==(0);
        if (!($28)) {
         $$0 = -20;
         break;
        }
        $29 = (_oggbyte_read1($obb)|0);
        $30 = ($29|0)<(0);
        if ($30) {
         $$0 = -20;
         break;
        }
        $31 = $29&255;
        HEAP8[$info>>0] = $31;
        $32 = (_oggbyte_read1($obb)|0);
        $33 = ($32|0)<(0);
        if ($33) {
         $$0 = -20;
         break;
        }
        $34 = $32&255;
        $35 = (($info) + 1|0);
        HEAP8[$35>>0] = $34;
        $36 = (_oggbyte_read1($obb)|0);
        $37 = ($36|0)<(0);
        if ($37) {
         $$0 = -20;
         break;
        }
        $38 = $36&255;
        $39 = (($info) + 2|0);
        HEAP8[$39>>0] = $38;
        $40 = HEAP8[$info>>0]|0;
        $41 = ($40<<24>>24)==(0);
        if (!($41)) {
         $$0 = -22;
         break;
        }
        $42 = HEAP8[$35>>0]|0;
        $43 = ($42<<24>>24)==(0);
        if (!($43)) {
         $$0 = -22;
         break;
        }
        $44 = (_oggbyte_read4($obb,$tmp)|0);
        $45 = ($44|0)==(0);
        if (!($45)) {
         $$0 = -20;
         break;
        }
        $46 = HEAP32[$tmp>>2]|0;
        $47 = ($46|0)<(0);
        if ($47) {
         $$0 = -20;
         break;
        }
        HEAP32[$26>>2] = $46;
        $48 = (_oggbyte_read4($obb,$tmp)|0);
        $49 = ($48|0)!=(0);
        $50 = HEAP32[$tmp>>2]|0;
        $51 = ($50|0)<(0);
        $or$cond3 = $49 & $51;
        if ($or$cond3) {
         $$0 = -20;
         break;
        }
        $52 = (($info) + 8|0);
        HEAP32[$52>>2] = $50;
        $53 = (($info) + 12|0);
        $54 = (_oggbyte_read4($obb,$53)|0);
        $55 = ($54|0)==(0);
        if (!($55)) {
         $$0 = -20;
         break;
        }
        $56 = (($info) + 16|0);
        $57 = (_oggbyte_read4($obb,$56)|0);
        $58 = ($57|0)==(0);
        if (!($58)) {
         $$0 = -20;
         break;
        }
        $59 = (($info) + 20|0);
        $60 = (_oggbyte_read4($obb,$59)|0);
        $61 = ($60|0)==(0);
        if (!($61)) {
         $$0 = -20;
         break;
        }
        $62 = (($info) + 24|0);
        $63 = (_oggbyte_read4($obb,$62)|0);
        $64 = ($63|0)==(0);
        if (!($64)) {
         $$0 = -20;
         break;
        }
        $65 = (($info) + 28|0);
        $66 = (_oggbyte_read4($obb,$65)|0);
        $67 = ($66|0)==(0);
        if (!($67)) {
         $$0 = -20;
         break;
        }
        $68 = (_oggbyte_read1($obb)|0);
        $69 = ($68>>>0)>(31);
        if ($69) {
         $$0 = -20;
         break;
        }
        $70 = (($info) + 32|0);
        HEAP32[$70>>2] = $68;
        $71 = (_oggbyte_read1($obb)|0);
        $72 = (($info) + 36|0);
        HEAP32[$72>>2] = $71;
        $$off = (($71) + -1)|0;
        $73 = ($$off>>>0)>(3);
        if ($73) {
         $$0 = -20;
         break;
        }
        $74 = HEAP32[$72>>2]|0;
        $75 = ($74|0)>(0);
        if ($75) {
         $pli$06 = 0;
        } else {
         $$0 = 3;
         break;
        }
        while(1) {
         $76 = (_oggbyte_read1($obb)|0);
         $77 = ($76|0)<(0);
         if ($77) {
          $$0 = -20;
          break L1;
         }
         $78 = ($76|0)!=(0);
         $79 = $78&1;
         $80 = ((($info) + ($pli$06<<1)|0) + 40|0);
         HEAP8[$80>>0] = $79;
         $81 = (_oggbyte_read1($obb)|0);
         $82 = ($81|0)<(0);
         if ($82) {
          $$0 = -20;
          break L1;
         }
         $83 = ($81|0)!=(0);
         $84 = $83&1;
         $85 = ((($info) + ($pli$06<<1)|0) + 41|0);
         HEAP8[$85>>0] = $84;
         $86 = (($pli$06) + 1)|0;
         $87 = HEAP32[$72>>2]|0;
         $88 = ($86|0)<($87|0);
         if ($88) {
          $pli$06 = $86;
         } else {
          $$0 = 3;
          break;
         }
        }
       } else if ((($8|0) == 130)) {
        $97 = (($info) + 4|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($98|0)==(0);
        if ($99) {
         $$0 = -20;
         break;
        }
        $100 = (($dc) + 12|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ($101|0)==(0|0);
        if ($102) {
         $$0 = -20;
         break;
        }
        $103 = HEAP32[$ds>>2]|0;
        $104 = ($103|0)==(0|0);
        if (!($104)) {
         $$0 = -20;
         break;
        }
        $105 = (_daala_setup_create()|0);
        HEAP32[$ds>>2] = $105;
        $$0 = 1;
        break;
       } else {
        $$0 = -20;
        break;
       }
      } else {
       $$0 = -20;
      }
     } else {
      $$0 = -20;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _od_comment_unpack($dc,$obb) {
 $dc = $dc|0;
 $obb = $obb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment = 0, $comment_len = 0, $i$03 = 0, $or$cond = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp + 8|0;
 $comment = sp + 4|0;
 $comment_len = sp;
 _daala_comment_init($dc);
 $0 = (($dc) + 12|0);
 $1 = (_daala_read_length_and_string($obb,0,$0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_oggbyte_read4($obb,$tmp)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = -20;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$tmp>>2]|0;
 $6 = ($5>>>0)>(536870911);
 if ($6) {
  $$0 = -20;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $5 << 2;
 $8 = (_oggbyte_bytes_left($obb)|0);
 $9 = ($7|0)>($8|0);
 if ($9) {
  $$0 = -20;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($dc) + 8|0);
 HEAP32[$10>>2] = $5;
 $11 = (_malloc($7)|0);
 $12 = (($dc) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$10>>2]|0;
 $14 = $13 << 2;
 $15 = (_malloc($14)|0);
 HEAP32[$dc>>2] = $15;
 $16 = HEAP32[$12>>2]|0;
 $17 = ($16|0)==(0|0);
 $18 = ($15|0)==(0|0);
 $or$cond = $17 | $18;
 if ($or$cond) {
  HEAP32[$10>>2] = 0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$10>>2]|0;
 $20 = ($19|0)>(0);
 if ($20) {
  $i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $21 = (_daala_read_length_and_string($obb,$comment_len,$comment)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   break;
  }
  $23 = HEAP32[$comment_len>>2]|0;
  $24 = HEAP32[$12>>2]|0;
  $25 = (($24) + ($i$03<<2)|0);
  HEAP32[$25>>2] = $23;
  $26 = HEAP32[$comment>>2]|0;
  $27 = HEAP32[$dc>>2]|0;
  $28 = (($27) + ($i$03<<2)|0);
  HEAP32[$28>>2] = $26;
  $29 = (($i$03) + 1)|0;
  $30 = HEAP32[$10>>2]|0;
  $31 = ($29|0)<($30|0);
  if ($31) {
   $i$03 = $29;
  } else {
   $$0 = 0;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$10>>2] = $i$03;
 $$0 = -20;
 STACKTOP = sp;return ($$0|0);
}
function _daala_setup_create() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(1)|0);
 STACKTOP = sp;return ($0|0);
}
function _daala_read_length_and_string($obb,$lenp,$strp) {
 $obb = $obb|0;
 $lenp = $lenp|0;
 $strp = $strp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $len = sp;
 $0 = (_oggbyte_read4($obb,$len)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[$len>>2]|0;
  $3 = ($2|0)<(0);
  if ($3) {
   $$0 = -20;
  } else {
   $4 = (_oggbyte_bytes_left($obb)|0);
   $5 = ($2|0)>($4|0);
   if ($5) {
    $$0 = -20;
   } else {
    $6 = HEAP32[$len>>2]|0;
    $7 = (($6) + 1)|0;
    $8 = (_malloc($7)|0);
    $9 = ($8|0)==(0|0);
    if ($9) {
     $$0 = -1;
    } else {
     $10 = HEAP32[$len>>2]|0;
     $11 = (($8) + ($10)|0);
     HEAP8[$11>>0] = 0;
     $12 = HEAP32[$len>>2]|0;
     (_oggbyte_readcopy($obb,$8,$12)|0);
     $13 = ($lenp|0)==(0|0);
     if (!($13)) {
      $14 = HEAP32[$len>>2]|0;
      HEAP32[$lenp>>2] = $14;
     }
     HEAP32[$strp>>2] = $8;
     $$0 = 0;
    }
   }
  }
 } else {
  $$0 = -20;
 }
 STACKTOP = sp;return ($$0|0);
}
function _od_ilog($_v) {
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_ctlz_i32(($_v|0))|0);
 $1 = (32 - ($0))|0;
 $2 = ($_v|0)!=(0);
 $3 = $2 ? $1 : 0;
 STACKTOP = sp;return ($3|0);
}
function _od_calloc_2d($_height,$_width,$_sz) {
 $_height = $_height|0;
 $_width = $_width|0;
 $_sz = $_sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $datptr$03 = 0, $i$01 = 0, $or$cond = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $_height << 2;
 $1 = Math_imul($_sz, $_width)|0;
 $2 = Math_imul($1, $_height)|0;
 $3 = (($2) + ($0))|0;
 $4 = (_calloc($3,1)|0);
 $5 = ($4|0)==(0|0);
 $6 = ($_height|0)==(0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  STACKTOP = sp;return ($4|0);
 }
 $7 = (($4) + ($0)|0);
 $datptr$03 = $7;$i$01 = $_height;$p$02 = $4;
 while(1) {
  $8 = (($i$01) + -1)|0;
  HEAP32[$p$02>>2] = $datptr$03;
  $9 = (($p$02) + 4|0);
  $10 = (($datptr$03) + ($1)|0);
  $11 = ($8|0)==(0);
  if ($11) {
   break;
  } else {
   $datptr$03 = $10;$i$01 = $8;$p$02 = $9;
  }
 }
 STACKTOP = sp;return ($4|0);
}
function _od_free_2d($_ptr) {
 $_ptr = $_ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($_ptr);
 STACKTOP = sp;return;
}
function _oggbyte_readinit($_b,$_buf,$_bytes) {
 $_b = $_b|0;
 $_buf = $_buf|0;
 $_bytes = $_bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $_b;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($_b) + 4|0);
 HEAP32[$4>>2] = $_buf;
 HEAP32[$_b>>2] = $_buf;
 $5 = (($_b) + 8|0);
 HEAP32[$5>>2] = $_bytes;
 STACKTOP = sp;return;
}
function _oggbyte_read1($_b) {
 $_b = $_b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($_b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$_b>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = (($_b) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($1) + 1|0);
 HEAP32[$0>>2] = $9;
 $10 = HEAP8[$1>>0]|0;
 $11 = $10&255;
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _oggbyte_read4($_b,$_val) {
 $_b = $_b|0;
 $_val = $_val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$_b>>2]|0;
 $1 = (($_b) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 $4 = (($_b) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = ($6>>>0)>($3>>>0);
 if (!($7)) {
  $28 = (($5) + 1|0);
  HEAP32[$4>>2] = $28;
  $29 = HEAP8[$5>>0]|0;
  $30 = $29&255;
  HEAP32[$_val>>2] = $30;
  $31 = HEAP32[$4>>2]|0;
  $32 = (($31) + 1|0);
  HEAP32[$4>>2] = $32;
  $33 = HEAP8[$31>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = HEAP32[$_val>>2]|0;
  $37 = $35 | $36;
  HEAP32[$_val>>2] = $37;
  $38 = HEAP32[$4>>2]|0;
  $39 = (($38) + 1|0);
  HEAP32[$4>>2] = $39;
  $40 = HEAP8[$38>>0]|0;
  $41 = $40&255;
  $42 = $41 << 16;
  $43 = HEAP32[$_val>>2]|0;
  $44 = $42 | $43;
  HEAP32[$_val>>2] = $44;
  $45 = HEAP32[$4>>2]|0;
  $46 = (($45) + 1|0);
  HEAP32[$4>>2] = $46;
  $47 = HEAP8[$45>>0]|0;
  $48 = $47&255;
  $49 = $48 << 24;
  $50 = HEAP32[$_val>>2]|0;
  $51 = $49 | $50;
  HEAP32[$_val>>2] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($5>>>0)<($3>>>0);
 if (!($8)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($5) + 1|0);
 HEAP32[$4>>2] = $9;
 $10 = HEAP8[$5>>0]|0;
 $11 = $10&255;
 HEAP32[$_val>>2] = $11;
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12>>>0)<($3>>>0);
 if (!($13)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($12) + 1|0);
 HEAP32[$4>>2] = $14;
 $15 = HEAP8[$12>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = HEAP32[$_val>>2]|0;
 $19 = $17 | $18;
 HEAP32[$_val>>2] = $19;
 $20 = HEAP32[$4>>2]|0;
 $21 = ($20>>>0)<($3>>>0);
 if (!($21)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = (($20) + 1|0);
 HEAP32[$4>>2] = $22;
 $23 = HEAP8[$20>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = HEAP32[$_val>>2]|0;
 $27 = $25 | $26;
 HEAP32[$_val>>2] = $27;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _oggbyte_readcopy($_b,$_dest,$_bytes) {
 $_b = $_b|0;
 $_dest = $_dest|0;
 $_bytes = $_bytes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($_b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$_b>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($_b) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($3))|0;
 $8 = (($7) + ($6))|0;
 $9 = ($8>>>0)<($_bytes>>>0);
 if ($9) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($_dest|0),($1|0),($_bytes|0))|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + ($_bytes)|0);
 HEAP32[$0>>2] = $11;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _oggbyte_bytes($_b) {
 $_b = $_b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($_b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$_b>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 STACKTOP = sp;return ($5|0);
}
function _oggbyte_bytes_left($_b) {
 $_b = $_b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($_b) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_oggbyte_bytes($_b)|0);
 $3 = (($1) - ($2))|0;
 STACKTOP = sp;return ($3|0);
}
function _od_intra_pred4x4_mult($pred,$pred_stride,$blocks,$strides,$mode) {
 $pred = $pred|0;
 $pred_stride = $pred_stride|0;
 $blocks = $blocks|0;
 $strides = $strides|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $index$012 = 0, $index$2$lcssa = 0, $index$2$lcssa$1 = 0, $index$2$lcssa$2 = 0, $index$2$lcssa$3 = 0, $index$24 = 0;
 var $index$24$1 = 0, $index$24$2 = 0, $index$24$3 = 0, $j$010 = 0, $k$01 = 0, $k$01$1 = 0, $k$01$2 = 0, $k$01$3 = 0, $scevgep = 0, $scevgep$1 = 0, $scevgep$2 = 0, $scevgep$3 = 0, $scevgep15 = 0, $scevgep15$1 = 0, $scevgep15$2 = 0, $scevgep15$3 = 0, $sum$0$lcssa = 0.0, $sum$0$lcssa$1 = 0.0, $sum$0$lcssa$2 = 0.0, $sum$0$lcssa$3 = 0.0;
 var $sum$02 = 0.0, $sum$02$1 = 0.0, $sum$02$2 = 0.0, $sum$02$3 = 0.0, $weights$011 = 0, $weights$2$lcssa = 0, $weights$2$lcssa$1 = 0, $weights$2$lcssa$2 = 0, $weights$2$lcssa$3 = 0, $weights$23 = 0, $weights$23$1 = 0, $weights$23$2 = 0, $weights$23$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (8528 + ($mode<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (7248 + ($1<<1)|0);
 $3 = (2128 + ($1<<3)|0);
 $index$012 = $2;$j$010 = 0;$weights$011 = $3;
 while(1) {
  $4 = Math_imul($j$010, $pred_stride)|0;
  $5 = ((1488 + ($mode<<6)|0) + ($j$010<<4)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>(0);
  if ($7) {
   $scevgep = (($weights$011) + ($6<<3)|0);
   $index$24 = $index$012;$k$01 = $6;$sum$02 = 0.0;$weights$23 = $weights$011;
   while(1) {
    $8 = (($k$01) + -1)|0;
    $9 = HEAP16[$index$24>>1]|0;
    $10 = $9&65535;
    $11 = $10 & 3;
    $12 = $10 >>> 2;
    $13 = $12 & 3;
    $14 = $10 >>> 4;
    $15 = (($strides) + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = Math_imul($13, $16)|0;
    $18 = (($17) + ($11))|0;
    $19 = (($blocks) + ($14<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($18<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (+($22|0));
    $24 = +HEAPF64[$weights$23>>3];
    $25 = $23 * $24;
    $26 = $sum$02 + $25;
    $27 = (($index$24) + 2|0);
    $28 = (($weights$23) + 8|0);
    $29 = ($8|0)>(0);
    if ($29) {
     $index$24 = $27;$k$01 = $8;$sum$02 = $26;$weights$23 = $28;
    } else {
     break;
    }
   }
   $scevgep15 = (($index$012) + ($6<<1)|0);
   $index$2$lcssa = $scevgep15;$sum$0$lcssa = $26;$weights$2$lcssa = $scevgep;
  } else {
   $index$2$lcssa = $index$012;$sum$0$lcssa = 0.0;$weights$2$lcssa = $weights$011;
  }
  $30 = (($pred) + ($4<<3)|0);
  HEAPF64[$30>>3] = $sum$0$lcssa;
  $31 = (((1488 + ($mode<<6)|0) + ($j$010<<4)|0) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)>(0);
  if ($33) {
   $scevgep$1 = (($weights$2$lcssa) + ($32<<3)|0);
   $index$24$1 = $index$2$lcssa;$k$01$1 = $32;$sum$02$1 = 0.0;$weights$23$1 = $weights$2$lcssa;
   while(1) {
    $34 = (($k$01$1) + -1)|0;
    $35 = HEAP16[$index$24$1>>1]|0;
    $36 = $35&65535;
    $37 = $36 & 3;
    $38 = $36 >>> 2;
    $39 = $38 & 3;
    $40 = $36 >>> 4;
    $41 = (($strides) + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = Math_imul($39, $42)|0;
    $44 = (($43) + ($37))|0;
    $45 = (($blocks) + ($40<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($44<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (+($48|0));
    $50 = +HEAPF64[$weights$23$1>>3];
    $51 = $49 * $50;
    $52 = $sum$02$1 + $51;
    $53 = (($index$24$1) + 2|0);
    $54 = (($weights$23$1) + 8|0);
    $55 = ($34|0)>(0);
    if ($55) {
     $index$24$1 = $53;$k$01$1 = $34;$sum$02$1 = $52;$weights$23$1 = $54;
    } else {
     break;
    }
   }
   $scevgep15$1 = (($index$2$lcssa) + ($32<<1)|0);
   $index$2$lcssa$1 = $scevgep15$1;$sum$0$lcssa$1 = $52;$weights$2$lcssa$1 = $scevgep$1;
  } else {
   $index$2$lcssa$1 = $index$2$lcssa;$sum$0$lcssa$1 = 0.0;$weights$2$lcssa$1 = $weights$2$lcssa;
  }
  $56 = (($4) + 1)|0;
  $57 = (($pred) + ($56<<3)|0);
  HEAPF64[$57>>3] = $sum$0$lcssa$1;
  $58 = (((1488 + ($mode<<6)|0) + ($j$010<<4)|0) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)>(0);
  if ($60) {
   $scevgep$2 = (($weights$2$lcssa$1) + ($59<<3)|0);
   $index$24$2 = $index$2$lcssa$1;$k$01$2 = $59;$sum$02$2 = 0.0;$weights$23$2 = $weights$2$lcssa$1;
   while(1) {
    $61 = (($k$01$2) + -1)|0;
    $62 = HEAP16[$index$24$2>>1]|0;
    $63 = $62&65535;
    $64 = $63 & 3;
    $65 = $63 >>> 2;
    $66 = $65 & 3;
    $67 = $63 >>> 4;
    $68 = (($strides) + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = Math_imul($66, $69)|0;
    $71 = (($70) + ($64))|0;
    $72 = (($blocks) + ($67<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + ($71<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (+($75|0));
    $77 = +HEAPF64[$weights$23$2>>3];
    $78 = $76 * $77;
    $79 = $sum$02$2 + $78;
    $80 = (($index$24$2) + 2|0);
    $81 = (($weights$23$2) + 8|0);
    $82 = ($61|0)>(0);
    if ($82) {
     $index$24$2 = $80;$k$01$2 = $61;$sum$02$2 = $79;$weights$23$2 = $81;
    } else {
     break;
    }
   }
   $scevgep15$2 = (($index$2$lcssa$1) + ($59<<1)|0);
   $index$2$lcssa$2 = $scevgep15$2;$sum$0$lcssa$2 = $79;$weights$2$lcssa$2 = $scevgep$2;
  } else {
   $index$2$lcssa$2 = $index$2$lcssa$1;$sum$0$lcssa$2 = 0.0;$weights$2$lcssa$2 = $weights$2$lcssa$1;
  }
  $83 = (($4) + 2)|0;
  $84 = (($pred) + ($83<<3)|0);
  HEAPF64[$84>>3] = $sum$0$lcssa$2;
  $85 = (((1488 + ($mode<<6)|0) + ($j$010<<4)|0) + 12|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)>(0);
  if ($87) {
   $scevgep$3 = (($weights$2$lcssa$2) + ($86<<3)|0);
   $index$24$3 = $index$2$lcssa$2;$k$01$3 = $86;$sum$02$3 = 0.0;$weights$23$3 = $weights$2$lcssa$2;
   while(1) {
    $88 = (($k$01$3) + -1)|0;
    $89 = HEAP16[$index$24$3>>1]|0;
    $90 = $89&65535;
    $91 = $90 & 3;
    $92 = $90 >>> 2;
    $93 = $92 & 3;
    $94 = $90 >>> 4;
    $95 = (($strides) + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = Math_imul($93, $96)|0;
    $98 = (($97) + ($91))|0;
    $99 = (($blocks) + ($94<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + ($98<<2)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (+($102|0));
    $104 = +HEAPF64[$weights$23$3>>3];
    $105 = $103 * $104;
    $106 = $sum$02$3 + $105;
    $107 = (($index$24$3) + 2|0);
    $108 = (($weights$23$3) + 8|0);
    $109 = ($88|0)>(0);
    if ($109) {
     $index$24$3 = $107;$k$01$3 = $88;$sum$02$3 = $106;$weights$23$3 = $108;
    } else {
     break;
    }
   }
   $scevgep15$3 = (($index$2$lcssa$2) + ($86<<1)|0);
   $index$2$lcssa$3 = $scevgep15$3;$sum$0$lcssa$3 = $106;$weights$2$lcssa$3 = $scevgep$3;
  } else {
   $index$2$lcssa$3 = $index$2$lcssa$2;$sum$0$lcssa$3 = 0.0;$weights$2$lcssa$3 = $weights$2$lcssa$2;
  }
  $110 = (($4) + 3)|0;
  $111 = (($pred) + ($110<<3)|0);
  HEAPF64[$111>>3] = $sum$0$lcssa$3;
  $112 = (($j$010) + 1)|0;
  $exitcond = ($112|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $index$012 = $index$2$lcssa$3;$j$010 = $112;$weights$011 = $weights$2$lcssa$3;
  }
 }
 STACKTOP = sp;return;
}
function _od_intra_pred8x8_mult($pred,$pred_stride,$blocks,$strides,$mode) {
 $pred = $pred|0;
 $pred_stride = $pred_stride|0;
 $blocks = $blocks|0;
 $strides = $strides|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond16 = 0, $i$07 = 0, $index$012 = 0, $index$19 = 0, $index$2$lcssa = 0;
 var $index$24 = 0, $j$010 = 0, $k$01 = 0, $scevgep = 0, $scevgep15 = 0, $sum$0$lcssa = 0.0, $sum$02 = 0.0, $weights$011 = 0, $weights$18 = 0, $weights$2$lcssa = 0, $weights$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (36728 + ($mode<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (31608 + ($1<<1)|0);
 $3 = (11128 + ($1<<3)|0);
 $index$012 = $2;$j$010 = 0;$weights$011 = $3;
 while(1) {
  $4 = Math_imul($j$010, $pred_stride)|0;
  $i$07 = 0;$index$19 = $index$012;$weights$18 = $weights$011;
  while(1) {
   $5 = (((8568 + ($mode<<8)|0) + ($j$010<<5)|0) + ($i$07<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(0);
   if ($7) {
    $scevgep = (($weights$18) + ($6<<3)|0);
    $index$24 = $index$19;$k$01 = $6;$sum$02 = 0.0;$weights$23 = $weights$18;
    while(1) {
     $8 = (($k$01) + -1)|0;
     $9 = HEAP16[$index$24>>1]|0;
     $10 = $9&65535;
     $11 = $10 & 7;
     $12 = $10 >>> 3;
     $13 = $12 & 7;
     $14 = $10 >>> 6;
     $15 = (($strides) + ($14<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = Math_imul($13, $16)|0;
     $18 = (($17) + ($11))|0;
     $19 = (($blocks) + ($14<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + ($18<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (+($22|0));
     $24 = +HEAPF64[$weights$23>>3];
     $25 = $23 * $24;
     $26 = $sum$02 + $25;
     $27 = (($index$24) + 2|0);
     $28 = (($weights$23) + 8|0);
     $29 = ($8|0)>(0);
     if ($29) {
      $index$24 = $27;$k$01 = $8;$sum$02 = $26;$weights$23 = $28;
     } else {
      break;
     }
    }
    $scevgep15 = (($index$19) + ($6<<1)|0);
    $index$2$lcssa = $scevgep15;$sum$0$lcssa = $26;$weights$2$lcssa = $scevgep;
   } else {
    $index$2$lcssa = $index$19;$sum$0$lcssa = 0.0;$weights$2$lcssa = $weights$18;
   }
   $30 = (($i$07) + ($4))|0;
   $31 = (($pred) + ($30<<3)|0);
   HEAPF64[$31>>3] = $sum$0$lcssa;
   $32 = (($i$07) + 1)|0;
   $exitcond = ($32|0)==(8);
   if ($exitcond) {
    break;
   } else {
    $i$07 = $32;$index$19 = $index$2$lcssa;$weights$18 = $weights$2$lcssa;
   }
  }
  $33 = (($j$010) + 1)|0;
  $exitcond16 = ($33|0)==(8);
  if ($exitcond16) {
   break;
  } else {
   $index$012 = $index$2$lcssa;$j$010 = $33;$weights$011 = $weights$2$lcssa;
  }
 }
 STACKTOP = sp;return;
}
function _od_intra_pred16x16_mult($pred,$pred_stride,$blocks,$strides,$mode) {
 $pred = $pred|0;
 $pred_stride = $pred_stride|0;
 $blocks = $blocks|0;
 $strides = $strides|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond16 = 0, $i$07 = 0, $index$012 = 0, $index$19 = 0, $index$2$lcssa = 0;
 var $index$24 = 0, $j$010 = 0, $k$01 = 0, $scevgep = 0, $scevgep15 = 0, $sum$0$lcssa = 0.0, $sum$02 = 0.0, $weights$011 = 0, $weights$18 = 0, $weights$2$lcssa = 0, $weights$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (149408 + ($mode<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (128928 + ($1<<1)|0);
 $3 = (47008 + ($1<<3)|0);
 $index$012 = $2;$j$010 = 0;$weights$011 = $3;
 while(1) {
  $4 = Math_imul($j$010, $pred_stride)|0;
  $i$07 = 0;$index$19 = $index$012;$weights$18 = $weights$011;
  while(1) {
   $5 = (((36768 + ($mode<<10)|0) + ($j$010<<6)|0) + ($i$07<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(0);
   if ($7) {
    $scevgep = (($weights$18) + ($6<<3)|0);
    $index$24 = $index$19;$k$01 = $6;$sum$02 = 0.0;$weights$23 = $weights$18;
    while(1) {
     $8 = (($k$01) + -1)|0;
     $9 = HEAP16[$index$24>>1]|0;
     $10 = $9&65535;
     $11 = $10 & 15;
     $12 = $10 >>> 4;
     $13 = $12 & 15;
     $14 = $10 >>> 8;
     $15 = (($strides) + ($14<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = Math_imul($13, $16)|0;
     $18 = (($17) + ($11))|0;
     $19 = (($blocks) + ($14<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + ($18<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (+($22|0));
     $24 = +HEAPF64[$weights$23>>3];
     $25 = $23 * $24;
     $26 = $sum$02 + $25;
     $27 = (($index$24) + 2|0);
     $28 = (($weights$23) + 8|0);
     $29 = ($8|0)>(0);
     if ($29) {
      $index$24 = $27;$k$01 = $8;$sum$02 = $26;$weights$23 = $28;
     } else {
      break;
     }
    }
    $scevgep15 = (($index$19) + ($6<<1)|0);
    $index$2$lcssa = $scevgep15;$sum$0$lcssa = $26;$weights$2$lcssa = $scevgep;
   } else {
    $index$2$lcssa = $index$19;$sum$0$lcssa = 0.0;$weights$2$lcssa = $weights$18;
   }
   $30 = (($i$07) + ($4))|0;
   $31 = (($pred) + ($30<<3)|0);
   HEAPF64[$31>>3] = $sum$0$lcssa;
   $32 = (($i$07) + 1)|0;
   $exitcond = ($32|0)==(16);
   if ($exitcond) {
    break;
   } else {
    $i$07 = $32;$index$19 = $index$2$lcssa;$weights$18 = $weights$2$lcssa;
   }
  }
  $33 = (($j$010) + 1)|0;
  $exitcond16 = ($33|0)==(16);
  if ($exitcond16) {
   break;
  } else {
   $index$012 = $index$2$lcssa;$j$010 = $33;$weights$011 = $weights$2$lcssa;
  }
 }
 STACKTOP = sp;return;
}
function _od_chroma_pred($p,$c,$l,$stride,$bx,$by,$ln,$xdec,$ydec,$bsize,$bstride,$weights_q8) {
 $p = $p|0;
 $c = $c|0;
 $l = $l|0;
 $stride = $stride|0;
 $bx = $bx|0;
 $by = $by|0;
 $ln = $ln|0;
 $xdec = $xdec|0;
 $ydec = $ydec|0;
 $bsize = $bsize|0;
 $bstride = $bstride|0;
 $weights_q8 = $weights_q8|0;
 var $$alpha_q8$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alpha_q8$0 = 0, $bi$013 = 0, $cc_sum_q8$014 = 0, $exitcond = 0, $exitcond18 = 0, $exitcond24 = 0, $i$06 = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0, $j$05 = 0, $lc_sum_q8$015 = 0, $neg = 0, $neg2 = 0, $neg4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (11 - ($ln))|0;
 $1 = $stride << 2;
 $54 = 0;$55 = 0;$58 = 0;$59 = 0;$bi$013 = 0;$cc_sum_q8$014 = 0;$lc_sum_q8$015 = 0;
 while(1) {
  $2 = (($weights_q8) + ($bi$013<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (1440 + ($bi$013<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($bx))|0;
  $7 = (1456 + ($bi$013<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($by))|0;
  $10 = $9 << $ydec;
  $11 = $10 >> 1;
  $12 = Math_imul($11, $bstride)|0;
  $13 = $6 << $xdec;
  $14 = $13 >> 1;
  $15 = (($12) + ($14))|0;
  $16 = (($bsize) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) - ($xdec))|0;
  $20 = $19 >> 31;
  $21 = $20 ^ -1;
  $22 = $19 & $21;
  $23 = $6 >> $22;
  $24 = $23 << $22;
  $25 = $9 >> $22;
  $26 = $25 << $22;
  $27 = (3 - ($22))|0;
  $28 = Math_imul($1, $26)|0;
  $29 = $24 << 2;
  $30 = (($28) + ($29))|0;
  $31 = (($l) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($27) - ($xdec))|0;
  $34 = $32 << $33;
  $35 = (($c) + ($30<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 << $27;
  $38 = ($34|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = ($3|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = ($37|0)<(0);
  $43 = $42 << 31 >> 31;
  $44 = (___muldi3(($37|0),($43|0),($3|0),($41|0))|0);
  $45 = tempRet0;
  $46 = (___muldi3(($34|0),($39|0),($3|0),($41|0))|0);
  $47 = tempRet0;
  $48 = (___muldi3(($44|0),($45|0),($34|0),($39|0))|0);
  $49 = tempRet0;
  $50 = (___muldi3(($46|0),($47|0),($34|0),($39|0))|0);
  $51 = tempRet0;
  $52 = Math_imul($37, $3)|0;
  $53 = Math_imul($34, $3)|0;
  $56 = (_i64Add(($48|0),($49|0),($54|0),($55|0))|0);
  $57 = tempRet0;
  $60 = (_i64Add(($50|0),($51|0),($58|0),($59|0))|0);
  $61 = tempRet0;
  $62 = $30 | 1;
  $63 = (($l) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64 << $33;
  $66 = (($c) + ($62<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $67 << $27;
  $69 = ($65|0)<(0);
  $70 = $69 << 31 >> 31;
  $71 = (___muldi3(($65|0),($70|0),($3|0),($41|0))|0);
  $72 = tempRet0;
  $73 = (___muldi3(($71|0),($72|0),($65|0),($70|0))|0);
  $74 = tempRet0;
  $75 = (_i64Add(($73|0),($74|0),($60|0),($61|0))|0);
  $76 = tempRet0;
  $77 = ($68|0)<(0);
  $78 = $77 << 31 >> 31;
  $79 = (___muldi3(($65|0),($70|0),($3|0),($41|0))|0);
  $80 = tempRet0;
  $81 = (___muldi3(($79|0),($80|0),($68|0),($78|0))|0);
  $82 = tempRet0;
  $83 = (_i64Add(($81|0),($82|0),($56|0),($57|0))|0);
  $84 = tempRet0;
  $85 = (($30) + ($stride))|0;
  $86 = (($l) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 << $33;
  $89 = (($c) + ($85<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 << $27;
  $92 = ($88|0)<(0);
  $93 = $92 << 31 >> 31;
  $94 = (___muldi3(($88|0),($93|0),($3|0),($41|0))|0);
  $95 = tempRet0;
  $96 = (___muldi3(($94|0),($95|0),($88|0),($93|0))|0);
  $97 = tempRet0;
  $98 = (_i64Add(($96|0),($97|0),($75|0),($76|0))|0);
  $99 = tempRet0;
  $100 = ($91|0)<(0);
  $101 = $100 << 31 >> 31;
  $102 = (___muldi3(($88|0),($93|0),($3|0),($41|0))|0);
  $103 = tempRet0;
  $104 = (___muldi3(($102|0),($103|0),($91|0),($101|0))|0);
  $105 = tempRet0;
  $106 = (_i64Add(($104|0),($105|0),($83|0),($84|0))|0);
  $107 = tempRet0;
  $108 = (($30) + ($stride))|0;
  $109 = (($108) + 1)|0;
  $110 = (($l) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 << $33;
  $113 = (($c) + ($109<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $114 << $27;
  $116 = ($112|0)<(0);
  $117 = $116 << 31 >> 31;
  $118 = (___muldi3(($112|0),($117|0),($3|0),($41|0))|0);
  $119 = tempRet0;
  $120 = (___muldi3(($118|0),($119|0),($112|0),($117|0))|0);
  $121 = tempRet0;
  $122 = (_i64Add(($120|0),($121|0),($98|0),($99|0))|0);
  $123 = tempRet0;
  $124 = ($115|0)<(0);
  $125 = $124 << 31 >> 31;
  $126 = (___muldi3(($112|0),($117|0),($3|0),($41|0))|0);
  $127 = tempRet0;
  $128 = (___muldi3(($126|0),($127|0),($115|0),($125|0))|0);
  $129 = tempRet0;
  $130 = (_i64Add(($128|0),($129|0),($106|0),($107|0))|0);
  $131 = tempRet0;
  $132 = (($53) + ($lc_sum_q8$015))|0;
  $133 = (($52) + ($cc_sum_q8$014))|0;
  $134 = (($bi$013) + 1)|0;
  $exitcond24 = ($134|0)==(3);
  if ($exitcond24) {
   break;
  } else {
   $54 = $130;$55 = $131;$58 = $122;$59 = $123;$bi$013 = $134;$cc_sum_q8$014 = $133;$lc_sum_q8$015 = $132;
  }
 }
 $135 = (3 - ($ln))|0;
 $136 = $stride << 2;
 $137 = Math_imul($136, $by)|0;
 $138 = $bx << 2;
 $139 = (($137) + ($138))|0;
 $140 = (($l) + ($139<<2)|0);
 $141 = ($132|0)<(0);
 $142 = $141 << 31 >> 31;
 $143 = (___muldi3(($132|0),($142|0),($132|0),($142|0))|0);
 $144 = tempRet0;
 $145 = (_i64Add(($143|0),($144|0),128,0)|0);
 $146 = tempRet0;
 $147 = (_bitshift64Lshr(($145|0),($146|0),8)|0);
 $148 = tempRet0;
 $149 = (_i64Subtract(($122|0),($123|0),($147|0),($148|0))|0);
 $150 = tempRet0;
 $151 = ($133|0)<(0);
 $152 = $151 << 31 >> 31;
 $153 = (___muldi3(($132|0),($142|0),($133|0),($152|0))|0);
 $154 = tempRet0;
 $155 = (_i64Add(($153|0),($154|0),128,0)|0);
 $156 = tempRet0;
 $157 = (_bitshift64Ashr(($155|0),($156|0),8)|0);
 $158 = tempRet0;
 $159 = (_i64Subtract(($130|0),($131|0),($157|0),($158|0))|0);
 $160 = tempRet0;
 $ispos = ($149|0)>(-1);
 $neg = (0 - ($149))|0;
 $161 = $ispos ? $149 : $neg;
 $ispos1 = ($159|0)>(-1);
 $neg2 = (0 - ($159))|0;
 $162 = $ispos1 ? $159 : $neg2;
 $163 = $162 >> 1;
 $164 = ($161|0)>($163|0);
 if ($164) {
  $165 = (_bitshift64Shl(($159|0),($160|0),8)|0);
  $166 = tempRet0;
  $167 = (___divdi3(($165|0),($166|0),($149|0),($150|0))|0);
  $168 = tempRet0;
  $alpha_q8$0 = $167;
 } else {
  $alpha_q8$0 = 0;
 }
 $ispos3 = ($alpha_q8$0|0)>(-1);
 $neg4 = (0 - ($alpha_q8$0))|0;
 $169 = $ispos3 ? $alpha_q8$0 : $neg4;
 $170 = ($169|0)>(128);
 $$alpha_q8$0 = $170 ? 0 : $alpha_q8$0;
 $171 = Math_imul($$alpha_q8$0, $132)|0;
 $172 = (($171) + 128)|0;
 $173 = $172 >> 8;
 $174 = (($135) - ($xdec))|0;
 $175 = $$alpha_q8$0 << $174;
 $176 = HEAP32[$140>>2]|0;
 $177 = Math_imul($175, $176)|0;
 $178 = (($0) + -1)|0;
 $179 = 1 << $178;
 $180 = (($133) + ($179))|0;
 $181 = (($180) + ($177))|0;
 $182 = (($181) - ($173))|0;
 $183 = $182 >> $0;
 HEAP32[$p>>2] = $183;
 $184 = (($ln) + 2)|0;
 $185 = 1 << $184;
 $186 = ($185|0)>(0);
 if ($186) {
  $i$06 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $187 = ($i$06|0)==(0);
  $188 = $187&1;
  $189 = ($188|0)<($185|0);
  if ($189) {
   $190 = Math_imul($i$06, $stride)|0;
   $191 = (($190) + ($139))|0;
   $192 = $i$06 << $184;
   $j$05 = $188;
   while(1) {
    $$sum = (($191) + ($j$05))|0;
    $193 = (($l) + ($$sum<<2)|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = Math_imul($194, $175)|0;
    $196 = (($195) + ($179))|0;
    $197 = $196 >> $0;
    $198 = (($j$05) + ($192))|0;
    $199 = (($p) + ($198<<2)|0);
    HEAP32[$199>>2] = $197;
    $200 = (($j$05) + 1)|0;
    $exitcond = ($200|0)==($185|0);
    if ($exitcond) {
     break;
    } else {
     $j$05 = $200;
    }
   }
  }
  $201 = (($i$06) + 1)|0;
  $exitcond18 = ($201|0)==($185|0);
  if ($exitcond18) {
   break;
  } else {
   $i$06 = $201;
  }
 }
 STACKTOP = sp;return;
}
function _od_intra_pred4x4_get($_out,$_neighbors,$_neighbor_strides,$_mode) {
 $_out = $_out|0;
 $_neighbors = $_neighbors|0;
 $_neighbor_strides = $_neighbor_strides|0;
 $_mode = $_mode|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $p = sp;
 _od_intra_pred4x4_mult($p,4,$_neighbors,$_neighbor_strides,$_mode);
 $0 = +HEAPF64[$p>>3];
 $1 = $0 + 0.5;
 $2 = (+Math_floor((+$1)));
 $3 = (~~(($2)));
 HEAP32[$_out>>2] = $3;
 $4 = (($p) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $5 + 0.5;
 $7 = (+Math_floor((+$6)));
 $8 = (~~(($7)));
 $9 = (($_out) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = (($p) + 16|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 + 0.5;
 $13 = (+Math_floor((+$12)));
 $14 = (~~(($13)));
 $15 = (($_out) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($p) + 24|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $17 + 0.5;
 $19 = (+Math_floor((+$18)));
 $20 = (~~(($19)));
 $21 = (($_out) + 12|0);
 HEAP32[$21>>2] = $20;
 $22 = (($p) + 32|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 + 0.5;
 $25 = (+Math_floor((+$24)));
 $26 = (~~(($25)));
 $27 = (($_out) + 16|0);
 HEAP32[$27>>2] = $26;
 $28 = (($p) + 40|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 + 0.5;
 $31 = (+Math_floor((+$30)));
 $32 = (~~(($31)));
 $33 = (($_out) + 20|0);
 HEAP32[$33>>2] = $32;
 $34 = (($p) + 48|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $35 + 0.5;
 $37 = (+Math_floor((+$36)));
 $38 = (~~(($37)));
 $39 = (($_out) + 24|0);
 HEAP32[$39>>2] = $38;
 $40 = (($p) + 56|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $41 + 0.5;
 $43 = (+Math_floor((+$42)));
 $44 = (~~(($43)));
 $45 = (($_out) + 28|0);
 HEAP32[$45>>2] = $44;
 $46 = (($p) + 64|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $47 + 0.5;
 $49 = (+Math_floor((+$48)));
 $50 = (~~(($49)));
 $51 = (($_out) + 32|0);
 HEAP32[$51>>2] = $50;
 $52 = (($p) + 72|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $53 + 0.5;
 $55 = (+Math_floor((+$54)));
 $56 = (~~(($55)));
 $57 = (($_out) + 36|0);
 HEAP32[$57>>2] = $56;
 $58 = (($p) + 80|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $59 + 0.5;
 $61 = (+Math_floor((+$60)));
 $62 = (~~(($61)));
 $63 = (($_out) + 40|0);
 HEAP32[$63>>2] = $62;
 $64 = (($p) + 88|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $65 + 0.5;
 $67 = (+Math_floor((+$66)));
 $68 = (~~(($67)));
 $69 = (($_out) + 44|0);
 HEAP32[$69>>2] = $68;
 $70 = (($p) + 96|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $71 + 0.5;
 $73 = (+Math_floor((+$72)));
 $74 = (~~(($73)));
 $75 = (($_out) + 48|0);
 HEAP32[$75>>2] = $74;
 $76 = (($p) + 104|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $77 + 0.5;
 $79 = (+Math_floor((+$78)));
 $80 = (~~(($79)));
 $81 = (($_out) + 52|0);
 HEAP32[$81>>2] = $80;
 $82 = (($p) + 112|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $83 + 0.5;
 $85 = (+Math_floor((+$84)));
 $86 = (~~(($85)));
 $87 = (($_out) + 56|0);
 HEAP32[$87>>2] = $86;
 $88 = (($p) + 120|0);
 $89 = +HEAPF64[$88>>3];
 $90 = $89 + 0.5;
 $91 = (+Math_floor((+$90)));
 $92 = (~~(($91)));
 $93 = (($_out) + 60|0);
 HEAP32[$93>>2] = $92;
 STACKTOP = sp;return;
}
function _od_intra_pred8x8_get($_out,$_neighbors,$_neighbor_strides,$_mode) {
 $_out = $_out|0;
 $_neighbors = $_neighbors|0;
 $_neighbor_strides = $_neighbor_strides|0;
 $_mode = $_mode|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, $i$02 = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $p = sp;
 _od_intra_pred8x8_mult($p,8,$_neighbors,$_neighbor_strides,$_mode);
 $i$02 = 0;
 while(1) {
  $0 = $i$02 << 3;
  $1 = (($p) + ($0<<3)|0);
  $2 = +HEAPF64[$1>>3];
  $3 = $2 + 0.5;
  $4 = (+Math_floor((+$3)));
  $5 = (~~(($4)));
  $6 = (($_out) + ($0<<2)|0);
  HEAP32[$6>>2] = $5;
  $7 = $0 | 1;
  $8 = (($p) + ($7<<3)|0);
  $9 = +HEAPF64[$8>>3];
  $10 = $9 + 0.5;
  $11 = (+Math_floor((+$10)));
  $12 = (~~(($11)));
  $13 = (($_out) + ($7<<2)|0);
  HEAP32[$13>>2] = $12;
  $14 = $0 | 2;
  $15 = (($p) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $16 + 0.5;
  $18 = (+Math_floor((+$17)));
  $19 = (~~(($18)));
  $20 = (($_out) + ($14<<2)|0);
  HEAP32[$20>>2] = $19;
  $21 = $0 | 3;
  $22 = (($p) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 + 0.5;
  $25 = (+Math_floor((+$24)));
  $26 = (~~(($25)));
  $27 = (($_out) + ($21<<2)|0);
  HEAP32[$27>>2] = $26;
  $28 = $0 | 4;
  $29 = (($p) + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30 + 0.5;
  $32 = (+Math_floor((+$31)));
  $33 = (~~(($32)));
  $34 = (($_out) + ($28<<2)|0);
  HEAP32[$34>>2] = $33;
  $35 = $0 | 5;
  $36 = (($p) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $37 + 0.5;
  $39 = (+Math_floor((+$38)));
  $40 = (~~(($39)));
  $41 = (($_out) + ($35<<2)|0);
  HEAP32[$41>>2] = $40;
  $42 = $0 | 6;
  $43 = (($p) + ($42<<3)|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $44 + 0.5;
  $46 = (+Math_floor((+$45)));
  $47 = (~~(($46)));
  $48 = (($_out) + ($42<<2)|0);
  HEAP32[$48>>2] = $47;
  $49 = $0 | 7;
  $50 = (($p) + ($49<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $51 + 0.5;
  $53 = (+Math_floor((+$52)));
  $54 = (~~(($53)));
  $55 = (($_out) + ($49<<2)|0);
  HEAP32[$55>>2] = $54;
  $56 = (($i$02) + 1)|0;
  $exitcond = ($56|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $56;
  }
 }
 STACKTOP = sp;return;
}
function _od_intra_pred16x16_get($_out,$_neighbors,$_neighbor_strides,$_mode) {
 $_out = $_out|0;
 $_neighbors = $_neighbors|0;
 $_neighbor_strides = $_neighbor_strides|0;
 $_mode = $_mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $j$01 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $p = sp;
 _od_intra_pred16x16_mult($p,16,$_neighbors,$_neighbor_strides,$_mode);
 $i$02 = 0;
 while(1) {
  $0 = $i$02 << 4;
  $j$01 = 0;
  while(1) {
   $1 = (($j$01) + ($0))|0;
   $2 = (($p) + ($1<<3)|0);
   $3 = +HEAPF64[$2>>3];
   $4 = $3 + 0.5;
   $5 = (+Math_floor((+$4)));
   $6 = (~~(($5)));
   $7 = (($_out) + ($1<<2)|0);
   HEAP32[$7>>2] = $6;
   $8 = (($j$01) + 1)|0;
   $exitcond = ($8|0)==(16);
   if ($exitcond) {
    break;
   } else {
    $j$01 = $8;
   }
  }
  $9 = (($i$02) + 1)|0;
  $exitcond3 = ($9|0)==(16);
  if ($exitcond3) {
   break;
  } else {
   $i$02 = $9;
  }
 }
 STACKTOP = sp;return;
}
function _od_intra_pred_cdf($_cdf,$_probs,$_nmodes,$_left,$_upleft,$_up) {
 $_cdf = $_cdf|0;
 $_probs = $_probs|0;
 $_nmodes = $_nmodes|0;
 $_left = $_left|0;
 $_upleft = $_upleft|0;
 $_up = $_up|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_cdf$02 = 0;
 var $exitcond = 0, $exitcond7 = 0, $mi$03 = 0, $mi$11 = 0, $p = 0, $sum$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $p = sp;
 $0 = ($_nmodes|0)>(0);
 if ($0) {
  $mi$03 = 0;$sum$04 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = ($mi$03|0)==($_left|0);
  $3 = $2&1;
  $4 = $3 << 2;
  $5 = ($mi$03|0)==($_upleft|0);
  $6 = $5&1;
  $7 = $6 << 1;
  $8 = ($mi$03|0)==($_up|0);
  $9 = $8&1;
  $10 = $7 | $9;
  $11 = $10 | $4;
  $12 = ((($_probs) + ($mi$03<<3)|0) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($p) + ($mi$03<<2)|0);
  $16 = $14 ^ 1;
  $17 = ($13<<24>>24)==(0);
  $18 = $17 ? $16 : 0;
  $19 = $18 ^ $14;
  HEAP32[$15>>2] = $19;
  $20 = (($19) + ($sum$04))|0;
  $21 = (($mi$03) + 1)|0;
  $exitcond7 = ($21|0)==($_nmodes|0);
  if ($exitcond7) {
   break;
  } else {
   $mi$03 = $21;$sum$04 = $20;
  }
 }
 $1 = ($_nmodes|0)>(0);
 if ($1) {
  $curr_cdf$02 = 0;$mi$11 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $22 = (($p) + ($mi$11<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($20) - ($23))|0;
  $25 = Math_imul($24, $23)|0;
  $26 = (+($25>>>0));
  $27 = (256 - ($23))|0;
  $28 = (+($27>>>0));
  $29 = $26 / $28;
  $30 = (~~(($29)));
  $31 = ($30|0)>(1);
  $32 = $31 ? $30 : 1;
  $33 = ($32|0)<(8192);
  $34 = $33 ? $32 : 8192;
  HEAP32[$22>>2] = $34;
  $35 = (($34) + ($curr_cdf$02))|0;
  $36 = $35&65535;
  $37 = (($_cdf) + ($mi$11<<1)|0);
  HEAP16[$37>>1] = $36;
  $38 = (($mi$11) + 1)|0;
  $exitcond = ($38|0)==($_nmodes|0);
  if ($exitcond) {
   break;
  } else {
   $curr_cdf$02 = $35;$mi$11 = $38;
  }
 }
 STACKTOP = sp;return;
}
function _od_intra_pred_update($_probs,$_nmodes,$_mode,$_left,$_upleft,$_up) {
 $_probs = $_probs|0;
 $_nmodes = $_nmodes|0;
 $_mode = $_mode|0;
 $_left = $_left|0;
 $_upleft = $_upleft|0;
 $_up = $_up|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $mi$01 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($_nmodes|0)>(0);
 if ($0) {
  $mi$01 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $1 = ($mi$01|0)==($_left|0);
  $2 = $1&1;
  $3 = $2 << 2;
  $4 = ($mi$01|0)==($_upleft|0);
  $5 = $4&1;
  $6 = $5 << 1;
  $7 = ($mi$01|0)==($_up|0);
  $8 = $7&1;
  $9 = $6 | $8;
  $10 = $9 | $3;
  $11 = ((($_probs) + ($mi$01<<3)|0) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 >>> 4;
  $15 = (($13) - ($14))|0;
  $16 = ($mi$01|0)==($_mode|0);
  $17 = (($15) + 16)|0;
  $$ = $16 ? $17 : $15;
  $storemerge = $$&255;
  $18 = $$ & 255;
  $19 = ($storemerge&255)<(251);
  $20 = $19 ? $18 : 251;
  $21 = ($20>>>0)>(5);
  $22 = $20&255;
  $23 = $21 ? $22 : 5;
  HEAP8[$11>>0] = $23;
  $24 = (($mi$01) + 1)|0;
  $exitcond = ($24|0)==($_nmodes|0);
  if ($exitcond) {
   break;
  } else {
   $mi$01 = $24;
  }
 }
 STACKTOP = sp;return;
}
function _od_resample_luma_coeffs($l,$lstride,$c,$cstride,$xdec,$ydec,$ln,$cln) {
 $l = $l|0;
 $lstride = $lstride|0;
 $c = $c|0;
 $cstride = $cstride|0;
 $xdec = $xdec|0;
 $ydec = $ydec|0;
 $ln = $ln|0;
 $cln = $cln|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0, $or$cond = 0, $x$01 = 0, $y$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 4 << $ln;
 $1 = ($cln|0)==(0);
 if ($1) {
  $3 = ($xdec|0)!=(0);
  $$not = $3 ^ 1;
  $4 = ($ydec|0)==(0);
  $or$cond = $4 & $$not;
  if (!($or$cond)) {
   if (!($3)) {
    _od_tf_up_v_lp($l,$lstride,$c,$cstride,$0,$0);
    STACKTOP = sp;return;
   }
   if ($4) {
    _od_tf_up_h_lp($l,$lstride,$c,$cstride,$0,$0);
    STACKTOP = sp;return;
   } else {
    _od_tf_up_hv_lp($l,$lstride,$c,$cstride,$0,$0,$0);
    STACKTOP = sp;return;
   }
  }
 }
 $2 = ($0|0)>(0);
 if ($2) {
  $y$03 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = Math_imul($y$03, $cstride)|0;
  $6 = Math_imul($y$03, $lstride)|0;
  $x$01 = 0;
  while(1) {
   $7 = (($x$01) + ($5))|0;
   $8 = (($c) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($x$01) + ($6))|0;
   $11 = (($l) + ($10<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = (($x$01) + 1)|0;
   $exitcond = ($12|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $x$01 = $12;
   }
  }
  $13 = (($y$03) + 1)|0;
  $exitcond5 = ($13|0)==($0|0);
  if ($exitcond5) {
   break;
  } else {
   $y$03 = $13;
  }
 }
 STACKTOP = sp;return;
}
function _laplace_decode_special($dec,$decay,$max) {
 $dec = $dec|0;
 $decay = $decay|0;
 $max = $max|0;
 var $$ = 0, $$0 = 0, $$04$lcssa = 0, $$0410 = 0, $$9 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ms$0 = 0, $ms$0$off = 0, $or$cond = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond8 = 0, $pos$0 = 0, $shift$0$lcssa = 0, $shift$011 = 0, $sym$0 = 0, $xs$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($max|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($max|0)>(14);
 $2 = ($max|0)==(-1);
 $or$cond8 = $1 | $2;
 $3 = ($decay>>>0)>(235);
 $$9 = $or$cond8 & $3;
 if ($$9) {
  $$0410 = $decay;$shift$011 = 0;
  while(1) {
   $4 = Math_imul($$0410, $$0410)|0;
   $5 = (($4) + 128)|0;
   $6 = $5 >>> 8;
   $7 = (($shift$011) + 1)|0;
   $8 = $max >> $7;
   $9 = ($8|0)>(14);
   $or$cond = $9 | $2;
   $10 = ($5>>>0)>(60415);
   $$ = $or$cond & $10;
   if ($$) {
    $$0410 = $6;$shift$011 = $7;
   } else {
    $$04$lcssa = $6;$$lcssa7 = $8;$shift$0$lcssa = $7;
    break;
   }
  }
 } else {
  $$04$lcssa = $decay;$$lcssa7 = $max;$shift$0$lcssa = 0;
 }
 $11 = $$04$lcssa ^ 254;
 $12 = ($$04$lcssa>>>0)>(254);
 $13 = $12 ? $11 : 0;
 $14 = $13 ^ $$04$lcssa;
 $15 = $14 ^ 2;
 $16 = ($14>>>0)<(2);
 $17 = $16 ? $15 : 0;
 $18 = $17 ^ $14;
 $19 = (($18) + 1)|0;
 $20 = $19 >>> 1;
 $21 = (149688 + ($20<<5)|0);
 $ms$0 = $$lcssa7;$xs$0 = 0;
 while(1) {
  $ms$0$off = (($ms$0) + -1)|0;
  $22 = ($ms$0$off>>>0)<(14);
  if ($22) {
   $23 = (($ms$0) + 1)|0;
   $24 = (_od_ec_decode_cdf_unscaled($dec,$21,$23)|0);
   $sym$0 = $24;
  } else {
   $25 = (_od_ec_decode_cdf_q15($dec,$21,16)|0);
   $sym$0 = $25;
  }
  $26 = (($sym$0) + ($xs$0))|0;
  $27 = (($ms$0) + -15)|0;
  $28 = ($sym$0|0)<(15);
  $29 = ($27|0)==(0);
  $or$cond5 = $28 | $29;
  if ($or$cond5) {
   break;
  } else {
   $ms$0 = $27;$xs$0 = $26;
  }
 }
 $30 = ($shift$0$lcssa|0)==(0);
 if ($30) {
  $pos$0 = $26;
 } else {
  $31 = $26 << $shift$0$lcssa;
  $32 = (_od_ec_dec_bits($dec,$shift$0$lcssa)|0);
  $33 = (($32) + ($31))|0;
  $pos$0 = $33;
 }
 $34 = ($max|0)!=(-1);
 $35 = ($pos$0|0)>($max|0);
 $or$cond6 = $34 & $35;
 if (!($or$cond6)) {
  $$0 = $pos$0;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = (($dec) + 36|0);
 HEAP32[$36>>2] = 1;
 $$0 = $max;
 STACKTOP = sp;return ($$0|0);
}
function _laplace_decode($dec,$ex_q8,$k) {
 $dec = $dec|0;
 $ex_q8 = $ex_q8|0;
 $k = $k|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cdf = 0, $exitcond = 0, $j$01 = 0, $lsb$0 = 0, $lsb$1 = 0, $sym$0 = 0, $sym$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $cdf = sp;
 $0 = (_od_ilog($ex_q8)|0);
 $1 = (($0) + -11)|0;
 $2 = ($1|0)<(0);
 $$ = $2 ? 0 : $1;
 $3 = 1 << $$;
 $4 = $3 >> 1;
 $5 = (($4) + ($ex_q8))|0;
 $6 = $5 >> $$;
 $7 = (($4) + ($k))|0;
 $8 = $6 << 8;
 $9 = (($6) + 256)|0;
 $10 = (($8|0) / ($9|0))&-1;
 $11 = ($10|0)<(254);
 $12 = $11 ? $10 : 254;
 $13 = (($12) + 1)|0;
 $14 = $13 >> 1;
 $15 = (153784 + ($14<<1)|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $j$01 = 0;
 while(1) {
  $18 = ((149688 + ($14<<5)|0) + ($j$01<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($20) - ($17))|0;
  $22 = $21&65535;
  $23 = (($cdf) + ($j$01<<1)|0);
  HEAP16[$23>>1] = $22;
  $24 = (($j$01) + 1)|0;
  $exitcond = ($24|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $j$01 = $24;
  }
 }
 $25 = $7 >> $$;
 $26 = ($25|0)==(0);
 if ($26) {
  $sym$0 = 0;
 } else {
  $27 = (($25) + 1)|0;
  $28 = $27 ^ 16;
  $29 = ($25|0)>(15);
  $30 = $29 ? $28 : 0;
  $31 = $30 ^ $27;
  $32 = (_od_ec_decode_cdf_unscaled($dec,$cdf,$31)|0);
  $sym$0 = $32;
 }
 $33 = ($$|0)==(0);
 if ($33) {
  $lsb$1 = 0;
 } else {
  $34 = ($sym$0|0)==(0);
  $35 = $34&1;
  $36 = (($$) - ($35))|0;
  $37 = ($36|0)>(0);
  if ($37) {
   $38 = (_od_ec_dec_bits($dec,$36)|0);
   $lsb$0 = $38;
  } else {
   $lsb$0 = 0;
  }
  $39 = $35 ^ 1;
  $40 = (($$) + -1)|0;
  $41 = $39 << $40;
  $42 = (($lsb$0) - ($41))|0;
  $lsb$1 = $42;
 }
 $43 = ($sym$0|0)==(15);
 if (!($43)) {
  $sym$1 = $sym$0;
  $47 = $sym$1 << $$;
  $48 = (($47) + ($lsb$1))|0;
  STACKTOP = sp;return ($48|0);
 }
 $44 = (($25) + -15)|0;
 $45 = (_laplace_decode_special($dec,$12,$44)|0);
 $46 = (($45) + ($sym$0))|0;
 $sym$1 = $46;
 $47 = $sym$1 << $$;
 $48 = (($47) + ($lsb$1))|0;
 STACKTOP = sp;return ($48|0);
}
function _laplace_decode_vector($dec,$y,$n,$k,$curr,$means) {
 $dec = $dec|0;
 $y = $y|0;
 $n = $n|0;
 $k = $k|0;
 $curr = $curr|0;
 $means = $means|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exp_q8$0 = 0, $i$1$lcssa = 0, $i$111 = 0, $ispos = 0, $kn$0$lcssa = 0, $kn$09 = 0, $neg = 0;
 var $or$cond = 0, $or$cond22 = 0, $or$cond8 = 0, $scevgep = 0, $sum_ex$0$lcssa = 0, $sum_ex$010 = 0, $x$0 = 0, $x$0$ = 0, $x$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($k|0)<(2);
 if ($0) {
  _laplace_decode_vector_delta($dec,$y,$n,$k,$curr,$means);
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$means>>2]|0;
 $2 = (($means) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<(8388608);
 if ($4) {
  $5 = $1 << 8;
  $6 = (($3) + 1)|0;
  $7 = (($5|0) / ($6|0))&-1;
  $exp_q8$0 = $7;
 } else {
  $8 = $3 >> 8;
  $9 = (($8) + 1)|0;
  $10 = (($1|0) / ($9|0))&-1;
  $exp_q8$0 = $10;
 }
 $11 = ($n|0)<(1);
 $12 = ($k|0)==(0);
 $or$cond8 = $11 | $12;
 L9: do {
  if ($or$cond8) {
   $i$1$lcssa = 0;$kn$0$lcssa = $k;$sum_ex$0$lcssa = 0;
  } else {
   $13 = (($n) + -1)|0;
   $14 = $exp_q8$0 << 1;
   $15 = (($n) + -1)|0;
   $i$111 = 0;$kn$09 = $k;$sum_ex$010 = 0;
   while(1) {
    $16 = ($kn$09|0)>(1);
    $17 = ($i$111|0)==($13|0);
    $or$cond22 = $16 | $17;
    if (!($or$cond22)) {
     break;
    }
    $22 = Math_imul($14, $kn$09)|0;
    $23 = (($n) - ($i$111))|0;
    $24 = (($23) + ($22))|0;
    $25 = $23 << 1;
    $26 = (($24|0) / ($25|0))&-1;
    $27 = $kn$09 << 8;
    $28 = $kn$09 << 9;
    $29 = (($23) + ($28))|0;
    $30 = (($29|0) / ($25|0))&-1;
    $31 = (($30) + ($sum_ex$010))|0;
    $32 = ($i$111|0)==($15|0);
    if ($32) {
     $x$0 = $kn$09;
    } else {
     $33 = ($26|0)>($27|0);
     $$ = $33 ? $27 : $26;
     $34 = (_laplace_decode($dec,$$,$kn$09)|0);
     $x$0 = $34;
    }
    $35 = ($x$0|0)==(0);
    if ($35) {
     $x$1 = 0;
    } else {
     $36 = (_od_ec_dec_bits($dec,1)|0);
     $37 = ($36|0)==(0);
     $38 = (0 - ($x$0))|0;
     $x$0$ = $37 ? $x$0 : $38;
     $x$1 = $x$0$;
    }
    $39 = (($y) + ($i$111<<2)|0);
    HEAP32[$39>>2] = $x$1;
    $ispos = ($x$1|0)>(-1);
    $neg = (0 - ($x$1))|0;
    $40 = $ispos ? $x$1 : $neg;
    $41 = (($kn$09) - ($40))|0;
    $42 = (($i$111) + 1)|0;
    $43 = ($42|0)>=($n|0);
    $44 = ($kn$09|0)==($40|0);
    $or$cond = $43 | $44;
    if ($or$cond) {
     $i$1$lcssa = $42;$kn$0$lcssa = $41;$sum_ex$0$lcssa = $31;
     break L9;
    } else {
     $i$111 = $42;$kn$09 = $41;$sum_ex$010 = $31;
    }
   }
   $18 = (($y) + ($i$111<<2)|0);
   $19 = (($n) - ($i$111))|0;
   _laplace_decode_vector_delta($dec,$18,$19,$kn$09,$curr,$means);
   $20 = (($k) - ($kn$09))|0;
   HEAP32[$curr>>2] = $20;
   $21 = (($curr) + 4|0);
   HEAP32[$21>>2] = $sum_ex$010;
   STACKTOP = sp;return;
  }
 } while(0);
 $45 = (($curr) + 8|0);
 HEAP32[$45>>2] = -2147483648;
 $46 = (($curr) + 12|0);
 HEAP32[$46>>2] = -2147483648;
 $47 = (($k) - ($kn$0$lcssa))|0;
 HEAP32[$curr>>2] = $47;
 $48 = (($curr) + 4|0);
 HEAP32[$48>>2] = $sum_ex$0$lcssa;
 $49 = ($i$1$lcssa|0)<($n|0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $scevgep = (($y) + ($i$1$lcssa<<2)|0);
 $50 = (($n) - ($i$1$lcssa))|0;
 $51 = $50 << 2;
 _memset(($scevgep|0),0,($51|0))|0;
 STACKTOP = sp;return;
}
function _laplace_decode_vector_delta($dec,$y,$n,$k,$curr,$means) {
 $dec = $dec|0;
 $y = $y|0;
 $n = $n|0;
 $k = $k|0;
 $curr = $curr|0;
 $means = $means|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0;
 var $decay$0 = 0, $first$05 = 0, $i$17 = 0, $k_left$06 = 0, $or$cond = 0, $pos$03 = 0, $sign$04 = 0, $sign$1 = 0, $sum_c$02 = 0, $sum_ex$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($means) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 8;
 $3 = (($means) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (($2|0) / ($5|0))&-1;
 $7 = ($n|0)>(0);
 if ($7) {
  $8 = $n << 2;
  _memset(($y|0),0,($8|0))|0;
 }
 $9 = $6 ^ 1;
 $10 = ($6|0)<(1);
 $11 = $10 ? $9 : 0;
 $12 = $11 ^ $6;
 $13 = ($k|0)>(0);
 if ($13) {
  $14 = (($n) + -1)|0;
  $15 = (($n) + 1)|0;
  $16 = (($n) + -1)|0;
  $17 = Math_imul($16, $15)|0;
  $18 = Math_imul($17, $16)|0;
  $first$05 = 0;$i$17 = 0;$k_left$06 = $k;$pos$03 = 0;$sign$04 = 0;$sum_c$02 = 0;$sum_ex$01 = 0;
  while(1) {
   $19 = (($n) - ($pos$03))|0;
   $20 = Math_imul($19, $12)|0;
   $21 = (($20|0) / ($k_left$06|0))&-1;
   if ($first$05) {
    $33 = (($19) + -1)|0;
    $34 = (_laplace_decode($dec,$21,$33)|0);
    $count$0 = $34;
   } else {
    $22 = ($21|0)>(65280);
    if ($22) {
     $decay$0 = 255;
    } else {
     $23 = $21 << 8;
     $24 = (($21) + 256)|0;
     $25 = (($23|0) / ($24|0))&-1;
     $26 = $21 >> 5;
     $27 = Math_imul($26, $21)|0;
     $28 = (($27|0) / ($18|0))&-1;
     $29 = (($28) + ($25))|0;
     $30 = ($29|0)<(255);
     $31 = $30 ? $29 : 255;
     $decay$0 = $31;
    }
    $32 = (_laplace_decode_special($dec,$decay$0,$14)|0);
    $count$0 = $32;
   }
   $35 = $19 << 8;
   $36 = (($35) + ($sum_ex$01))|0;
   $37 = Math_imul($count$0, $k_left$06)|0;
   $38 = (($37) + ($sum_c$02))|0;
   $39 = (($count$0) + ($pos$03))|0;
   $40 = (($y) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = (_od_ec_dec_bits($dec,1)|0);
    $sign$1 = $43;
   } else {
    $sign$1 = $sign$04;
   }
   $44 = ($sign$1|0)!=(0);
   $45 = $44 ? -1 : 1;
   $46 = HEAP32[$40>>2]|0;
   $47 = (($45) + ($46))|0;
   HEAP32[$40>>2] = $47;
   $48 = (($k_left$06) + -1)|0;
   $49 = ($48|0)!=(0);
   $50 = (($i$17) + 1)|0;
   $51 = ($50|0)<($k|0);
   $or$cond = $49 & $51;
   if ($or$cond) {
    $first$05 = 1;$i$17 = $50;$k_left$06 = $48;$pos$03 = $39;$sign$04 = $sign$1;$sum_c$02 = $38;$sum_ex$01 = $36;
   } else {
    break;
   }
  }
  $52 = ($k|0)>(0);
  if ($52) {
   $53 = $38 << 8;
   $54 = (($curr) + 8|0);
   HEAP32[$54>>2] = $53;
   $55 = (($curr) + 12|0);
   HEAP32[$55>>2] = $36;
   HEAP32[$curr>>2] = 0;
   $58 = (($curr) + 4|0);
   HEAP32[$58>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $56 = (($curr) + 8|0);
 HEAP32[$56>>2] = -1;
 $57 = (($curr) + 12|0);
 HEAP32[$57>>2] = 0;
 HEAP32[$curr>>2] = 0;
 $58 = (($curr) + 4|0);
 HEAP32[$58>>2] = 0;
 STACKTOP = sp;return;
}
function _od_mc_predict1fmv8_c($dst,$src,$systride,$mvx,$mvy,$log_xblk_sz,$log_yblk_sz) {
 $dst = $dst|0;
 $src = $src|0;
 $systride = $systride|0;
 $mvx = $mvx|0;
 $mvy = $mvy|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $$023 = 0, $$132 = 0, $$26 = 0, $$315 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond33 = 0, $exitcond34 = 0, $exitcond35 = 0, $exitcond36 = 0, $exitcond37 = 0, $exitcond38 = 0, $exitcond39 = 0, $i$017 = 0;
 var $i$126 = 0, $i$23 = 0, $i$39 = 0, $j$022 = 0, $j$131 = 0, $j$25 = 0, $j$314 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 1 << $log_xblk_sz;
 $1 = 1 << $log_yblk_sz;
 $2 = $mvx >> 16;
 $3 = $mvy >> 16;
 $4 = Math_imul($3, $systride)|0;
 $5 = (($4) + ($2))|0;
 $6 = (($src) + ($5)|0);
 $7 = $mvx & 65535;
 $8 = $mvy & 65535;
 $9 = ($7|0)==(0);
 $10 = ($8|0)!=(0);
 $11 = ($1|0)>(0);
 if ($9) {
  if ($10) {
   if (!($11)) {
    STACKTOP = sp;return;
   }
   $74 = ($0|0)>(0);
   $75 = $systride << 1;
   $$26 = $6;$j$25 = 0;
   while(1) {
    if ($74) {
     $76 = $j$25 << $log_xblk_sz;
     $i$23 = 0;
     while(1) {
      $77 = $i$23 << 1;
      $78 = (($$26) + ($77)|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $$sum = (($77) + ($systride))|0;
      $81 = (($$26) + ($$sum)|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $84 = $80 << 16;
      $85 = (($83) - ($80))|0;
      $86 = Math_imul($85, $8)|0;
      $87 = (($86) + ($84))|0;
      $88 = $87 >>> 16;
      $89 = $88&255;
      $90 = (($i$23) + ($76))|0;
      $91 = (($dst) + ($90)|0);
      HEAP8[$91>>0] = $89;
      $92 = (($i$23) + 1)|0;
      $exitcond = ($92|0)==($0|0);
      if ($exitcond) {
       break;
      } else {
       $i$23 = $92;
      }
     }
    }
    $93 = (($$26) + ($75)|0);
    $94 = (($j$25) + 1)|0;
    $exitcond33 = ($94|0)==($1|0);
    if ($exitcond33) {
     break;
    } else {
     $$26 = $93;$j$25 = $94;
    }
   }
   STACKTOP = sp;return;
  } else {
   if (!($11)) {
    STACKTOP = sp;return;
   }
   $72 = ($0|0)>(0);
   $73 = $systride << 1;
   $$315 = $6;$j$314 = 0;
   while(1) {
    if ($72) {
     $95 = $j$314 << $log_xblk_sz;
     $i$39 = 0;
     while(1) {
      $96 = $i$39 << 1;
      $97 = (($$315) + ($96)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = (($i$39) + ($95))|0;
      $100 = (($dst) + ($99)|0);
      HEAP8[$100>>0] = $98;
      $101 = (($i$39) + 1)|0;
      $exitcond34 = ($101|0)==($0|0);
      if ($exitcond34) {
       break;
      } else {
       $i$39 = $101;
      }
     }
    }
    $102 = (($$315) + ($73)|0);
    $103 = (($j$314) + 1)|0;
    $exitcond35 = ($103|0)==($1|0);
    if ($exitcond35) {
     break;
    } else {
     $$315 = $102;$j$314 = $103;
    }
   }
   STACKTOP = sp;return;
  }
 } else {
  if ($10) {
   if (!($11)) {
    STACKTOP = sp;return;
   }
   $14 = ($0|0)>(0);
   $15 = $systride << 1;
   $$023 = $6;$j$022 = 0;
   while(1) {
    if ($14) {
     $16 = $j$022 << $log_xblk_sz;
     $i$017 = 0;
     while(1) {
      $17 = $i$017 << 1;
      $18 = (($$023) + ($17)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = $19&255;
      $21 = $17 | 1;
      $22 = (($$023) + ($21)|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = $23&255;
      $$sum1 = (($17) + ($systride))|0;
      $25 = (($$023) + ($$sum1)|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = $26&255;
      $$sum2 = (($21) + ($systride))|0;
      $28 = (($$023) + ($$sum2)|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = $20 << 16;
      $32 = (($24) - ($20))|0;
      $33 = Math_imul($32, $7)|0;
      $34 = (($33) + ($31))|0;
      $35 = $34 >>> 16;
      $36 = $27 << 16;
      $37 = (($30) - ($27))|0;
      $38 = Math_imul($37, $7)|0;
      $39 = (($38) + ($36))|0;
      $40 = $39 >>> 16;
      $41 = $35 << 16;
      $42 = (($40) - ($35))|0;
      $43 = Math_imul($42, $8)|0;
      $44 = (($43) + ($41))|0;
      $45 = $44 >>> 16;
      $46 = $45&255;
      $47 = (($i$017) + ($16))|0;
      $48 = (($dst) + ($47)|0);
      HEAP8[$48>>0] = $46;
      $49 = (($i$017) + 1)|0;
      $exitcond36 = ($49|0)==($0|0);
      if ($exitcond36) {
       break;
      } else {
       $i$017 = $49;
      }
     }
    }
    $50 = (($$023) + ($15)|0);
    $51 = (($j$022) + 1)|0;
    $exitcond37 = ($51|0)==($1|0);
    if ($exitcond37) {
     break;
    } else {
     $$023 = $50;$j$022 = $51;
    }
   }
   STACKTOP = sp;return;
  } else {
   if (!($11)) {
    STACKTOP = sp;return;
   }
   $12 = ($0|0)>(0);
   $13 = $systride << 1;
   $$132 = $6;$j$131 = 0;
   while(1) {
    if ($12) {
     $52 = $j$131 << $log_xblk_sz;
     $i$126 = 0;
     while(1) {
      $53 = $i$126 << 1;
      $54 = (($$132) + ($53)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $53 | 1;
      $58 = (($$132) + ($57)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59&255;
      $61 = $56 << 16;
      $62 = (($60) - ($56))|0;
      $63 = Math_imul($62, $7)|0;
      $64 = (($63) + ($61))|0;
      $65 = $64 >>> 16;
      $66 = $65&255;
      $67 = (($i$126) + ($52))|0;
      $68 = (($dst) + ($67)|0);
      HEAP8[$68>>0] = $66;
      $69 = (($i$126) + 1)|0;
      $exitcond38 = ($69|0)==($0|0);
      if ($exitcond38) {
       break;
      } else {
       $i$126 = $69;
      }
     }
    }
    $70 = (($$132) + ($13)|0);
    $71 = (($j$131) + 1)|0;
    $exitcond39 = ($71|0)==($1|0);
    if ($exitcond39) {
     break;
    } else {
     $$132 = $70;$j$131 = $71;
    }
   }
   STACKTOP = sp;return;
  }
 }
}
function _od_mc_blend_full8_c($dst,$dystride,$src,$log_xblk_sz,$log_yblk_sz) {
 $dst = $dst|0;
 $dystride = $dystride|0;
 $src = $src|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0, $i$01 = 0, $j$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 1 << $log_xblk_sz;
 $1 = 1 << $log_yblk_sz;
 $2 = (($log_yblk_sz) + ($log_xblk_sz))|0;
 $3 = (($2) + -1)|0;
 $4 = 1 << $3;
 $5 = ($1|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($0|0)>(0);
 $7 = (($src) + 12|0);
 $8 = (($src) + 4|0);
 $9 = (($src) + 8|0);
 $$03 = $dst;$j$02 = 0;
 while(1) {
  if ($6) {
   $10 = $j$02 << $log_xblk_sz;
   $i$01 = 0;
   while(1) {
    $11 = (($i$01) + ($10))|0;
    $12 = HEAP32[$src>>2]|0;
    $13 = (($12) + ($11)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = HEAP32[$7>>2]|0;
    $17 = (($16) + ($11)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $15 << $log_xblk_sz;
    $21 = HEAP32[$8>>2]|0;
    $22 = (($21) + ($11)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (($24) - ($15))|0;
    $26 = Math_imul($25, $i$01)|0;
    $27 = (($26) + ($20))|0;
    $28 = $19 << $log_xblk_sz;
    $29 = HEAP32[$9>>2]|0;
    $30 = (($29) + ($11)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = (($32) - ($19))|0;
    $34 = Math_imul($33, $i$01)|0;
    $35 = $27 << $log_yblk_sz;
    $36 = (($28) - ($27))|0;
    $37 = (($36) + ($34))|0;
    $38 = Math_imul($37, $j$02)|0;
    $39 = (($35) + ($4))|0;
    $40 = (($39) + ($38))|0;
    $41 = $40 >>> $2;
    $42 = $41&255;
    $43 = (($$03) + ($i$01)|0);
    HEAP8[$43>>0] = $42;
    $44 = (($i$01) + 1)|0;
    $exitcond = ($44|0)==($0|0);
    if ($exitcond) {
     break;
    } else {
     $i$01 = $44;
    }
   }
  }
  $45 = (($$03) + ($dystride)|0);
  $46 = (($j$02) + 1)|0;
  $exitcond5 = ($46|0)==($1|0);
  if ($exitcond5) {
   break;
  } else {
   $$03 = $45;$j$02 = $46;
  }
 }
 STACKTOP = sp;return;
}
function _od_state_mvs_clear($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $vx$01 = 0, $vy$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 676|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($state) + 680|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 $5 = (($4) + 4)|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1 << 2;
 $8 = (($7) + 4)|0;
 $9 = (($state) + 672|0);
 $10 = ($8|0)>(0);
 $11 = $1 << 2;
 $12 = $3 << 2;
 $vy$02 = 0;
 while(1) {
  $13 = HEAP32[$9>>2]|0;
  $14 = (($13) + ($vy$02<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  if ($10) {
   $vx$01 = 0;
   while(1) {
    $16 = ((($15) + (($vx$01*12)|0)|0) + 8|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 & -8;
    HEAP8[$16>>0] = $18;
    $19 = (($15) + (($vx$01*12)|0)|0);
    HEAP32[$19>>2] = 0;
    $20 = ((($15) + (($vx$01*12)|0)|0) + 4|0);
    HEAP32[$20>>2] = 0;
    $21 = (($vx$01) + 1)|0;
    $22 = $11 | 3;
    $exitcond = ($vx$01|0)==($22|0);
    if ($exitcond) {
     break;
    } else {
     $vx$01 = $21;
    }
   }
  }
  $23 = (($vy$02) + 1)|0;
  $24 = $12 | 3;
  $exitcond6 = ($vy$02|0)==($24|0);
  if ($exitcond6) {
   break;
  } else {
   $vy$02 = $23;
  }
 }
 STACKTOP = sp;return;
}
function _od_mc_blend_full_split8_c($dst,$dystride,$src,$oc,$s,$log_xblk_sz,$log_yblk_sz) {
 $dst = $dst|0;
 $dystride = $dystride|0;
 $src = $src|0;
 $oc = $oc|0;
 $s = $s|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ddsdidj = 0, $dsdi = 0, $dsdj = 0, $exitcond = 0, $exitcond10 = 0, $i$02 = 0, $j$05 = 0, $s0 = 0, $sw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $sw = sp + 64|0;
 $s0 = sp + 48|0;
 $dsdi = sp + 32|0;
 $dsdj = sp + 16|0;
 $ddsdidj = sp;
 $0 = 1 << $log_xblk_sz;
 $1 = (($log_yblk_sz) + ($log_xblk_sz))|0;
 $2 = (($1) + 1)|0;
 _od_mc_setup_s_split($s0,$dsdi,$dsdj,$ddsdidj,$oc,$s,$log_xblk_sz,$log_yblk_sz);
 ;HEAP32[$sw+0>>2]=HEAP32[$s0+0>>2]|0;HEAP32[$sw+4>>2]=HEAP32[$s0+4>>2]|0;HEAP32[$sw+8>>2]=HEAP32[$s0+8>>2]|0;HEAP32[$sw+12>>2]=HEAP32[$s0+12>>2]|0;
 $3 = 1 << $log_yblk_sz;
 $4 = 1 << $1;
 $5 = ($3|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($0|0)>(0);
 $7 = (($src) + 4|0);
 $8 = (($sw) + 4|0);
 $9 = (($src) + 8|0);
 $10 = (($sw) + 8|0);
 $11 = (($src) + 12|0);
 $12 = (($sw) + 12|0);
 $$06 = $dst;$j$05 = 0;
 while(1) {
  if ($6) {
   $13 = $j$05 << $log_xblk_sz;
   $i$02 = 0;
   while(1) {
    $14 = (($i$02) + ($13))|0;
    $15 = HEAP32[$src>>2]|0;
    $16 = (($15) + ($14)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = HEAP32[$7>>2]|0;
    $20 = (($19) + ($14)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) - ($18))|0;
    $24 = HEAP32[$8>>2]|0;
    $25 = Math_imul($23, $24)|0;
    $26 = HEAP32[$9>>2]|0;
    $27 = (($26) + ($14)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = (($29) - ($18))|0;
    $31 = HEAP32[$10>>2]|0;
    $32 = Math_imul($30, $31)|0;
    $33 = HEAP32[$11>>2]|0;
    $34 = (($33) + ($14)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = (($36) - ($18))|0;
    $38 = HEAP32[$12>>2]|0;
    $39 = Math_imul($37, $38)|0;
    $40 = $18 << $2;
    $41 = (($40) + ($4))|0;
    $42 = (($41) + ($25))|0;
    $43 = (($42) + ($32))|0;
    $44 = (($43) + ($39))|0;
    $45 = $44 >> $2;
    $46 = $45&255;
    $47 = (($$06) + ($i$02)|0);
    HEAP8[$47>>0] = $46;
    $48 = HEAP32[$dsdi>>2]|0;
    $49 = HEAP32[$sw>>2]|0;
    $50 = (($49) + ($48))|0;
    HEAP32[$sw>>2] = $50;
    $51 = (($dsdi) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($sw) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + ($52))|0;
    HEAP32[$53>>2] = $55;
    $56 = (($dsdi) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($sw) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + ($57))|0;
    HEAP32[$58>>2] = $60;
    $61 = (($dsdi) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($sw) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($62))|0;
    HEAP32[$63>>2] = $65;
    $66 = (($i$02) + 1)|0;
    $exitcond = ($66|0)==($0|0);
    if ($exitcond) {
     break;
    } else {
     $i$02 = $66;
    }
   }
  }
  $67 = HEAP32[$dsdj>>2]|0;
  $68 = HEAP32[$s0>>2]|0;
  $69 = (($68) + ($67))|0;
  HEAP32[$s0>>2] = $69;
  HEAP32[$sw>>2] = $69;
  $70 = HEAP32[$ddsdidj>>2]|0;
  $71 = HEAP32[$dsdi>>2]|0;
  $72 = (($71) + ($70))|0;
  HEAP32[$dsdi>>2] = $72;
  $73 = (($dsdj) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($s0) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($74))|0;
  HEAP32[$75>>2] = $77;
  $78 = (($sw) + 4|0);
  HEAP32[$78>>2] = $77;
  $79 = (($ddsdidj) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($dsdi) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($80))|0;
  HEAP32[$81>>2] = $83;
  $84 = (($dsdj) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($s0) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($85))|0;
  HEAP32[$86>>2] = $88;
  $89 = (($sw) + 8|0);
  HEAP32[$89>>2] = $88;
  $90 = (($ddsdidj) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($dsdi) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($91))|0;
  HEAP32[$92>>2] = $94;
  $95 = (($dsdj) + 12|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($s0) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($96))|0;
  HEAP32[$97>>2] = $99;
  $100 = (($sw) + 12|0);
  HEAP32[$100>>2] = $99;
  $101 = (($ddsdidj) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($dsdi) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + ($102))|0;
  HEAP32[$103>>2] = $105;
  $106 = (($$06) + ($dystride)|0);
  $107 = (($j$05) + 1)|0;
  $exitcond10 = ($107|0)==($3|0);
  if ($exitcond10) {
   break;
  } else {
   $$06 = $106;$j$05 = $107;
  }
 }
 STACKTOP = sp;return;
}
function _od_mc_setup_s_split($s0,$dsdi,$dsdj,$ddsdidj,$oc,$s,$log_xblk_sz,$log_yblk_sz) {
 $s0 = $s0|0;
 $dsdi = $dsdi|0;
 $dsdj = $dsdj|0;
 $ddsdidj = $ddsdidj|0;
 $oc = $oc|0;
 $s = $s|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($log_yblk_sz) + ($log_xblk_sz))|0;
 $1 = 2 << $0;
 HEAP32[$s0>>2] = $1;
 $2 = (($s0) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($s0) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (($s0) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = -2 << $log_xblk_sz;
 HEAP32[$dsdi>>2] = $5;
 $6 = 2 << $log_xblk_sz;
 $7 = (($dsdi) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (($dsdi) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = (($dsdi) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = -2 << $log_yblk_sz;
 HEAP32[$dsdj>>2] = $10;
 $11 = (($dsdj) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = (($dsdj) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = 2 << $log_yblk_sz;
 $14 = (($dsdj) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = (($ddsdidj) + 8|0);
 HEAP32[$15>>2] = 2;
 HEAP32[$ddsdidj>>2] = 2;
 $16 = (($ddsdidj) + 12|0);
 HEAP32[$16>>2] = -2;
 $17 = (($ddsdidj) + 4|0);
 HEAP32[$17>>2] = -2;
 $18 = $s & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = (($oc) + 1)|0;
  $21 = $20 & 3;
  $22 = (($s0) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >> 1;
  HEAP32[$22>>2] = $24;
  $25 = (($s0) + ($oc<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($24))|0;
  HEAP32[$25>>2] = $27;
  $28 = (($dsdi) + ($21<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 >> 1;
  HEAP32[$28>>2] = $30;
  $31 = (($dsdi) + ($oc<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30))|0;
  HEAP32[$31>>2] = $33;
  $34 = (($dsdj) + ($21<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 >> 1;
  HEAP32[$34>>2] = $36;
  $37 = (($dsdj) + ($oc<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($36))|0;
  HEAP32[$37>>2] = $39;
  $40 = (($ddsdidj) + ($21<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >> 1;
  HEAP32[$40>>2] = $42;
  $43 = (($ddsdidj) + ($oc<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42))|0;
  HEAP32[$43>>2] = $45;
 }
 $46 = $s & 2;
 $47 = ($46|0)==(0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = (($oc) + 3)|0;
 $49 = $48 & 3;
 $50 = (($s0) + ($49<<2)|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 >> 1;
 HEAP32[$50>>2] = $52;
 $53 = (($s0) + ($oc<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($52))|0;
 HEAP32[$53>>2] = $55;
 $56 = (($dsdi) + ($49<<2)|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 >> 1;
 HEAP32[$56>>2] = $58;
 $59 = (($dsdi) + ($oc<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($58))|0;
 HEAP32[$59>>2] = $61;
 $62 = (($dsdj) + ($49<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 >> 1;
 HEAP32[$62>>2] = $64;
 $65 = (($dsdj) + ($oc<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($64))|0;
 HEAP32[$65>>2] = $67;
 $68 = (($ddsdidj) + ($49<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 >> 1;
 HEAP32[$68>>2] = $70;
 $71 = (($ddsdidj) + ($oc<<2)|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($70))|0;
 HEAP32[$71>>2] = $73;
 STACKTOP = sp;return;
}
function _od_mc_blend_full_split8($state,$dst,$dystride,$src,$oc,$s,$log_xblk_sz,$log_yblk_sz) {
 $state = $state|0;
 $dst = $dst|0;
 $dystride = $dystride|0;
 $src = $src|0;
 $oc = $oc|0;
 $s = $s|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$1 & 7]($dst,$dystride,$src,$oc,$s,$log_xblk_sz,$log_yblk_sz);
 STACKTOP = sp;return;
}
function _od_mc_predict8($state,$dst,$dystride,$src,$systride,$mvx,$mvy,$interp_type,$oc,$s,$log_xblk_sz,$log_yblk_sz) {
 $state = $state|0;
 $dst = $dst|0;
 $dystride = $dystride|0;
 $src = $src|0;
 $systride = $systride|0;
 $mvx = $mvx|0;
 $mvy = $mvy|0;
 $interp_type = $interp_type|0;
 $oc = $oc|0;
 $s = $s|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $buf = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $pred = sp + 1024|0;
 $buf = sp;
 $0 = HEAP32[$mvx>>2]|0;
 $1 = HEAP32[$mvy>>2]|0;
 _od_mc_predict1fmv8($state,$buf,$src,$systride,$0,$1,$log_xblk_sz,$log_yblk_sz);
 HEAP32[$pred>>2] = $buf;
 $2 = (($mvx) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$mvx>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = (($pred) + 4|0);
  HEAP32[$6>>2] = $buf;
 } else {
  $7 = (($buf) + 256|0);
  $8 = (($mvy) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  _od_mc_predict1fmv8($state,$7,$src,$systride,$3,$9,$log_xblk_sz,$log_yblk_sz);
  $10 = (($pred) + 4|0);
  HEAP32[$10>>2] = $7;
 }
 $11 = (($mvx) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$mvx>>2]|0;
 $14 = ($12|0)==($13|0);
 if ($14) {
  $15 = (($mvy) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$mvy>>2]|0;
  $18 = ($16|0)==($17|0);
  if ($18) {
   $19 = HEAP32[$pred>>2]|0;
   $20 = (($pred) + 8|0);
   HEAP32[$20>>2] = $19;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 do {
  if ((label|0) == 7) {
   $21 = HEAP32[$11>>2]|0;
   $22 = HEAP32[$2>>2]|0;
   $23 = ($21|0)==($22|0);
   if ($23) {
    $24 = (($mvy) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($mvy) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = (($pred) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($pred) + 8|0);
     HEAP32[$31>>2] = $30;
     break;
    }
   }
   $32 = (($buf) + 512|0);
   $33 = HEAP32[$11>>2]|0;
   $34 = (($mvy) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   _od_mc_predict1fmv8($state,$32,$src,$systride,$33,$35,$log_xblk_sz,$log_yblk_sz);
   $36 = (($pred) + 8|0);
   HEAP32[$36>>2] = $32;
  }
 } while(0);
 $37 = (($mvx) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$mvx>>2]|0;
 $40 = ($38|0)==($39|0);
 if ($40) {
  $41 = (($mvy) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$mvy>>2]|0;
  $44 = ($42|0)==($43|0);
  if ($44) {
   $45 = HEAP32[$pred>>2]|0;
   $46 = (($pred) + 12|0);
   HEAP32[$46>>2] = $45;
   _od_mc_blend8($state,$dst,$dystride,$pred,$oc,$s,$log_xblk_sz,$log_yblk_sz);
   STACKTOP = sp;return;
  }
 }
 $47 = HEAP32[$37>>2]|0;
 $48 = HEAP32[$2>>2]|0;
 $49 = ($47|0)==($48|0);
 if ($49) {
  $50 = (($mvy) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($mvy) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51|0)==($53|0);
  if ($54) {
   $55 = (($pred) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($pred) + 12|0);
   HEAP32[$57>>2] = $56;
   _od_mc_blend8($state,$dst,$dystride,$pred,$oc,$s,$log_xblk_sz,$log_yblk_sz);
   STACKTOP = sp;return;
  }
 }
 $58 = HEAP32[$37>>2]|0;
 $59 = HEAP32[$11>>2]|0;
 $60 = ($58|0)==($59|0);
 if ($60) {
  $61 = (($mvy) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($mvy) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($62|0)==($64|0);
  if ($65) {
   $66 = (($pred) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($pred) + 12|0);
   HEAP32[$68>>2] = $67;
   _od_mc_blend8($state,$dst,$dystride,$pred,$oc,$s,$log_xblk_sz,$log_yblk_sz);
   STACKTOP = sp;return;
  }
 }
 $69 = (($buf) + 768|0);
 $70 = HEAP32[$37>>2]|0;
 $71 = (($mvy) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 _od_mc_predict1fmv8($state,$69,$src,$systride,$70,$72,$log_xblk_sz,$log_yblk_sz);
 $73 = (($pred) + 12|0);
 HEAP32[$73>>2] = $69;
 _od_mc_blend8($state,$dst,$dystride,$pred,$oc,$s,$log_xblk_sz,$log_yblk_sz);
 STACKTOP = sp;return;
}
function _od_mc_predict1fmv8($state,$dst,$src,$systride,$mvx,$mvy,$log_xblk_sz,$log_yblk_sz) {
 $state = $state|0;
 $dst = $dst|0;
 $src = $src|0;
 $systride = $systride|0;
 $mvx = $mvx|0;
 $mvy = $mvy|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$1 & 7]($dst,$src,$systride,$mvx,$mvy,$log_xblk_sz,$log_yblk_sz);
 STACKTOP = sp;return;
}
function _od_mc_blend8($state,$dst,$dystride,$src,$oc,$s,$log_xblk_sz,$log_yblk_sz) {
 $state = $state|0;
 $dst = $dst|0;
 $dystride = $dystride|0;
 $src = $src|0;
 $oc = $oc|0;
 $s = $s|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(3);
 if ($0) {
  _od_mc_blend_full8($state,$dst,$dystride,$src,$log_xblk_sz,$log_yblk_sz);
  STACKTOP = sp;return;
 } else {
  _od_mc_blend_full_split8($state,$dst,$dystride,$src,$oc,$s,$log_xblk_sz,$log_yblk_sz);
  STACKTOP = sp;return;
 }
}
function _od_state_get_predictor($state,$pred,$vx,$vy,$level,$mv_res) {
 $state = $state|0;
 $pred = $pred|0;
 $vx = $vx|0;
 $vy = $vy|0;
 $level = $level|0;
 $mv_res = $mv_res|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $ci$09 = 0, $cneighbors = 0, $exitcond = 0, $ncns$0 = 0, $ncns$110 = 0, $ncns$111 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $cneighbors = sp + 32|0;
 $a = sp;
 $0 = (($state) + 680|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 2;
 $3 = ($vx|0)<(2);
 $4 = ($vy|0)<(2);
 $or$cond = $3 | $4;
 if (!($or$cond)) {
  $5 = (($state) + 676|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 << 2;
  $8 = $7 | 2;
  $9 = ($8|0)<($vx|0);
  if (!($9)) {
   $10 = $2 | 2;
   $11 = ($10|0)<($vy|0);
   if (!($11)) {
    $13 = (4 - ($level))|0;
    $14 = $13 >> 1;
    $15 = 1 << $14;
    $16 = ($level|0)==(0);
    do {
     if ($16) {
      $17 = (($vy) + -4)|0;
      $18 = (($state) + 672|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + ($17<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $$sum6 = (($vx) + -4)|0;
      $22 = (($21) + (($$sum6*12)|0)|0);
      HEAP32[$cneighbors>>2] = $22;
      $23 = HEAP32[$18>>2]|0;
      $24 = (($23) + ($17<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($25) + (($vx*12)|0)|0);
      $27 = (($cneighbors) + 4|0);
      HEAP32[$27>>2] = $26;
      $28 = HEAP32[$18>>2]|0;
      $29 = (($28) + ($17<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $$sum7 = (($vx) + 4)|0;
      $31 = (($30) + (($$sum7*12)|0)|0);
      $32 = (($cneighbors) + 8|0);
      HEAP32[$32>>2] = $31;
      $33 = HEAP32[$18>>2]|0;
      $34 = (($33) + ($vy<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($35) + (($$sum6*12)|0)|0);
      $37 = (($cneighbors) + 12|0);
      HEAP32[$37>>2] = $36;
      $ncns$111 = 4;
      label = 14;
     } else {
      $38 = $level & 1;
      $39 = ($38|0)==(0);
      $40 = (($vy) - ($15))|0;
      $41 = (($state) + 672|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($42) + ($40<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      if (!($39)) {
       $$sum2 = (($vx) - ($15))|0;
       $45 = (($44) + (($$sum2*12)|0)|0);
       HEAP32[$cneighbors>>2] = $45;
       $46 = HEAP32[$41>>2]|0;
       $47 = (($46) + ($40<<2)|0);
       $48 = HEAP32[$47>>2]|0;
       $$sum3 = (($15) + ($vx))|0;
       $49 = (($48) + (($$sum3*12)|0)|0);
       $50 = (($cneighbors) + 4|0);
       HEAP32[$50>>2] = $49;
       $51 = (($15) + ($vy))|0;
       $52 = HEAP32[$41>>2]|0;
       $53 = (($52) + ($51<<2)|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (($54) + (($$sum2*12)|0)|0);
       $56 = (($cneighbors) + 8|0);
       HEAP32[$56>>2] = $55;
       $57 = HEAP32[$41>>2]|0;
       $58 = (($57) + ($51<<2)|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (($59) + (($$sum3*12)|0)|0);
       $61 = (($cneighbors) + 12|0);
       HEAP32[$61>>2] = $60;
       $ncns$111 = 4;
       label = 14;
       break;
      }
      $62 = (($44) + (($vx*12)|0)|0);
      HEAP32[$cneighbors>>2] = $62;
      $63 = HEAP32[$41>>2]|0;
      $64 = (($63) + ($vy<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $$sum = (($vx) - ($15))|0;
      $66 = (($65) + (($$sum*12)|0)|0);
      $67 = (($cneighbors) + 4|0);
      HEAP32[$67>>2] = $66;
      $68 = (($15) + ($vx))|0;
      $69 = (($vx) + 3)|0;
      $70 = $69 & -4;
      $71 = ($68|0)>($70|0);
      if ($71) {
       $ncns$0 = 3;
      } else {
       $72 = HEAP32[$41>>2]|0;
       $73 = (($72) + ($vy<<2)|0);
       $74 = HEAP32[$73>>2]|0;
       $$sum1 = (($15) + ($vx))|0;
       $75 = (($74) + (($$sum1*12)|0)|0);
       $76 = (($cneighbors) + 8|0);
       HEAP32[$76>>2] = $75;
       $ncns$0 = 4;
      }
      $77 = (($15) + ($vy))|0;
      $78 = (($vy) + 3)|0;
      $79 = $78 & -4;
      $80 = ($77|0)>($79|0);
      if ($80) {
       $87 = (($ncns$0) + -1)|0;
       $88 = ($87|0)>(0);
       if ($88) {
        $ncns$111 = $87;
        label = 14;
        break;
       } else {
        $ncns$110 = $87;
        break;
       }
      } else {
       $81 = HEAP32[$41>>2]|0;
       $82 = (($81) + ($77<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($83) + (($vx*12)|0)|0);
       $85 = (($ncns$0) + -1)|0;
       $86 = (($cneighbors) + ($85<<2)|0);
       HEAP32[$86>>2] = $84;
       $ncns$111 = $ncns$0;
       label = 14;
       break;
      }
     }
    } while(0);
    if ((label|0) == 14) {
     $ci$09 = 0;
     while(1) {
      $89 = (($cneighbors) + ($ci$09<<2)|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = HEAP32[$90>>2]|0;
      $92 = (($a) + ($ci$09<<3)|0);
      HEAP32[$92>>2] = $91;
      $93 = HEAP32[$89>>2]|0;
      $94 = (($93) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($a) + ($ci$09<<3)|0) + 4|0);
      HEAP32[$96>>2] = $95;
      $97 = (($ci$09) + 1)|0;
      $exitcond = ($97|0)==($ncns$111|0);
      if ($exitcond) {
       $ncns$110 = $ncns$111;
       break;
      } else {
       $ci$09 = $97;
      }
     }
    }
    $98 = ($ncns$110|0)>(3);
    $99 = HEAP32[$a>>2]|0;
    $100 = (($a) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 ^ $99;
    $103 = ($101|0)<($99|0);
    $104 = $103 ? $102 : 0;
    $105 = $104 ^ $99;
    HEAP32[$a>>2] = $105;
    $106 = HEAP32[$100>>2]|0;
    $107 = $104 ^ $106;
    HEAP32[$100>>2] = $107;
    $108 = (($a) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($a) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $111 ^ $109;
    $113 = ($111|0)<($109|0);
    $114 = $113 ? $112 : 0;
    $115 = $114 ^ $109;
    HEAP32[$108>>2] = $115;
    $116 = HEAP32[$110>>2]|0;
    $117 = $114 ^ $116;
    HEAP32[$110>>2] = $117;
    if ($98) {
     $118 = (($a) + 16|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($a) + 24|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $121 ^ $119;
     $123 = ($121|0)<($119|0);
     $124 = $123 ? $122 : 0;
     $125 = $124 ^ $119;
     HEAP32[$118>>2] = $125;
     $126 = HEAP32[$120>>2]|0;
     $127 = $124 ^ $126;
     HEAP32[$120>>2] = $127;
     $128 = (($a) + 20|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($a) + 28|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $131 ^ $129;
     $133 = ($131|0)<($129|0);
     $134 = $133 ? $132 : 0;
     $135 = $134 ^ $129;
     HEAP32[$128>>2] = $135;
     $136 = HEAP32[$130>>2]|0;
     $137 = $134 ^ $136;
     HEAP32[$130>>2] = $137;
     $138 = HEAP32[$a>>2]|0;
     $139 = HEAP32[$118>>2]|0;
     $140 = $139 ^ $138;
     $141 = ($139|0)<($138|0);
     $142 = $141 ? $140 : 0;
     $143 = $142 ^ $138;
     HEAP32[$a>>2] = $143;
     $144 = HEAP32[$118>>2]|0;
     $145 = $142 ^ $144;
     HEAP32[$118>>2] = $145;
     $146 = HEAP32[$108>>2]|0;
     $147 = HEAP32[$128>>2]|0;
     $148 = $147 ^ $146;
     $149 = ($147|0)<($146|0);
     $150 = $149 ? $148 : 0;
     $151 = $150 ^ $146;
     HEAP32[$108>>2] = $151;
     $152 = HEAP32[$128>>2]|0;
     $153 = $150 ^ $152;
     HEAP32[$128>>2] = $153;
     $154 = HEAP32[$100>>2]|0;
     $155 = HEAP32[$120>>2]|0;
     $156 = $155 ^ $154;
     $157 = ($155|0)<($154|0);
     $158 = $157 ? $156 : 0;
     $159 = $158 ^ $154;
     HEAP32[$100>>2] = $159;
     $160 = HEAP32[$120>>2]|0;
     $161 = $158 ^ $160;
     HEAP32[$120>>2] = $161;
     $162 = HEAP32[$110>>2]|0;
     $163 = HEAP32[$130>>2]|0;
     $164 = $163 ^ $162;
     $165 = ($163|0)<($162|0);
     $166 = $165 ? $164 : 0;
     $167 = $166 ^ $162;
     HEAP32[$110>>2] = $167;
     $168 = HEAP32[$130>>2]|0;
     $169 = $166 ^ $168;
     HEAP32[$130>>2] = $169;
     $170 = HEAP32[$100>>2]|0;
     $171 = HEAP32[$118>>2]|0;
     $172 = (($171) + ($170))|0;
     $173 = (($mv_res) + 1)|0;
     $174 = $172 >>> $173;
     $175 = $174 & 1;
     $176 = 1 << $173;
     $177 = (($176) + -1)|0;
     $178 = $177 >> 1;
     $179 = (($172) + ($178))|0;
     $180 = (($179) + ($175))|0;
     $181 = $180 >> $173;
     HEAP32[$pred>>2] = $181;
     $182 = HEAP32[$110>>2]|0;
     $183 = HEAP32[$128>>2]|0;
     $184 = (($183) + ($182))|0;
     $185 = $184 >>> $173;
     $186 = $185 & 1;
     $187 = (($184) + ($178))|0;
     $188 = (($187) + ($186))|0;
     $189 = $188 >> $173;
     $190 = (($pred) + 4|0);
     HEAP32[$190>>2] = $189;
     STACKTOP = sp;return;
    } else {
     $191 = HEAP32[$100>>2]|0;
     $192 = (($a) + 16|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $193 ^ $191;
     $195 = ($193|0)<($191|0);
     $196 = $195 ? $194 : 0;
     $197 = $196 ^ $191;
     HEAP32[$100>>2] = $197;
     $198 = HEAP32[$192>>2]|0;
     $199 = $196 ^ $198;
     HEAP32[$192>>2] = $199;
     $200 = HEAP32[$110>>2]|0;
     $201 = (($a) + 20|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $202 ^ $200;
     $204 = ($202|0)<($200|0);
     $205 = $204 ? $203 : 0;
     $206 = $205 ^ $200;
     HEAP32[$110>>2] = $206;
     $207 = HEAP32[$201>>2]|0;
     $208 = $205 ^ $207;
     HEAP32[$201>>2] = $208;
     $209 = HEAP32[$a>>2]|0;
     $210 = HEAP32[$100>>2]|0;
     $211 = $210 ^ $209;
     $212 = ($210|0)<($209|0);
     $213 = $212 ? $211 : 0;
     $214 = $213 ^ $209;
     HEAP32[$a>>2] = $214;
     $215 = HEAP32[$100>>2]|0;
     $216 = $213 ^ $215;
     HEAP32[$100>>2] = $216;
     $217 = HEAP32[$108>>2]|0;
     $218 = HEAP32[$110>>2]|0;
     $219 = $218 ^ $217;
     $220 = ($218|0)<($217|0);
     $221 = $220 ? $219 : 0;
     $222 = $221 ^ $217;
     HEAP32[$108>>2] = $222;
     $223 = HEAP32[$110>>2]|0;
     $224 = $221 ^ $223;
     HEAP32[$110>>2] = $224;
     $225 = HEAP32[$100>>2]|0;
     $226 = $225 >>> $mv_res;
     $227 = $226 & 1;
     $228 = 1 << $mv_res;
     $229 = (($228) + -1)|0;
     $230 = $229 >> 1;
     $231 = (($225) + ($230))|0;
     $232 = (($231) + ($227))|0;
     $233 = $232 >> $mv_res;
     HEAP32[$pred>>2] = $233;
     $234 = HEAP32[$110>>2]|0;
     $235 = $234 >>> $mv_res;
     $236 = $235 & 1;
     $237 = (($234) + ($230))|0;
     $238 = (($237) + ($236))|0;
     $239 = $238 >> $mv_res;
     $240 = (($pred) + 4|0);
     HEAP32[$240>>2] = $239;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $12 = (($pred) + 4|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$pred>>2] = 0;
 STACKTOP = sp;return;
}
function _od_mv_level1_prob($grid,$vx,$vy) {
 $grid = $grid|0;
 $vx = $vx|0;
 $vy = $vy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($vx) + 2)|0;
 $1 = (($vy) + -2)|0;
 $2 = (($grid) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($vy) + 2)|0;
 $5 = (($grid) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($vx) + -2)|0;
 $8 = ($vx|0)>(3);
 if ($8) {
  $9 = (($vx) + -4)|0;
  $10 = (($grid) + ($vy<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11) + (($9*12)|0)|0) + 8|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 1;
  $15 = $14&255;
  $49 = $15;
 } else {
  $49 = 0;
 }
 $16 = ($vy|0)>(3);
 if ($16) {
  $17 = (($vy) + -4)|0;
  $18 = (($grid) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19) + (($vx*12)|0)|0) + 8|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 & 1;
  $23 = $22&255;
  $50 = $23;
 } else {
  $50 = 0;
 }
 $24 = (($3) + (($0*12)|0)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($6) + (($0*12)|0)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)==($27|0);
 if ($28) {
  $29 = ((($3) + (($0*12)|0)|0) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($6) + (($0*12)|0)|0) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($30|0)==($32|0);
  $35 = $33;
 } else {
  $35 = 0;
 }
 $34 = $35&1;
 $36 = HEAP32[$26>>2]|0;
 $37 = (($6) + (($7*12)|0)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)==($38|0);
 if (!($39)) {
  $46 = 0;
  $45 = $46&1;
  $47 = (($45) + ($34))|0;
  $48 = (($50) + ($49))|0;
  $51 = ((154040 + (($48*12)|0)|0) + ($47<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 $40 = ((($6) + (($0*12)|0)|0) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($6) + (($7*12)|0)|0) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($41|0)==($43|0);
 $46 = $44;
 $45 = $46&1;
 $47 = (($45) + ($34))|0;
 $48 = (($50) + ($49))|0;
 $51 = ((154040 + (($48*12)|0)|0) + ($47<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 STACKTOP = sp;return ($52|0);
}
function _od_mc_blend_full8($state,$dst,$dystride,$src,$log_xblk_sz,$log_yblk_sz) {
 $state = $state|0;
 $dst = $dst|0;
 $dystride = $dystride|0;
 $src = $src|0;
 $log_xblk_sz = $log_xblk_sz|0;
 $log_yblk_sz = $log_yblk_sz|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_viiiii[$1 & 1]($dst,$dystride,$src,$log_xblk_sz,$log_yblk_sz);
 STACKTOP = sp;return;
}
function _od_raster_to_coding_order($dst,$n,$src,$stride,$interleave) {
 $dst = $dst|0;
 $n = $n|0;
 $src = $src|0;
 $stride = $stride|0;
 $interleave = $interleave|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i1$03 = 0, $scevgep = 0, $scevgep10 = 0, $tmp1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096|0;
 $tmp1 = sp;
 $0 = (($dst) + 4|0);
 _od_band_from_raster(154152,$0,$src,$stride);
 $1 = ($n|0)>(7);
 if (!($1)) {
  $65 = HEAP32[$src>>2]|0;
  HEAP32[$dst>>2] = $65;
  STACKTOP = sp;return;
 }
 $2 = (($dst) + 64|0);
 _od_band_from_raster(154128,$2,$src,$stride);
 $3 = ($interleave|0)==(0);
 if (!($3)) {
  $4 = (($dst) + 64|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$tmp1>>2] = $5;
  $6 = (($dst) + 96|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($tmp1) + 4|0);
  HEAP32[$8>>2] = $7;
  $9 = (($dst) + 68|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($tmp1) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = (($dst) + 100|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($tmp1) + 12|0);
  HEAP32[$14>>2] = $13;
  $15 = (($dst) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($tmp1) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = (($dst) + 104|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($tmp1) + 20|0);
  HEAP32[$20>>2] = $19;
  $21 = (($dst) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($tmp1) + 24|0);
  HEAP32[$23>>2] = $22;
  $24 = (($dst) + 108|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($tmp1) + 28|0);
  HEAP32[$26>>2] = $25;
  $27 = (($dst) + 80|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($tmp1) + 32|0);
  HEAP32[$29>>2] = $28;
  $30 = (($dst) + 112|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($tmp1) + 36|0);
  HEAP32[$32>>2] = $31;
  $33 = (($dst) + 84|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($tmp1) + 40|0);
  HEAP32[$35>>2] = $34;
  $36 = (($dst) + 116|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($tmp1) + 44|0);
  HEAP32[$38>>2] = $37;
  $39 = (($dst) + 88|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($tmp1) + 48|0);
  HEAP32[$41>>2] = $40;
  $42 = (($dst) + 120|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($tmp1) + 52|0);
  HEAP32[$44>>2] = $43;
  $45 = (($dst) + 92|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($tmp1) + 56|0);
  HEAP32[$47>>2] = $46;
  $48 = (($dst) + 124|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($tmp1) + 60|0);
  HEAP32[$50>>2] = $49;
  $scevgep10 = (($dst) + 64|0);
  dest=$scevgep10+0|0; src=$tmp1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $51 = ($n|0)>(15);
 if (!($51)) {
  $65 = HEAP32[$src>>2]|0;
  HEAP32[$dst>>2] = $65;
  STACKTOP = sp;return;
 }
 $52 = (($dst) + 256|0);
 _od_band_from_raster(154096,$52,$src,$stride);
 $53 = ($interleave|0)==(0);
 if ($53) {
  $65 = HEAP32[$src>>2]|0;
  HEAP32[$dst>>2] = $65;
  STACKTOP = sp;return;
 } else {
  $i1$03 = 0;
 }
 while(1) {
  $54 = (($i1$03) + 64)|0;
  $55 = (($dst) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $i1$03 << 1;
  $58 = (($tmp1) + ($57<<2)|0);
  HEAP32[$58>>2] = $56;
  $59 = (($i1$03) + 96)|0;
  $60 = (($dst) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $57 | 1;
  $63 = (($tmp1) + ($62<<2)|0);
  HEAP32[$63>>2] = $61;
  $64 = (($i1$03) + 1)|0;
  $exitcond = ($64|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $i1$03 = $64;
  }
 }
 $scevgep = (($dst) + 256|0);
 _memcpy(($scevgep|0),($tmp1|0),256)|0;
 $65 = HEAP32[$src>>2]|0;
 HEAP32[$dst>>2] = $65;
 STACKTOP = sp;return;
}
function _od_band_from_raster($layout,$dst,$src,$stride) {
 $layout = $layout|0;
 $dst = $dst|0;
 $src = $src|0;
 $stride = $stride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($layout) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($layout) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $i$01 = 0;
 while(1) {
  $7 = HEAP32[$layout>>2]|0;
  $8 = ((($7) + ($i$01<<1)|0) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = Math_imul($10, $stride)|0;
  $12 = (($7) + ($i$01<<1)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($11) + ($14))|0;
  $16 = (($src) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($dst) + ($i$01<<2)|0);
  HEAP32[$18>>2] = $17;
  $19 = (($i$01) + 1)|0;
  $exitcond = ($19|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $19;
  }
 }
 STACKTOP = sp;return;
}
function _od_coding_order_to_raster($dst,$stride,$src,$n,$interleave) {
 $dst = $dst|0;
 $stride = $stride|0;
 $src = $src|0;
 $n = $n|0;
 $interleave = $interleave|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i1$11 = 0, $scevgep = 0, $scevgep11 = 0, $tmp1 = 0, $tmp12 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8192|0;
 $tmp1 = sp + 4096|0;
 $tmp12 = sp;
 $0 = (($src) + 4|0);
 _od_raster_from_band(154152,$dst,$stride,$0);
 $1 = ($n|0)>(7);
 if (!($1)) {
  $65 = HEAP32[$src>>2]|0;
  HEAP32[$dst>>2] = $65;
  STACKTOP = sp;return;
 }
 $2 = ($interleave|0)==(0);
 if (!($2)) {
  $scevgep11 = (($src) + 64|0);
  dest=$tmp1+0|0; src=$scevgep11+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $3 = HEAP32[$tmp1>>2]|0;
  $4 = (($src) + 64|0);
  HEAP32[$4>>2] = $3;
  $5 = (($tmp1) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($src) + 96|0);
  HEAP32[$7>>2] = $6;
  $8 = (($tmp1) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($src) + 68|0);
  HEAP32[$10>>2] = $9;
  $11 = (($tmp1) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($src) + 100|0);
  HEAP32[$13>>2] = $12;
  $14 = (($tmp1) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($src) + 72|0);
  HEAP32[$16>>2] = $15;
  $17 = (($tmp1) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($src) + 104|0);
  HEAP32[$19>>2] = $18;
  $20 = (($tmp1) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($src) + 76|0);
  HEAP32[$22>>2] = $21;
  $23 = (($tmp1) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($src) + 108|0);
  HEAP32[$25>>2] = $24;
  $26 = (($tmp1) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($src) + 80|0);
  HEAP32[$28>>2] = $27;
  $29 = (($tmp1) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($src) + 112|0);
  HEAP32[$31>>2] = $30;
  $32 = (($tmp1) + 40|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($src) + 84|0);
  HEAP32[$34>>2] = $33;
  $35 = (($tmp1) + 44|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($src) + 116|0);
  HEAP32[$37>>2] = $36;
  $38 = (($tmp1) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($src) + 88|0);
  HEAP32[$40>>2] = $39;
  $41 = (($tmp1) + 52|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($src) + 120|0);
  HEAP32[$43>>2] = $42;
  $44 = (($tmp1) + 56|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($src) + 92|0);
  HEAP32[$46>>2] = $45;
  $47 = (($tmp1) + 60|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($src) + 124|0);
  HEAP32[$49>>2] = $48;
 }
 $50 = (($src) + 64|0);
 _od_raster_from_band(154128,$dst,$stride,$50);
 $51 = ($n|0)>(15);
 if (!($51)) {
  $65 = HEAP32[$src>>2]|0;
  HEAP32[$dst>>2] = $65;
  STACKTOP = sp;return;
 }
 $52 = ($interleave|0)==(0);
 if (!($52)) {
  $scevgep = (($src) + 256|0);
  _memcpy(($tmp12|0),($scevgep|0),256)|0;
  $i1$11 = 0;
  while(1) {
   $53 = $i1$11 << 1;
   $54 = (($tmp12) + ($53<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($i1$11) + 64)|0;
   $57 = (($src) + ($56<<2)|0);
   HEAP32[$57>>2] = $55;
   $58 = $53 | 1;
   $59 = (($tmp12) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($i1$11) + 96)|0;
   $62 = (($src) + ($61<<2)|0);
   HEAP32[$62>>2] = $60;
   $63 = (($i1$11) + 1)|0;
   $exitcond = ($63|0)==(32);
   if ($exitcond) {
    break;
   } else {
    $i1$11 = $63;
   }
  }
 }
 $64 = (($src) + 256|0);
 _od_raster_from_band(154096,$dst,$stride,$64);
 $65 = HEAP32[$src>>2]|0;
 HEAP32[$dst>>2] = $65;
 STACKTOP = sp;return;
}
function _od_raster_from_band($layout,$dst,$stride,$src) {
 $layout = $layout|0;
 $dst = $dst|0;
 $stride = $stride|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($layout) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($layout) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $i$01 = 0;
 while(1) {
  $7 = (($src) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$layout>>2]|0;
  $10 = ((($9) + ($i$01<<1)|0) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = Math_imul($12, $stride)|0;
  $14 = (($9) + ($i$01<<1)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($13) + ($16))|0;
  $18 = (($dst) + ($17<<2)|0);
  HEAP32[$18>>2] = $8;
  $19 = (($i$01) + 1)|0;
  $exitcond = ($19|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $19;
  }
 }
 STACKTOP = sp;return;
}
function _neg_deinterleave($x,$ref) {
 $x = $x|0;
 $ref = $ref|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ref << 1;
 $1 = (($0) + -1)|0;
 $2 = ($1|0)>($x|0);
 do {
  if ($2) {
   $3 = $x & 1;
   $4 = ($3|0)==(0);
   if ($4) {
    $8 = $x >> 1;
    $9 = (($8) + ($ref))|0;
    $$0 = $9;
    break;
   } else {
    $5 = (($ref) + -1)|0;
    $6 = $x >> 1;
    $7 = (($5) - ($6))|0;
    $$0 = $7;
    break;
   }
  } else {
   $10 = (($x) + 1)|0;
   $$0 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pvq_compute_gain($x,$n,$q,$g,$beta) {
 $x = $x|0;
 $n = $n|0;
 $q = +$q;
 $g = $g|0;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $acc$0$lcssa = 0.0, $acc$02 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(0);
 if ($0) {
  $acc$02 = 0.0;$i$01 = 0;
  while(1) {
   $1 = (($x) + ($i$01<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (+($2|0));
   $4 = $3 * $3;
   $5 = $acc$02 + $4;
   $6 = (($i$01) + 1)|0;
   $exitcond = ($6|0)==($n|0);
   if ($exitcond) {
    $acc$0$lcssa = $5;
    break;
   } else {
    $acc$02 = $5;$i$01 = $6;
   }
  }
 } else {
  $acc$0$lcssa = 0.0;
 }
 $7 = (+Math_sqrt((+$acc$0$lcssa)));
 HEAPF64[$g>>3] = $7;
 $8 = 1.0 / $beta;
 $9 = (+Math_pow((+$7),(+$8)));
 $10 = $9 / $q;
 STACKTOP = sp;return (+$10);
}
function _pvq_compute_max_theta($qcg,$beta) {
 $qcg = +$qcg;
 $beta = +$beta;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $ts$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $qcg * 3.141592653589793116;
 $1 = $beta * 2.0;
 $2 = $0 / $1;
 $3 = $2 + 0.5;
 $4 = (+Math_floor((+$3)));
 $5 = (~~(($4)));
 $6 = $qcg < 1.39999999999999991118;
 $ts$0 = $6 ? 1 : $5;
 STACKTOP = sp;return ($ts$0|0);
}
function _pvq_compute_theta($t,$max_theta) {
 $t = $t|0;
 $max_theta = $max_theta|0;
 var $$0 = 0.0, $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($max_theta|0)==(0);
 if ($0) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (+($t|0));
 $2 = $1 * 0.5;
 $3 = $2 * 3.141592653589793116;
 $4 = (+($max_theta|0));
 $5 = $3 / $4;
 $$0 = $5;
 STACKTOP = sp;return (+$$0);
}
function _pvq_compute_k($qcg,$theta,$noref,$n,$beta) {
 $qcg = +$qcg;
 $theta = +$theta;
 $noref = $noref|0;
 $n = $n|0;
 $beta = +$beta;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($noref|0)==(0);
 if ($0) {
  $16 = $theta == 0.0;
  if ($16) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = (+Math_sin((+$theta)));
  $18 = $17 * $qcg;
  $19 = $18 + -0.200000000000000011102;
  $20 = (($n) + 2)|0;
  $21 = (($20|0) / 2)&-1;
  $22 = (+($21|0));
  $23 = (+Math_sqrt((+$22)));
  $24 = $19 * $23;
  $25 = $24 / $beta;
  $26 = $25 + 0.5;
  $27 = (+Math_floor((+$26)));
  $28 = (~~(($27)));
  $29 = ($28|0)>(1);
  $30 = $29 ? $28 : 1;
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 } else {
  $1 = ($n|0)==(15);
  $2 = $qcg == 1.0;
  $or$cond = $1 & $2;
  $3 = $beta > 1.25;
  $or$cond1 = $or$cond & $3;
  if ($or$cond1) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $4 = $qcg + -0.200000000000000011102;
  $5 = (($n) + 3)|0;
  $6 = (($5|0) / 2)&-1;
  $7 = (+($6|0));
  $8 = (+Math_sqrt((+$7)));
  $9 = $4 * $8;
  $10 = $9 / $beta;
  $11 = $10 + 0.5;
  $12 = (+Math_floor((+$11)));
  $13 = (~~(($12)));
  $14 = ($13|0)>(1);
  $15 = $14 ? $13 : 1;
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _pvq_synthesis($xcoeff,$ypulse,$r,$n,$gr,$noref,$qg,$go,$theta,$q,$beta) {
 $xcoeff = $xcoeff|0;
 $ypulse = $ypulse|0;
 $r = $r|0;
 $n = $n|0;
 $gr = +$gr;
 $noref = $noref|0;
 $qg = $qg|0;
 $go = +$go;
 $theta = +$theta;
 $q = +$q;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $s = sp;
 HEAP32[$s>>2] = 0;
 $0 = ($noref|0)==(0);
 if ($0) {
  $1 = (_compute_householder($r,$n,$gr,$s)|0);
  $3 = $1;
 } else {
  $3 = 0;
 }
 $2 = HEAP32[$s>>2]|0;
 $4 = (+_pvq_synthesis_partial($xcoeff,$ypulse,$r,$n,$noref,$qg,$go,$theta,$3,$2,$q,$beta));
 STACKTOP = sp;return (+$4);
}
function _compute_householder($r,$n,$gr,$sign) {
 $r = $r|0;
 $n = $n|0;
 $gr = +$gr;
 $sign = $sign|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $m$0$lcssa = 0, $m$02 = 0, $m$1 = 0, $maxr$03 = 0.0, $maxr$1 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(0);
 if ($0) {
  $i$01 = 0;$m$02 = 0;$maxr$03 = 0.0;
  while(1) {
   $1 = (($r) + ($i$01<<3)|0);
   $2 = +HEAPF64[$1>>3];
   $3 = (+Math_abs((+$2)));
   $4 = $3 > $maxr$03;
   $m$1 = $4 ? $i$01 : $m$02;
   $maxr$1 = $4 ? $3 : $maxr$03;
   $5 = (($i$01) + 1)|0;
   $exitcond = ($5|0)==($n|0);
   if ($exitcond) {
    $m$0$lcssa = $m$1;
    break;
   } else {
    $i$01 = $5;$m$02 = $m$1;$maxr$03 = $maxr$1;
   }
  }
 } else {
  $m$0$lcssa = 0;
 }
 $6 = (($r) + ($m$0$lcssa<<3)|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $7 > 0.0;
 $9 = $8 ? 1 : -1;
 $10 = (+($9|0));
 $11 = $10 * $gr;
 $12 = $7 + $11;
 HEAPF64[$6>>3] = $12;
 HEAP32[$sign>>2] = $9;
 STACKTOP = sp;return ($m$0$lcssa|0);
}
function _pvq_synthesis_partial($xcoeff,$ypulse,$r,$n,$noref,$qg,$go,$theta,$m,$s,$q,$beta) {
 $xcoeff = $xcoeff|0;
 $ypulse = $ypulse|0;
 $r = $r|0;
 $n = $n|0;
 $noref = $noref|0;
 $qg = $qg|0;
 $go = +$go;
 $theta = +$theta;
 $m = $m|0;
 $s = $s|0;
 $q = +$q;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $exitcond19 = 0, $exitcond20 = 0, $exitcond21 = 0, $exitcond22 = 0, $i$014 = 0, $i$12 = 0, $i$29 = 0, $i$35 = 0, $i$41 = 0, $phitmp = 0.0, $phitmp18 = 0.0, $qcg$0 = 0.0, $x = 0, $yy$0$lcssa = 0.0, $yy$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $x = sp;
 $0 = ($noref|0)!=(0);
 $1 = $0&1;
 $2 = $1 ^ 1;
 $3 = (($n) - ($2))|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = (($n) - ($2))|0;
  $i$014 = 0;$yy$013 = 0;
  while(1) {
   $6 = (($ypulse) + ($i$014<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = Math_imul($7, $7)|0;
   $9 = (($8) + ($yy$013))|0;
   $10 = (($i$014) + 1)|0;
   $exitcond22 = ($10|0)==($5|0);
   if ($exitcond22) {
    break;
   } else {
    $i$014 = $10;$yy$013 = $9;
   }
  }
  $phitmp = (+($9|0));
  $phitmp18 = $phitmp + 1.00000000000000001999E-100;
  $yy$0$lcssa = $phitmp18;
 } else {
  $yy$0$lcssa = 1.00000000000000001999E-100;
 }
 $11 = 1.0 / $yy$0$lcssa;
 $12 = (+Math_sqrt((+$11)));
 L7: do {
  if ($0) {
   $13 = (+($qg|0));
   $14 = ($n|0)>(0);
   if ($14) {
    $i$12 = 0;
    while(1) {
     $17 = (($ypulse) + ($i$12<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (+($18|0));
     $20 = $12 * $19;
     $21 = (($x) + ($i$12<<3)|0);
     HEAPF64[$21>>3] = $20;
     $22 = (($i$12) + 1)|0;
     $exitcond19 = ($22|0)==($n|0);
     if ($exitcond19) {
      $qcg$0 = $13;
      break L7;
     } else {
      $i$12 = $22;
     }
    }
   }
   $15 = $13 * $q;
   $16 = (+Math_pow((+$15),(+$beta)));
   $60 = $16;
   $59 = $60 * $60;
   STACKTOP = sp;return (+$59);
  } else {
   $23 = ($qg|0)==(0);
   if ($23) {
    $61 = 0.0;
   } else {
    $24 = (+($qg|0));
    $25 = $24 + $go;
    $61 = $25;
   }
   $26 = (+Math_sin((+$theta)));
   $27 = $12 * $26;
   $28 = ($m|0)>(0);
   if ($28) {
    $i$29 = 0;
    while(1) {
     $29 = (($ypulse) + ($i$29<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (+($30|0));
     $32 = $27 * $31;
     $33 = (($x) + ($i$29<<3)|0);
     HEAPF64[$33>>3] = $32;
     $34 = (($i$29) + 1)|0;
     $exitcond21 = ($34|0)==($m|0);
     if ($exitcond21) {
      break;
     } else {
      $i$29 = $34;
     }
    }
   }
   $35 = (0 - ($s))|0;
   $36 = (+($35|0));
   $37 = (+Math_cos((+$theta)));
   $38 = $36 * $37;
   $39 = (($x) + ($m<<3)|0);
   HEAPF64[$39>>3] = $38;
   $40 = ($3|0)>($m|0);
   if ($40) {
    $41 = (($n) - ($2))|0;
    $i$35 = $m;
    while(1) {
     $42 = (($ypulse) + ($i$35<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (+($43|0));
     $45 = $27 * $44;
     $46 = (($i$35) + 1)|0;
     $47 = (($x) + ($46<<3)|0);
     HEAPF64[$47>>3] = $45;
     $exitcond20 = ($46|0)==($41|0);
     if ($exitcond20) {
      break;
     } else {
      $i$35 = $46;
     }
    }
   }
   _apply_householder($x,$r,$n);
   $qcg$0 = $61;
  }
 } while(0);
 $48 = $qcg$0 * $q;
 $49 = (+Math_pow((+$48),(+$beta)));
 $50 = ($n|0)>(0);
 if ($50) {
  $i$41 = 0;
 } else {
  $60 = $49;
  $59 = $60 * $60;
  STACKTOP = sp;return (+$59);
 }
 while(1) {
  $51 = (($x) + ($i$41<<3)|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $49 * $52;
  $54 = $53 + 0.5;
  $55 = (+Math_floor((+$54)));
  $56 = (~~(($55)));
  $57 = (($xcoeff) + ($i$41<<2)|0);
  HEAP32[$57>>2] = $56;
  $58 = (($i$41) + 1)|0;
  $exitcond = ($58|0)==($n|0);
  if ($exitcond) {
   $60 = $49;
   break;
  } else {
   $i$41 = $58;
  }
 }
 $59 = $60 * $60;
 STACKTOP = sp;return (+$59);
}
function _pvq_interband_masking($inter,$curr,$beta) {
 $inter = +$inter;
 $curr = +$curr;
 $beta = +$beta;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $inter + $curr;
 $1 = $curr / $0;
 $2 = 0.5 / $beta;
 $3 = 0.5 - $2;
 $4 = (+Math_pow((+$1),(+$3)));
 STACKTOP = sp;return (+$4);
}
function _vector_is_null($x,$len) {
 $x = $x|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)>(0);
 L1: do {
  if ($0) {
   $i$01 = 0;
   while(1) {
    $3 = (($x) + ($i$01<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)==(0);
    $1 = (($i$01) + 1)|0;
    if (!($5)) {
     $$0 = 0;
     break L1;
    }
    $2 = ($1|0)<($len|0);
    if ($2) {
     $i$01 = $1;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _apply_householder($x,$r,$n) {
 $x = $x|0;
 $r = $r|0;
 $n = $n|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, $exitcond = 0, $exitcond12 = 0, $exitcond14 = 0, $i$06 = 0, $i$13 = 0, $i$21 = 0, $l2r$07 = 0.0, $phitmp = 0.0, $phitmp11 = 0.0, $proj$02 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(0);
 if ($0) {
  $i$06 = 0;$l2r$07 = 0.0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $3 = (($r) + ($i$06<<3)|0);
  $4 = +HEAPF64[$3>>3];
  $5 = $4 * $4;
  $1 = $l2r$07 + $5;
  $6 = (($i$06) + 1)|0;
  $exitcond14 = ($6|0)==($n|0);
  if ($exitcond14) {
   break;
  } else {
   $i$06 = $6;$l2r$07 = $1;
  }
 }
 $phitmp11 = $1 + 1.00000000000000001999E-100;
 $2 = ($n|0)>(0);
 if ($2) {
  $i$13 = 0;$proj$02 = 0.0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = (($r) + ($i$13<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = (($x) + ($i$13<<3)|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $8 * $10;
  $12 = $proj$02 + $11;
  $13 = (($i$13) + 1)|0;
  $exitcond12 = ($13|0)==($n|0);
  if ($exitcond12) {
   break;
  } else {
   $i$13 = $13;$proj$02 = $12;
  }
 }
 $phitmp = $12 * 2.0;
 $14 = $phitmp / $phitmp11;
 $15 = ($n|0)>(0);
 if ($15) {
  $i$21 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $16 = (($r) + ($i$21<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $14 * $17;
  $19 = (($x) + ($i$21<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $20 - $18;
  HEAPF64[$19>>3] = $21;
  $22 = (($i$21) + 1)|0;
  $exitcond = ($22|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$21 = $22;
  }
 }
 STACKTOP = sp;return;
}
function _pvq_decode($dec,$ref,$out,$q,$pli,$ln,$qm,$beta,$inter_band,$is_keyframe) {
 $dec = $dec|0;
 $ref = $ref|0;
 $out = $out|0;
 $q = $q|0;
 $pli = $pli|0;
 $ln = $ln|0;
 $qm = $qm|0;
 $beta = $beta|0;
 $inter_band = $inter_band|0;
 $is_keyframe = $is_keyframe|0;
 var $$012 = 0, $$1$lcssa = 0, $$16 = 0, $$not = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond30 = 0, $exitcond34 = 0, $exitcond35 = 0, $exitcond36 = 0, $g = 0, $i$027 = 0, $i$123 = 0, $i$520 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$07 = 0, $mask$0$lcssa = 0.0, $mask$08 = 0.0, $noref = 0, $or$cond = 0, $phitmp = 0;
 var $scevgep = 0, $size = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $noref = sp + 84|0;
 $size = sp + 56|0;
 $g = sp;
 dest=$g+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($dec) + 720|0);
 $1 = ($ln*7)|0;
 $2 = (($dec) + 736|0);
 $3 = (154248 + ($ln<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($is_keyframe|0)!=(0);
 if (!($6)) {
  $7 = (($dec) + 6768|0);
  $8 = ((($dec) + ($pli<<3)|0) + 6720|0);
  $9 = (($dec) + 6752|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_od_decode_cdf_adapt($7,$8,4,$10)|0);
  $12 = $11 & 1;
  HEAP32[$out>>2] = $12;
  $phitmp = ($11>>>0)>(1);
  if ($phitmp) {
   $13 = $ln << 1;
   $14 = (($13) + 4)|0;
   $15 = 1 << $14;
   $16 = ($15|0)>(1);
   if ($16) {
    $i$027 = 1;
   } else {
    STACKTOP = sp;return;
   }
   while(1) {
    $18 = (($ref) + ($i$027<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($out) + ($i$027<<2)|0);
    HEAP32[$20>>2] = $19;
    $21 = (($i$027) + 1)|0;
    $exitcond36 = ($21|0)==($15|0);
    if ($exitcond36) {
     break;
    } else {
     $i$027 = $21;
    }
   }
   STACKTOP = sp;return;
  }
 }
 $17 = ($5|0)>(0);
 if ($17) {
  $i$123 = 0;
  while(1) {
   $22 = (($i$123) + 1)|0;
   $$sum4 = (($i$123) + 2)|0;
   $23 = (($4) + ($$sum4<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $$sum5 = (($i$123) + 1)|0;
   $25 = (($4) + ($$sum5<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) - ($26))|0;
   $28 = (($size) + ($i$123<<2)|0);
   HEAP32[$28>>2] = $27;
   $exitcond35 = ($22|0)==($5|0);
   if ($exitcond35) {
    break;
   } else {
    $i$123 = $22;
   }
  }
 }
 $$not = $6 ^ 1;
 $29 = ($ln|0)>(0);
 $or$cond = $29 & $$not;
 if ($or$cond) {
  $32 = (($dec) + 6768|0);
  $33 = (($ln) + -1)|0;
  $34 = ((($dec) + ($33<<5)|0) + 2408|0);
  $35 = (($dec) + 2404|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_od_decode_cdf_adapt($32,$34,16,$36)|0);
  $38 = $37 >>> 3;
  $39 = $38 & 1;
  HEAP32[$noref>>2] = $39;
  $40 = $37 >>> 2;
  $41 = $40 & 1;
  $42 = (($noref) + 4|0);
  HEAP32[$42>>2] = $41;
  $43 = $37 >>> 1;
  $44 = $43 & 1;
  $45 = (($noref) + 8|0);
  HEAP32[$45>>2] = $44;
  $46 = $37 & 1;
  $47 = (($noref) + 12|0);
  HEAP32[$47>>2] = $46;
  $48 = ($ln|0)>(1);
  if ($48) {
   $51 = HEAP32[$noref>>2]|0;
   $52 = (($noref) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($51))|0;
   $55 = (($noref) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($54))|0;
   $58 = (($noref) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($57))|0;
   $61 = ((($dec) + ($60<<4)|0) + 2472|0);
   $62 = HEAP32[$35>>2]|0;
   $63 = (_od_decode_cdf_adapt($32,$61,8,$62)|0);
   $64 = $63 >>> 2;
   $65 = $64 & 1;
   $66 = (($noref) + 16|0);
   HEAP32[$66>>2] = $65;
   $67 = $63 >>> 1;
   $68 = $67 & 1;
   $69 = (($noref) + 20|0);
   HEAP32[$69>>2] = $68;
   $70 = $63 & 1;
   $71 = (($noref) + 24|0);
   HEAP32[$71>>2] = $70;
  }
 } else {
  $30 = ($5|0)>(0);
  if (!($30)) {
   STACKTOP = sp;return;
  }
  $31 = (($dec) + 6768|0);
  $i$520 = 0;
  while(1) {
   if ($6) {
    $$sum3 = (($i$520) + 1)|0;
    $72 = (($4) + ($$sum3<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($ref) + ($73<<2)|0);
    $75 = (($size) + ($i$520<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (_vector_is_null($74,$76)|0);
    $78 = ($77|0)==(0);
    if ($78) {
     label = 17;
    } else {
     $79 = (($noref) + ($i$520<<2)|0);
     HEAP32[$79>>2] = 1;
    }
   } else {
    label = 17;
   }
   if ((label|0) == 17) {
    label = 0;
    $$sum2 = (($i$520) + ($1))|0;
    $80 = ((($dec) + ($$sum2<<2)|0) + 2320|0);
    $81 = (_decode_flag($31,$80)|0);
    $82 = ($81|0)==(0);
    $83 = $82&1;
    $84 = (($noref) + ($i$520<<2)|0);
    HEAP32[$84>>2] = $83;
   }
   $85 = (($i$520) + 1)|0;
   $exitcond34 = ($85|0)==($5|0);
   if ($exitcond34) {
    break;
   } else {
    $i$520 = $85;
   }
  }
 }
 $49 = ($5|0)>(0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = (($dec) + 6768|0);
 $$012 = $inter_band;$indvars$iv = 0;
 while(1) {
  $86 = ($indvars$iv|0)>(0);
  if ($86) {
   $$16 = $$012;$j$07 = 0;$mask$08 = 0.0;
   while(1) {
    $87 = (($$16) + 8|0);
    $88 = +HEAPF64[$$16>>3];
    $89 = (($g) + ($j$07<<3)|0);
    $90 = +HEAPF64[$89>>3];
    $91 = $88 * $90;
    $92 = $mask$08 + $91;
    $93 = (($j$07) + 1)|0;
    $exitcond = ($93|0)==($indvars$iv|0);
    if ($exitcond) {
     break;
    } else {
     $$16 = $87;$j$07 = $93;$mask$08 = $92;
    }
   }
   $scevgep = (($$012) + ($indvars$iv<<3)|0);
   $$1$lcssa = $scevgep;$mask$0$lcssa = $92;
  } else {
   $$1$lcssa = $$012;$mask$0$lcssa = 0.0;
  }
  $94 = (($g) + ($indvars$iv<<3)|0);
  HEAPF64[$94>>3] = $mask$0$lcssa;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $95 = (($qm) + ($indvars$iv$next<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = Math_imul($96, $q)|0;
  $98 = $97 >> 4;
  $99 = ($98|0)>(1);
  $100 = $99 ? $98 : 1;
  $101 = (($size) + ($indvars$iv<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((((($dec) + (($pli*84)|0)|0) + (($ln*28)|0)|0) + ($indvars$iv<<2)|0) + 1984|0);
  $$sum = (($indvars$iv) + ($1))|0;
  $104 = ((($dec) + ($$sum<<2)|0) + 1900|0);
  $$sum1 = (($indvars$iv) + 1)|0;
  $105 = (($4) + ($$sum1<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($ref) + ($106<<2)|0);
  $108 = (($out) + ($106<<2)|0);
  $109 = (($noref) + ($indvars$iv<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($beta) + ($indvars$iv<<3)|0);
  $112 = +HEAPF64[$111>>3];
  _pvq_decode_partition($50,$100,$102,$2,$0,$103,$104,$107,$108,$110,$94,$112,$is_keyframe);
  $exitcond30 = ($indvars$iv$next|0)==($5|0);
  if ($exitcond30) {
   break;
  } else {
   $$012 = $$1$lcssa;$indvars$iv = $indvars$iv$next;
  }
 }
 STACKTOP = sp;return;
}
function _decode_flag($ec,$prob0) {
 $ec = $ec|0;
 $prob0 = $prob0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$prob0>>2]|0;
 $1 = (_od_ec_decode_bool_q15($ec,$0)|0);
 $2 = ($1|0)==(0);
 $3 = HEAP32[$prob0>>2]|0;
 if ($2) {
  $6 = (32768 - ($3))|0;
  $7 = $6 >>> 4;
  $8 = (($7) + ($3))|0;
  $storemerge = $8;
 } else {
  $4 = $3 >>> 4;
  $5 = (($3) - ($4))|0;
  $storemerge = $5;
 }
 HEAP32[$prob0>>2] = $storemerge;
 STACKTOP = sp;return ($1|0);
}
function _pvq_decode_partition($ec,$q0,$n,$model,$adapt,$exg,$ext,$ref,$out,$noref,$mask_gain,$beta,$is_keyframe) {
 $ec = $ec|0;
 $q0 = $q0|0;
 $n = $n|0;
 $model = $model|0;
 $adapt = $adapt|0;
 $exg = $exg|0;
 $ext = $ext|0;
 $ref = $ref|0;
 $out = $out|0;
 $noref = $noref|0;
 $mask_gain = $mask_gain|0;
 $beta = +$beta;
 $is_keyframe = $is_keyframe|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $adapt_curr = 0, $exitcond = 0, $gain_offset$0 = 0.0, $gr = 0, $i$01 = 0, $itheta$0 = 0, $mask_ratio$0 = 0.0, $qcg$0 = 0.0, $qg$0 = 0;
 var $r = 0, $theta$0 = 0.0, $tmp = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12320|0;
 $adapt_curr = sp + 12304|0;
 $gr = sp + 8192|0;
 $y = sp + 8208|0;
 $r = sp;
 $tmp = sp + 8200|0;
 ;HEAP32[$adapt_curr+0>>2]=0|0;HEAP32[$adapt_curr+4>>2]=0|0;HEAP32[$adapt_curr+8>>2]=0|0;HEAP32[$adapt_curr+12>>2]=0|0;
 $0 = (+($q0|0));
 $1 = 1.0 / $beta;
 $2 = $1 + -1.0;
 $3 = (+Math_pow(4096.0,(+$2)));
 $4 = $0 * $3;
 HEAPF64[$gr>>3] = 0.0;
 $5 = ($noref|0)!=(0);
 $6 = $5&1;
 $7 = $6 ^ 1;
 $8 = (($model) + (($7*388)|0)|0);
 $9 = (_generic_decode($ec,$8,-1,$exg,2)|0);
 if ($5) {
  $49 = (+($9|0));
  $50 = +HEAPF64[$mask_gain>>3];
  $51 = $4 * $49;
  $52 = $beta * 2.0;
  $53 = (+Math_pow((+$51),(+$52)));
  $54 = (+_pvq_interband_masking($50,$53,$beta));
  $gain_offset$0 = 0.0;$mask_ratio$0 = $54;$qcg$0 = $49;$qg$0 = $9;$theta$0 = 0.0;
 } else {
  $10 = (+_pvq_compute_gain($ref,$n,$4,$gr,$beta));
  $11 = $10 + 0.5;
  $12 = (+Math_floor((+$11)));
  $13 = (~~(($12)));
  $14 = (_neg_deinterleave($9,$13)|0);
  $15 = (+($13|0));
  $16 = $10 - $15;
  $17 = (+($14|0));
  $18 = $17 + $16;
  $19 = +HEAPF64[$mask_gain>>3];
  $20 = $4 * $18;
  $21 = $beta * 2.0;
  $22 = (+Math_pow((+$20),(+$21)));
  $23 = (+_pvq_interband_masking($19,$22,$beta));
  $24 = $23 * $18;
  $25 = (_pvq_compute_max_theta($24,$beta)|0);
  $26 = ($25|0)>(1);
  do {
   if ($26) {
    $27 = ($is_keyframe|0)==(0);
    if ($27) {
     $39 = (($model) + 776|0);
     $40 = (($25) + -1)|0;
     $41 = (_generic_decode($ec,$39,$40,$ext,2)|0);
     $itheta$0 = $41;
     break;
    } else {
     $28 = HEAP32[$ext>>2]|0;
     $29 = Math_imul($28, $25)|0;
     HEAP32[$tmp>>2] = $29;
     $30 = (($model) + 776|0);
     $31 = (($25) + -1)|0;
     $32 = (_generic_decode($ec,$30,$31,$tmp,2)|0);
     $33 = $32 << 16;
     $34 = (($33|0) / ($25|0))&-1;
     $35 = HEAP32[$ext>>2]|0;
     $36 = (($34) - ($35))|0;
     $37 = $36 >> 5;
     $38 = (($37) + ($35))|0;
     HEAP32[$ext>>2] = $38;
     $itheta$0 = $32;
     break;
    }
   } else {
    $itheta$0 = 0;
   }
  } while(0);
  $42 = (+_pvq_compute_theta($itheta$0,$25));
  $43 = ($n|0)>(0);
  if ($43) {
   $i$01 = 0;
   while(1) {
    $44 = (($ref) + ($i$01<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (+($45|0));
    $47 = (($r) + ($i$01<<3)|0);
    HEAPF64[$47>>3] = $46;
    $48 = (($i$01) + 1)|0;
    $exitcond = ($48|0)==($n|0);
    if ($exitcond) {
     $gain_offset$0 = $16;$mask_ratio$0 = $23;$qcg$0 = $18;$qg$0 = $14;$theta$0 = $42;
     break;
    } else {
     $i$01 = $48;
    }
   }
  } else {
   $gain_offset$0 = $16;$mask_ratio$0 = $23;$qcg$0 = $18;$qg$0 = $14;$theta$0 = $42;
  }
 }
 $55 = ($qg$0|0)==(0);
 if ($55) {
  $59 = $n << 2;
  _memset(($y|0),0,($59|0))|0;
 } else {
  $56 = $mask_ratio$0 * $qcg$0;
  $57 = (_pvq_compute_k($56,$theta$0,$noref,$n,$beta)|0);
  $58 = (($n) - ($7))|0;
  _laplace_decode_vector($ec,$y,$58,$57,$adapt_curr,$adapt);
 }
 $60 = +HEAPF64[$gr>>3];
 $61 = (+_pvq_synthesis($out,$y,$r,$n,$60,$noref,$qg$0,$gain_offset$0,$theta$0,$4,$beta));
 HEAPF64[$mask_gain>>3] = $61;
 $62 = HEAP32[$adapt_curr>>2]|0;
 $63 = ($62|0)>(0);
 if ($63) {
  $64 = $62 << 8;
  $65 = HEAP32[$adapt>>2]|0;
  $66 = (($64) - ($65))|0;
  $67 = $66 >> 5;
  $68 = (($67) + ($65))|0;
  HEAP32[$adapt>>2] = $68;
  $69 = (($adapt_curr) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($adapt) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) - ($72))|0;
  $74 = $73 >> 5;
  $75 = (($74) + ($72))|0;
  HEAP32[$71>>2] = $75;
 }
 $76 = (($adapt_curr) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)>(0);
 if (!($78)) {
  STACKTOP = sp;return;
 }
 $79 = (($adapt) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($77) - ($80))|0;
 $82 = $81 >> 5;
 $83 = (($82) + ($80))|0;
 HEAP32[$79>>2] = $83;
 $84 = (($adapt_curr) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($adapt) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) - ($87))|0;
 $89 = $88 >> 5;
 $90 = (($89) + ($87))|0;
 HEAP32[$86>>2] = $90;
 STACKTOP = sp;return;
}
function _od_state_opt_vtbl_init_c($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 52|0);
 HEAP32[$0>>2] = 3;
 $1 = (($state) + 56|0);
 HEAP32[$1>>2] = 1;
 $2 = (($state) + 60|0);
 HEAP32[$2>>2] = 4;
 $3 = (($state) + 64|0);
 HEAP32[$3>>2] = 1;
 STACKTOP = sp;return;
}
function _od_restore_fpu_c() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _od_state_init($state,$info) {
 $state = $state|0;
 $info = $info|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $pli$02 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($info|0)==(0|0);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($info) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $$off = (($2) + -1)|0;
 $3 = ($$off>>>0)>(3);
 if ($3) {
  $$0 = -10;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($info) + 40|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $$0 = -10;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($info) + 41|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $$0 = -10;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($state|0),0,720)|0;
 dest=$state+0|0; src=$info+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $10 = (($info) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 31)|0;
 $13 = $12 & -32;
 $14 = (($state) + 72|0);
 HEAP32[$14>>2] = $13;
 $15 = (($info) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 31)|0;
 $18 = $17 & -32;
 $19 = (($state) + 76|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$14>>2]|0;
 $21 = $20 >> 4;
 $22 = (($state) + 676|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$19>>2]|0;
 $24 = $23 >> 4;
 $25 = (($state) + 680|0);
 HEAP32[$25>>2] = $24;
 _od_state_opt_vtbl_init($state);
 _od_state_ref_imgs_init($state);
 _od_state_mvs_init($state);
 $26 = HEAP32[$14>>2]|0;
 $27 = $26 >> 5;
 $28 = (($state) + 684|0);
 HEAP32[$28>>2] = $27;
 $29 = HEAP32[$19>>2]|0;
 $30 = $29 >> 5;
 $31 = (($state) + 688|0);
 HEAP32[$31>>2] = $30;
 $32 = ($2|0)>(0);
 $33 = HEAP32[$28>>2]|0;
 $34 = $33 << 2;
 if ($32) {
  $37 = $34;$pli$02 = 0;
  while(1) {
   $35 = HEAP32[$31>>2]|0;
   $36 = Math_imul($35, $37)|0;
   $38 = (_malloc($36)|0);
   $39 = ((($state) + ($pli$02<<2)|0) + 700|0);
   HEAP32[$39>>2] = $38;
   $40 = (($pli$02) + 1)|0;
   $41 = HEAP32[$28>>2]|0;
   $42 = $41 << 2;
   $exitcond = ($40|0)==($2|0);
   if ($exitcond) {
    $$lcssa = $42;
    break;
   } else {
    $37 = $42;$pli$02 = $40;
   }
  }
 } else {
  $$lcssa = $34;
 }
 $43 = HEAP32[$31>>2]|0;
 $44 = (($43) + 2)|0;
 $45 = $$lcssa << 2;
 $46 = (($45) + 32)|0;
 $47 = Math_imul($46, $44)|0;
 $48 = (_malloc($47)|0);
 $49 = (($state) + 692|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$28>>2]|0;
 $51 = $50 << 2;
 $52 = (($51) + 8)|0;
 $53 = (($state) + 696|0);
 HEAP32[$53>>2] = $52;
 $54 = $52 << 2;
 $55 = $54 | 4;
 $56 = HEAP32[$49>>2]|0;
 $57 = (($56) + ($55)|0);
 HEAP32[$49>>2] = $57;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _od_state_opt_vtbl_init($state) {
 $state = $state|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _od_state_opt_vtbl_init_c($state);
 STACKTOP = sp;return;
}
function _od_state_ref_imgs_init($state) {
 $state = $state|0;
 var $$sum = 0, $$sum$1 = 0, $$sum1 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum40 = 0, $$sum41 = 0, $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data_sz$0$lcssa = 0;
 var $data_sz$022 = 0, $exitcond = 0, $imgi$020 = 0, $pli$023 = 0, $pli$114 = 0, $pli$28 = 0, $pli$28$1 = 0, $ref_img_data$019 = 0, $ref_img_data$1$lcssa = 0, $ref_img_data$113 = 0, $ref_img_data$3$lcssa = 0, $ref_img_data$3$lcssa$1 = 0, $ref_img_data$37 = 0, $ref_img_data$37$1 = 0, $scevgep = 0, $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 64)|0;
 $3 = (($state) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 64)|0;
 $6 = (($state) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  $data_sz$022 = 0;$pli$023 = 0;
  while(1) {
   $10 = ((($state) + ($pli$023<<1)|0) + 40|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = $2 >> $12;
   $14 = ((($state) + ($pli$023<<1)|0) + 41|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $5 >> $16;
   $18 = ($13*18)|0;
   $tmp2 = Math_imul($18, $17)|0;
   $19 = (($tmp2) + ($data_sz$022))|0;
   $20 = (($pli$023) + 1)|0;
   $21 = ($20|0)<($9|0);
   if ($21) {
    $data_sz$022 = $19;$pli$023 = $20;
   } else {
    $data_sz$0$lcssa = $19;
    break;
   }
  }
 } else {
  $data_sz$0$lcssa = 0;
 }
 $22 = $2 << 1;
 $23 = $2 << 4;
 $24 = (($data_sz$0$lcssa) + ($23))|0;
 $25 = (_malloc($24)|0);
 $26 = (($state) + 660|0);
 HEAP32[$26>>2] = $25;
 $27 = $5 << 1;
 $imgi$020 = 0;$ref_img_data$019 = $25;
 while(1) {
  $28 = HEAP32[$6>>2]|0;
  $29 = ((($state) + (($imgi$020*76)|0)|0) + 236|0);
  HEAP32[$29>>2] = $28;
  $30 = HEAP32[$0>>2]|0;
  $31 = $30 << 1;
  $32 = ((($state) + (($imgi$020*76)|0)|0) + 240|0);
  HEAP32[$32>>2] = $31;
  $33 = HEAP32[$3>>2]|0;
  $34 = $33 << 1;
  $35 = ((($state) + (($imgi$020*76)|0)|0) + 244|0);
  HEAP32[$35>>2] = $34;
  $36 = HEAP32[$29>>2]|0;
  $37 = ($36|0)>(0);
  if ($37) {
   $pli$114 = 0;$ref_img_data$113 = $ref_img_data$019;
   while(1) {
    $38 = ((($state) + ($pli$114<<1)|0) + 40|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $22 >> $40;
    $42 = ((($state) + ($pli$114<<1)|0) + 41|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $27 >> $44;
    $46 = 64 >>> $40;
    $47 = 64 >>> $44;
    $48 = Math_imul($47, $41)|0;
    $$sum1 = (($48) + ($46))|0;
    $49 = (($ref_img_data$113) + ($$sum1)|0);
    $50 = (((($state) + (($imgi$020*76)|0)|0) + ($pli$114<<4)|0) + 172|0);
    HEAP32[$50>>2] = $49;
    $51 = Math_imul($45, $41)|0;
    $52 = (($ref_img_data$113) + ($51)|0);
    $53 = HEAP8[$38>>0]|0;
    $54 = (((($state) + (($imgi$020*76)|0)|0) + ($pli$114<<4)|0) + 176|0);
    HEAP8[$54>>0] = $53;
    $55 = HEAP8[$42>>0]|0;
    $56 = (((($state) + (($imgi$020*76)|0)|0) + ($pli$114<<4)|0) + 177|0);
    HEAP8[$56>>0] = $55;
    $57 = (((($state) + (($imgi$020*76)|0)|0) + ($pli$114<<4)|0) + 180|0);
    HEAP32[$57>>2] = 1;
    $58 = (((($state) + (($imgi$020*76)|0)|0) + ($pli$114<<4)|0) + 184|0);
    HEAP32[$58>>2] = $41;
    $59 = (($pli$114) + 1)|0;
    $60 = HEAP32[$29>>2]|0;
    $61 = ($59|0)<($60|0);
    if ($61) {
     $pli$114 = $59;$ref_img_data$113 = $52;
    } else {
     $ref_img_data$1$lcssa = $52;
     break;
    }
   }
  } else {
   $ref_img_data$1$lcssa = $ref_img_data$019;
  }
  $62 = (($imgi$020) + 1)|0;
  $exitcond = ($62|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $imgi$020 = $62;$ref_img_data$019 = $ref_img_data$1$lcssa;
  }
 }
 $63 = HEAP32[$6>>2]|0;
 $64 = (($state) + 540|0);
 HEAP32[$64>>2] = $63;
 $65 = HEAP32[$0>>2]|0;
 $66 = (($state) + 544|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$3>>2]|0;
 $68 = (($state) + 548|0);
 HEAP32[$68>>2] = $67;
 $69 = HEAP32[$64>>2]|0;
 $70 = ($69|0)>(0);
 if ($70) {
  $pli$28 = 0;$ref_img_data$37 = $ref_img_data$1$lcssa;
  while(1) {
   $71 = ((($state) + ($pli$28<<1)|0) + 40|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = $2 >> $73;
   $75 = ((($state) + ($pli$28<<1)|0) + 41|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $5 >> $77;
   $79 = 32 >>> $73;
   $80 = 32 >>> $77;
   $81 = Math_imul($80, $74)|0;
   $$sum = (($81) + ($79))|0;
   $82 = (($ref_img_data$37) + ($$sum)|0);
   $83 = ((($state) + ($pli$28<<4)|0) + 476|0);
   HEAP32[$83>>2] = $82;
   $84 = Math_imul($78, $74)|0;
   $85 = (($ref_img_data$37) + ($84)|0);
   $86 = HEAP8[$71>>0]|0;
   $87 = ((($state) + ($pli$28<<4)|0) + 480|0);
   HEAP8[$87>>0] = $86;
   $88 = HEAP8[$75>>0]|0;
   $89 = ((($state) + ($pli$28<<4)|0) + 481|0);
   HEAP8[$89>>0] = $88;
   $90 = ((($state) + ($pli$28<<4)|0) + 484|0);
   HEAP32[$90>>2] = 1;
   $91 = ((($state) + ($pli$28<<4)|0) + 488|0);
   HEAP32[$91>>2] = $74;
   $92 = (($pli$28) + 1)|0;
   $93 = HEAP32[$64>>2]|0;
   $94 = ($92|0)<($93|0);
   if ($94) {
    $pli$28 = $92;$ref_img_data$37 = $85;
   } else {
    $ref_img_data$3$lcssa = $85;
    break;
   }
  }
 } else {
  $ref_img_data$3$lcssa = $ref_img_data$1$lcssa;
 }
 $95 = HEAP32[$6>>2]|0;
 $96 = (($state) + 616|0);
 HEAP32[$96>>2] = $95;
 $97 = HEAP32[$0>>2]|0;
 $98 = (($state) + 620|0);
 HEAP32[$98>>2] = $97;
 $99 = HEAP32[$3>>2]|0;
 $100 = (($state) + 624|0);
 HEAP32[$100>>2] = $99;
 $101 = HEAP32[$96>>2]|0;
 $102 = ($101|0)>(0);
 if ($102) {
  $pli$28$1 = 0;$ref_img_data$37$1 = $ref_img_data$3$lcssa;
  while(1) {
   $119 = ((($state) + ($pli$28$1<<1)|0) + 40|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $2 >> $121;
   $123 = ((($state) + ($pli$28$1<<1)|0) + 41|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $5 >> $125;
   $127 = 32 >>> $121;
   $128 = 32 >>> $125;
   $129 = Math_imul($128, $122)|0;
   $$sum$1 = (($129) + ($127))|0;
   $130 = (($ref_img_data$37$1) + ($$sum$1)|0);
   $131 = ((($state) + ($pli$28$1<<4)|0) + 552|0);
   HEAP32[$131>>2] = $130;
   $132 = Math_imul($126, $122)|0;
   $133 = (($ref_img_data$37$1) + ($132)|0);
   $134 = HEAP8[$119>>0]|0;
   $135 = ((($state) + ($pli$28$1<<4)|0) + 556|0);
   HEAP8[$135>>0] = $134;
   $136 = HEAP8[$123>>0]|0;
   $137 = ((($state) + ($pli$28$1<<4)|0) + 557|0);
   HEAP8[$137>>0] = $136;
   $138 = ((($state) + ($pli$28$1<<4)|0) + 560|0);
   HEAP32[$138>>2] = 1;
   $139 = ((($state) + ($pli$28$1<<4)|0) + 564|0);
   HEAP32[$139>>2] = $122;
   $140 = (($pli$28$1) + 1)|0;
   $141 = HEAP32[$96>>2]|0;
   $142 = ($140|0)<($141|0);
   if ($142) {
    $pli$28$1 = $140;$ref_img_data$37$1 = $133;
   } else {
    $ref_img_data$3$lcssa$1 = $133;
    break;
   }
  }
 } else {
  $ref_img_data$3$lcssa$1 = $ref_img_data$3$lcssa;
 }
 $103 = (($ref_img_data$3$lcssa$1) + 64|0);
 $104 = (($state) + 628|0);
 HEAP32[$104>>2] = $103;
 $$sum32 = (($22) + 64)|0;
 $105 = (($ref_img_data$3$lcssa$1) + ($$sum32)|0);
 $106 = (($state) + 632|0);
 HEAP32[$106>>2] = $105;
 $$sum33 = $2 << 2;
 $$sum34 = (($$sum33) + 64)|0;
 $107 = (($ref_img_data$3$lcssa$1) + ($$sum34)|0);
 $108 = (($state) + 636|0);
 HEAP32[$108>>2] = $107;
 $$sum35 = (($$sum33) + ($22))|0;
 $$sum36 = (($$sum35) + 64)|0;
 $109 = (($ref_img_data$3$lcssa$1) + ($$sum36)|0);
 $110 = (($state) + 640|0);
 HEAP32[$110>>2] = $109;
 $$sum37 = (($$sum35) + ($22))|0;
 $$sum38 = (($$sum37) + 64)|0;
 $111 = (($ref_img_data$3$lcssa$1) + ($$sum38)|0);
 $112 = (($state) + 644|0);
 HEAP32[$112>>2] = $111;
 $$sum39 = (($$sum37) + ($22))|0;
 $$sum40 = (($$sum39) + 64)|0;
 $113 = (($ref_img_data$3$lcssa$1) + ($$sum40)|0);
 $114 = (($state) + 648|0);
 HEAP32[$114>>2] = $113;
 $$sum41 = (($$sum39) + ($22))|0;
 $$sum42 = (($$sum41) + 64)|0;
 $115 = (($ref_img_data$3$lcssa$1) + ($$sum42)|0);
 $116 = (($state) + 652|0);
 HEAP32[$116>>2] = $115;
 $$sum43 = (($$sum41) + ($22))|0;
 $$sum44 = (($$sum43) + 64)|0;
 $117 = (($ref_img_data$3$lcssa$1) + ($$sum44)|0);
 $118 = (($state) + 656|0);
 HEAP32[$118>>2] = $117;
 $scevgep = (($state) + 156|0);
 ;HEAP32[$scevgep+0>>2]=4294967295|0;HEAP32[$scevgep+4>>2]=4294967295|0;HEAP32[$scevgep+8>>2]=4294967295|0;HEAP32[$scevgep+12>>2]=4294967295|0;
 STACKTOP = sp;return;
}
function _od_state_mvs_init($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 676|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 2;
 $3 = (($state) + 680|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 2;
 $6 = (($5) + 5)|0;
 $7 = (($2) + 5)|0;
 $8 = (_od_calloc_2d($6,$7,12)|0);
 $9 = (($state) + 672|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function _od_state_clear($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 672|0);
 $1 = HEAP32[$0>>2]|0;
 _od_free_2d($1);
 $2 = (($state) + 660|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = (($state) + 696|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 2;
 $7 = (($state) + 692|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (-4 - ($6))|0;
 $10 = (($8) + ($9)|0);
 HEAP32[$7>>2] = $10;
 _free($10);
 STACKTOP = sp;return;
}
function _od_adapt_ctx_reset($state,$is_keyframe) {
 $state = $state|0;
 $is_keyframe = $is_keyframe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond28 = 0, $exitcond29 = 0, $exitcond30 = 0, $exitcond34 = 0, $exitcond40 = 0, $i$316 = 0, $i$611 = 0, $i$710 = 0, $i$89 = 0, $pli$026 = 0, $pli$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 16|0);
 _generic_model_init($0);
 $1 = (($state) + 404|0);
 _generic_model_init($1);
 $2 = (($state) + 792|0);
 _generic_model_init($2);
 HEAP32[$state>>2] = 384;
 $3 = (($state) + 4|0);
 HEAP32[$3>>2] = 256;
 $4 = (($state) + 8|0);
 HEAP32[$4>>2] = 104;
 $5 = (($state) + 12|0);
 HEAP32[$5>>2] = 128;
 $pli$026 = 0;
 while(1) {
  $241 = ((($state) + (($pli$026*84)|0)|0) + 1264|0);
  HEAP32[$241>>2] = 131072;
  $242 = ((($state) + (($pli$026*84)|0)|0) + 1268|0);
  HEAP32[$242>>2] = 131072;
  $243 = ((($state) + (($pli$026*84)|0)|0) + 1272|0);
  HEAP32[$243>>2] = 131072;
  $244 = ((($state) + (($pli$026*84)|0)|0) + 1276|0);
  HEAP32[$244>>2] = 131072;
  $245 = ((($state) + (($pli$026*84)|0)|0) + 1280|0);
  HEAP32[$245>>2] = 131072;
  $246 = ((($state) + (($pli$026*84)|0)|0) + 1284|0);
  HEAP32[$246>>2] = 131072;
  $247 = ((($state) + (($pli$026*84)|0)|0) + 1288|0);
  HEAP32[$247>>2] = 131072;
  $248 = ((($state) + (($pli$026*84)|0)|0) + 1292|0);
  HEAP32[$248>>2] = 131072;
  $249 = ((($state) + (($pli$026*84)|0)|0) + 1296|0);
  HEAP32[$249>>2] = 131072;
  $250 = ((($state) + (($pli$026*84)|0)|0) + 1300|0);
  HEAP32[$250>>2] = 131072;
  $251 = ((($state) + (($pli$026*84)|0)|0) + 1304|0);
  HEAP32[$251>>2] = 131072;
  $252 = ((($state) + (($pli$026*84)|0)|0) + 1308|0);
  HEAP32[$252>>2] = 131072;
  $253 = ((($state) + (($pli$026*84)|0)|0) + 1312|0);
  HEAP32[$253>>2] = 131072;
  $254 = ((($state) + (($pli$026*84)|0)|0) + 1316|0);
  HEAP32[$254>>2] = 131072;
  $255 = ((($state) + (($pli$026*84)|0)|0) + 1320|0);
  HEAP32[$255>>2] = 131072;
  $256 = ((($state) + (($pli$026*84)|0)|0) + 1324|0);
  HEAP32[$256>>2] = 131072;
  $257 = ((($state) + (($pli$026*84)|0)|0) + 1328|0);
  HEAP32[$257>>2] = 131072;
  $258 = ((($state) + (($pli$026*84)|0)|0) + 1332|0);
  HEAP32[$258>>2] = 131072;
  $259 = ((($state) + (($pli$026*84)|0)|0) + 1336|0);
  HEAP32[$259>>2] = 131072;
  $260 = ((($state) + (($pli$026*84)|0)|0) + 1340|0);
  HEAP32[$260>>2] = 131072;
  $261 = ((($state) + (($pli$026*84)|0)|0) + 1344|0);
  HEAP32[$261>>2] = 131072;
  $262 = (($pli$026) + 1)|0;
  $exitcond40 = ($262|0)==(4);
  if ($exitcond40) {
   break;
  } else {
   $pli$026 = $262;
  }
 }
 $160 = ($is_keyframe|0)!=(0);
 $161 = $160 ? 24576 : 131072;
 $162 = (($state) + 1180|0);
 HEAP32[$162>>2] = $161;
 $163 = (($state) + 1600|0);
 HEAP32[$163>>2] = 26376;
 $164 = (($state) + 1184|0);
 HEAP32[$164>>2] = $161;
 $165 = (($state) + 1604|0);
 HEAP32[$165>>2] = 26376;
 $166 = (($state) + 1188|0);
 HEAP32[$166>>2] = $161;
 $167 = (($state) + 1608|0);
 HEAP32[$167>>2] = 26376;
 $168 = (($state) + 1192|0);
 HEAP32[$168>>2] = $161;
 $169 = (($state) + 1612|0);
 HEAP32[$169>>2] = 26376;
 $170 = (($state) + 1196|0);
 HEAP32[$170>>2] = $161;
 $171 = (($state) + 1616|0);
 HEAP32[$171>>2] = 26376;
 $172 = (($state) + 1200|0);
 HEAP32[$172>>2] = $161;
 $173 = (($state) + 1620|0);
 HEAP32[$173>>2] = 26376;
 $174 = (($state) + 1204|0);
 HEAP32[$174>>2] = $161;
 $175 = (($state) + 1624|0);
 HEAP32[$175>>2] = 26376;
 $176 = (($state) + 1208|0);
 HEAP32[$176>>2] = $161;
 $177 = (($state) + 1628|0);
 HEAP32[$177>>2] = 26376;
 $178 = (($state) + 1212|0);
 HEAP32[$178>>2] = $161;
 $179 = (($state) + 1632|0);
 HEAP32[$179>>2] = 26376;
 $180 = (($state) + 1216|0);
 HEAP32[$180>>2] = $161;
 $181 = (($state) + 1636|0);
 HEAP32[$181>>2] = 26376;
 $182 = (($state) + 1220|0);
 HEAP32[$182>>2] = $161;
 $183 = (($state) + 1640|0);
 HEAP32[$183>>2] = 26376;
 $184 = (($state) + 1224|0);
 HEAP32[$184>>2] = $161;
 $185 = (($state) + 1644|0);
 HEAP32[$185>>2] = 26376;
 $186 = (($state) + 1228|0);
 HEAP32[$186>>2] = $161;
 $187 = (($state) + 1648|0);
 HEAP32[$187>>2] = 26376;
 $188 = (($state) + 1232|0);
 HEAP32[$188>>2] = $161;
 $189 = (($state) + 1652|0);
 HEAP32[$189>>2] = 26376;
 $190 = (($state) + 1236|0);
 HEAP32[$190>>2] = $161;
 $191 = (($state) + 1656|0);
 HEAP32[$191>>2] = 26376;
 $192 = (($state) + 1240|0);
 HEAP32[$192>>2] = $161;
 $193 = (($state) + 1660|0);
 HEAP32[$193>>2] = 26376;
 $194 = (($state) + 1244|0);
 HEAP32[$194>>2] = $161;
 $195 = (($state) + 1664|0);
 HEAP32[$195>>2] = 26376;
 $196 = (($state) + 1248|0);
 HEAP32[$196>>2] = $161;
 $197 = (($state) + 1668|0);
 HEAP32[$197>>2] = 26376;
 $198 = (($state) + 1252|0);
 HEAP32[$198>>2] = $161;
 $199 = (($state) + 1672|0);
 HEAP32[$199>>2] = 26376;
 $200 = (($state) + 1256|0);
 HEAP32[$200>>2] = $161;
 $201 = (($state) + 1676|0);
 HEAP32[$201>>2] = 26376;
 $202 = (($state) + 1260|0);
 HEAP32[$202>>2] = $161;
 $203 = (($state) + 1680|0);
 HEAP32[$203>>2] = 26376;
 $204 = (($state) + 1832|0);
 HEAP32[$204>>2] = 128;
 $205 = HEAP16[155216>>1]|0;
 $206 = ($205&65535) >>> 6;
 $207 = (($state) + 1836|0);
 HEAP16[$207>>1] = $206;
 $208 = (($state) + 1850|0);
 HEAP16[$208>>1] = $206;
 $209 = (($state) + 1864|0);
 HEAP16[$209>>1] = $206;
 $210 = HEAP16[((155216 + 2|0))>>1]|0;
 $211 = ($210&65535) >>> 6;
 $212 = (($state) + 1838|0);
 HEAP16[$212>>1] = $211;
 $213 = (($state) + 1852|0);
 HEAP16[$213>>1] = $211;
 $214 = (($state) + 1866|0);
 HEAP16[$214>>1] = $211;
 $215 = HEAP16[((155216 + 4|0))>>1]|0;
 $216 = ($215&65535) >>> 6;
 $217 = (($state) + 1840|0);
 HEAP16[$217>>1] = $216;
 $218 = (($state) + 1854|0);
 HEAP16[$218>>1] = $216;
 $219 = (($state) + 1868|0);
 HEAP16[$219>>1] = $216;
 $220 = HEAP16[((155216 + 6|0))>>1]|0;
 $221 = ($220&65535) >>> 6;
 $222 = (($state) + 1842|0);
 HEAP16[$222>>1] = $221;
 $223 = (($state) + 1856|0);
 HEAP16[$223>>1] = $221;
 $224 = (($state) + 1870|0);
 HEAP16[$224>>1] = $221;
 $225 = HEAP16[((155216 + 8|0))>>1]|0;
 $226 = ($225&65535) >>> 6;
 $227 = (($state) + 1844|0);
 HEAP16[$227>>1] = $226;
 $228 = (($state) + 1858|0);
 HEAP16[$228>>1] = $226;
 $229 = (($state) + 1872|0);
 HEAP16[$229>>1] = $226;
 $230 = HEAP16[((155216 + 10|0))>>1]|0;
 $231 = ($230&65535) >>> 6;
 $232 = (($state) + 1846|0);
 HEAP16[$232>>1] = $231;
 $233 = (($state) + 1860|0);
 HEAP16[$233>>1] = $231;
 $234 = (($state) + 1874|0);
 HEAP16[$234>>1] = $231;
 $235 = HEAP16[((155216 + 12|0))>>1]|0;
 $236 = ($235&65535) >>> 6;
 $237 = (($state) + 1848|0);
 HEAP16[$237>>1] = $236;
 $238 = (($state) + 1862|0);
 HEAP16[$238>>1] = $236;
 $239 = (($state) + 1876|0);
 HEAP16[$239>>1] = $236;
 $240 = (($state) + 1880|0);
 HEAP32[$240>>2] = 128;
 $8 = (($state) + 1948|0);
 HEAP32[$8>>2] = 128;
 $i$316 = 0;
 while(1) {
  $6 = (($i$316) + 1)|0;
  $7 = HEAP32[$8>>2]|0;
  $9 = Math_imul($7, $6)|0;
  $10 = $9&65535;
  $11 = ((($state) + ($i$316<<1)|0) + 1952|0);
  HEAP16[$11>>1] = $10;
  $12 = (155232 + ($i$316<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13&65535) >>> 6;
  $15 = ((($state) + ($i$316<<1)|0) + 1884|0);
  HEAP16[$15>>1] = $14;
  $16 = ((155232 + ($i$316<<1)|0) + 32|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = ($17&65535) >>> 6;
  $19 = ((($state) + ($i$316<<1)|0) + 1916|0);
  HEAP16[$19>>1] = $18;
  $exitcond34 = ($6|0)==(16);
  if ($exitcond34) {
   break;
  } else {
   $i$316 = $6;
  }
 }
 $86 = (($state) + 1984|0);
 _generic_model_init($86);
 $87 = (($state) + 2392|0);
 HEAP32[$87>>2] = 1572864;
 $88 = (($state) + 2372|0);
 HEAP32[$88>>2] = 1572864;
 $89 = (($state) + 2396|0);
 HEAP32[$89>>2] = 1572864;
 $90 = (($state) + 2376|0);
 HEAP32[$90>>2] = 1572864;
 $91 = (($state) + 2400|0);
 HEAP32[$91>>2] = 1572864;
 $92 = (($state) + 2380|0);
 HEAP32[$92>>2] = 1572864;
 $93 = (($state) + 2404|0);
 HEAP32[$93>>2] = 1572864;
 $94 = (($state) + 2384|0);
 HEAP32[$94>>2] = 1572864;
 $95 = (($state) + 2408|0);
 HEAP32[$95>>2] = 1572864;
 $96 = (($state) + 2388|0);
 HEAP32[$96>>2] = 1572864;
 $97 = (($state) + 6032|0);
 HEAP32[$97>>2] = 128;
 $98 = (($state) + 6000|0);
 HEAP16[$98>>1] = 32;
 $99 = HEAP32[$97>>2]|0;
 $100 = $99 >>> 1;
 $101 = $100&65535;
 $102 = (($state) + 6002|0);
 HEAP16[$102>>1] = $101;
 $103 = HEAP32[$97>>2]|0;
 $104 = ($103*3)|0;
 $105 = $104 >>> 2;
 $106 = $105&65535;
 $107 = (($state) + 6004|0);
 HEAP16[$107>>1] = $106;
 $108 = HEAP32[$97>>2]|0;
 $109 = $108&65535;
 $110 = (($state) + 6006|0);
 HEAP16[$110>>1] = $109;
 $111 = HEAP32[$97>>2]|0;
 $112 = $111 >>> 2;
 $113 = $112&65535;
 $114 = (($state) + 6008|0);
 HEAP16[$114>>1] = $113;
 $115 = HEAP32[$97>>2]|0;
 $116 = $115 >>> 1;
 $117 = $116&65535;
 $118 = (($state) + 6010|0);
 HEAP16[$118>>1] = $117;
 $119 = HEAP32[$97>>2]|0;
 $120 = ($119*3)|0;
 $121 = $120 >>> 2;
 $122 = $121&65535;
 $123 = (($state) + 6012|0);
 HEAP16[$123>>1] = $122;
 $124 = HEAP32[$97>>2]|0;
 $125 = $124&65535;
 $126 = (($state) + 6014|0);
 HEAP16[$126>>1] = $125;
 $127 = HEAP32[$97>>2]|0;
 $128 = $127 >>> 2;
 $129 = $128&65535;
 $130 = (($state) + 6016|0);
 HEAP16[$130>>1] = $129;
 $131 = HEAP32[$97>>2]|0;
 $132 = $131 >>> 1;
 $133 = $132&65535;
 $134 = (($state) + 6018|0);
 HEAP16[$134>>1] = $133;
 $135 = HEAP32[$97>>2]|0;
 $136 = ($135*3)|0;
 $137 = $136 >>> 2;
 $138 = $137&65535;
 $139 = (($state) + 6020|0);
 HEAP16[$139>>1] = $138;
 $140 = HEAP32[$97>>2]|0;
 $141 = $140&65535;
 $142 = (($state) + 6022|0);
 HEAP16[$142>>1] = $141;
 $143 = HEAP32[$97>>2]|0;
 $144 = $143 >>> 2;
 $145 = $144&65535;
 $146 = (($state) + 6024|0);
 HEAP16[$146>>1] = $145;
 $147 = HEAP32[$97>>2]|0;
 $148 = $147 >>> 1;
 $149 = $148&65535;
 $150 = (($state) + 6026|0);
 HEAP16[$150>>1] = $149;
 $151 = HEAP32[$97>>2]|0;
 $152 = ($151*3)|0;
 $153 = $152 >>> 2;
 $154 = $153&65535;
 $155 = (($state) + 6028|0);
 HEAP16[$155>>1] = $154;
 $156 = HEAP32[$97>>2]|0;
 $157 = $156&65535;
 $158 = (($state) + 6030|0);
 HEAP16[$158>>1] = $157;
 $25 = (($state) + 2444|0);
 HEAP32[$25>>2] = 128;
 $159 = (($state) + 2412|0);
 HEAP16[$159>>1] = 1280;
 $i$611 = 1;
 while(1) {
  $20 = (($i$611) + -1)|0;
  $21 = ((($state) + ($20<<1)|0) + 2412|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = HEAP32[$25>>2]|0;
  $26 = (($23) + ($24))|0;
  $27 = $26&65535;
  $28 = ((($state) + ($i$611<<1)|0) + 2412|0);
  HEAP16[$28>>1] = $27;
  $29 = (($i$611) + 1)|0;
  $exitcond30 = ($29|0)==(16);
  if ($exitcond30) {
   break;
  } else {
   $i$611 = $29;
  }
 }
 $30 = (($state) + 1684|0);
 HEAP32[$30>>2] = 128;
 $i$710 = 0;
 while(1) {
  $31 = (($i$710) + 1)|0;
  $32 = HEAP32[$30>>2]|0;
  $33 = Math_imul($32, $31)|0;
  $34 = $33 >>> 2;
  $35 = $34&65535;
  $36 = ((($state) + ($i$710<<1)|0) + 1720|0);
  HEAP16[$36>>1] = $35;
  $37 = ((($state) + ($i$710<<1)|0) + 1688|0);
  HEAP16[$37>>1] = $35;
  $exitcond29 = ($31|0)==(16);
  if ($exitcond29) {
   $i$89 = 0;
   break;
  } else {
   $i$710 = $31;
  }
 }
 while(1) {
  $38 = (($i$89) + 1)|0;
  $39 = HEAP32[$30>>2]|0;
  $40 = Math_imul($39, $38)|0;
  $41 = $40 >>> 2;
  $42 = $41&65535;
  $43 = ((($state) + ($i$89<<1)|0) + 1752|0);
  HEAP16[$43>>1] = $42;
  $44 = HEAP32[$30>>2]|0;
  $45 = Math_imul($44, $38)|0;
  $46 = $45 >>> 2;
  $47 = $46&65535;
  $48 = ((($state) + ($i$89<<1)|0) + 1768|0);
  HEAP16[$48>>1] = $47;
  $49 = HEAP32[$30>>2]|0;
  $50 = Math_imul($49, $38)|0;
  $51 = $50 >>> 2;
  $52 = $51&65535;
  $53 = ((($state) + ($i$89<<1)|0) + 1784|0);
  HEAP16[$53>>1] = $52;
  $54 = HEAP32[$30>>2]|0;
  $55 = Math_imul($54, $38)|0;
  $56 = $55 >>> 2;
  $57 = $56&65535;
  $58 = ((($state) + ($i$89<<1)|0) + 1800|0);
  HEAP16[$58>>1] = $57;
  $59 = HEAP32[$30>>2]|0;
  $60 = Math_imul($59, $38)|0;
  $61 = $60 >>> 2;
  $62 = $61&65535;
  $63 = ((($state) + ($i$89<<1)|0) + 1816|0);
  HEAP16[$63>>1] = $62;
  $exitcond28 = ($38|0)==(8);
  if ($exitcond28) {
   $pli$15 = 0;
   break;
  } else {
   $i$89 = $38;
  }
 }
 while(1) {
  $65 = ((($state) + (($pli$15*388)|0)|0) + 2448|0);
  _generic_model_init($65);
  $66 = ((($state) + (($pli$15*388)|0)|0) + 4000|0);
  _generic_model_init($66);
  $67 = ((($state) + (($pli$15*12)|0)|0) + 5712|0);
  HEAP32[$67>>2] = 8;
  $68 = ((($state) + (($pli$15*12)|0)|0) + 5716|0);
  HEAP32[$68>>2] = 8;
  $69 = ((($state) + (($pli$15*12)|0)|0) + 5720|0);
  HEAP32[$69>>2] = 8;
  $70 = ($pli$15|0)>(0);
  $71 = $70 ? 8 : 32768;
  $72 = ((($state) + ($pli$15<<2)|0) + 5552|0);
  HEAP32[$72>>2] = $71;
  $73 = ((($state) + (($pli$15*36)|0)|0) + 5568|0);
  HEAP32[$73>>2] = $71;
  $74 = ((($state) + (($pli$15*36)|0)|0) + 5572|0);
  HEAP32[$74>>2] = $71;
  $75 = ((($state) + (($pli$15*36)|0)|0) + 5576|0);
  HEAP32[$75>>2] = $71;
  $76 = ((($state) + (($pli$15*36)|0)|0) + 5580|0);
  HEAP32[$76>>2] = $71;
  $77 = ((($state) + (($pli$15*36)|0)|0) + 5584|0);
  HEAP32[$77>>2] = $71;
  $78 = ((($state) + (($pli$15*36)|0)|0) + 5588|0);
  HEAP32[$78>>2] = $71;
  $79 = ((($state) + (($pli$15*36)|0)|0) + 5592|0);
  HEAP32[$79>>2] = $71;
  $80 = ((($state) + (($pli$15*36)|0)|0) + 5596|0);
  HEAP32[$80>>2] = $71;
  $81 = ((($state) + (($pli$15*36)|0)|0) + 5600|0);
  HEAP32[$81>>2] = $71;
  $82 = ((($state) + (($pli$15*36)|0)|0) + 5604|0);
  HEAP32[$82>>2] = $71;
  $83 = ((($state) + (($pli$15*36)|0)|0) + 5608|0);
  HEAP32[$83>>2] = $71;
  $84 = ((($state) + (($pli$15*36)|0)|0) + 5612|0);
  HEAP32[$84>>2] = $71;
  $85 = (($pli$15) + 1)|0;
  $exitcond = ($85|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $pli$15 = $85;
  }
 }
 $64 = (($state) + 5760|0);
 _memcpy(($64|0),(149448|0),240)|0;
 STACKTOP = sp;return;
}
function _od_state_upsample8($state,$dimg,$simg) {
 $state = $state|0;
 $dimg = $dimg|0;
 $simg = $simg|0;
 var $$lobit = 0, $$lobit10 = 0, $$lobit4 = 0, $$lobit5 = 0, $$lobit6 = 0, $$lobit7 = 0, $$lobit8 = 0, $$lobit9 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dst$024 = 0, $dst$1 = 0, $exitcond = 0, $exitcond48 = 0;
 var $or$cond = 0, $or$cond49 = 0, $pli$030 = 0, $scevgep$sum = 0, $scevgep42 = 0, $scevgep43$sum = 0, $scevgep44 = 0, $scevgep45$sum = 0, $scevgep46 = 0, $scevgep47 = 0, $smax = 0, $src$026 = 0, $src$1 = 0, $x$0 = 0, $x$120 = 0, $y$021 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 540|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($simg) + 68|0);
 $4 = (($simg) + 72|0);
 $pli$030 = 0;
 while(1) {
  $5 = ((($simg) + ($pli$030<<4)|0) + 4|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = 32 >>> $7;
  $9 = ((($simg) + ($pli$030<<4)|0) + 5|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = 32 >>> $11;
  $13 = HEAP32[$3>>2]|0;
  $14 = $13 >> $7;
  $15 = HEAP32[$4>>2]|0;
  $16 = $15 >> $11;
  $17 = ((($dimg) + ($pli$030<<4)|0) + 12|0);
  $18 = (0 - ($12))|0;
  $19 = (($16) + ($12))|0;
  $20 = (($19) + 3)|0;
  $21 = ($20|0)>($18|0);
  if ($21) {
   $22 = Math_imul($12, -2)|0;
   $23 = HEAP32[$17>>2]|0;
   $24 = (($dimg) + ($pli$030<<4)|0);
   $25 = Math_imul($22, $23)|0;
   $26 = HEAP32[$24>>2]|0;
   $27 = (($simg) + ($pli$030<<4)|0);
   $28 = (($26) + ($25)|0);
   $29 = HEAP32[$27>>2]|0;
   $30 = $8 << 1;
   $31 = (0 - ($30))|0;
   $32 = (($30) + -4)|0;
   $33 = (($14) + -3)|0;
   $34 = (($14) + -1)|0;
   $35 = (($14) + -2)|0;
   $36 = (($30) + -2)|0;
   $37 = ((($simg) + ($pli$030<<4)|0) + 12|0);
   $38 = (3 - ($12))|0;
   $39 = $8 << 1;
   $40 = (0 - ($39))|0;
   $41 = (($14) + ($39))|0;
   $42 = $41 << 1;
   $43 = (($16) + 3)|0;
   $44 = $8 << 1;
   $45 = (0 - ($44))|0;
   $46 = (($14) + ($44))|0;
   $47 = $46 << 1;
   $48 = (0 - ($8))|0;
   $49 = $48 << 1;
   $50 = (($14) + ($8))|0;
   $51 = $50 << 1;
   $52 = ($49|0)<($51|0);
   $53 = (($14) + -3)|0;
   $54 = ($53|0)>(2);
   $smax = $54 ? $53 : 2;
   $55 = $smax << 1;
   $56 = (($14) + ($8))|0;
   $57 = $56 << 1;
   $58 = (($16) + 3)|0;
   $59 = (($58) + ($12))|0;
   $dst$024 = $28;$src$026 = $29;$y$021 = $18;
   while(1) {
    $60 = ($y$021|0)<($19|0);
    if ($60) {
     $61 = $y$021 & 7;
     $62 = ((($state) + ($61<<2)|0) + 628|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($31)|0);
     $65 = HEAP8[$src$026>>0]|0;
     _memset(($64|0),($65|0),($32|0))|0;
     $66 = HEAP8[$src$026>>0]|0;
     $67 = (($63) + -4|0);
     HEAP8[$67>>0] = $66;
     $68 = HEAP8[$src$026>>0]|0;
     $69 = $68&255;
     $70 = ($69*31)|0;
     $71 = (($src$026) + 1|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = (($73) + 16)|0;
     $75 = (($74) + ($70))|0;
     $76 = $75 >>> 5;
     $77 = ($75>>>0)>(8191);
     $78 = $76&255;
     $79 = $77 ? -1 : $78;
     $80 = (($63) + -3|0);
     HEAP8[$80>>0] = $79;
     $81 = HEAP8[$src$026>>0]|0;
     $82 = (($63) + -2|0);
     HEAP8[$82>>0] = $81;
     $83 = HEAP8[$src$026>>0]|0;
     $84 = $83&255;
     $85 = ($84*36)|0;
     $86 = HEAP8[$71>>0]|0;
     $87 = $86&255;
     $88 = Math_imul($87, -5)|0;
     $89 = (($85) + 16)|0;
     $90 = (($89) + ($87))|0;
     $91 = (($90) + ($88))|0;
     $92 = $91 >> 5;
     $$lobit4 = $92 >>> 31;
     $93 = (($$lobit4) + 255)|0;
     $94 = ($92|0)>(255);
     $95 = $94 ? 255 : $92;
     $96 = $93 & $95;
     $97 = $96&255;
     $98 = (($63) + -1|0);
     HEAP8[$98>>0] = $97;
     $99 = HEAP8[$src$026>>0]|0;
     HEAP8[$63>>0] = $99;
     $100 = HEAP8[$src$026>>0]|0;
     $101 = $100&255;
     $102 = HEAP8[$71>>0]|0;
     $103 = $102&255;
     $104 = (($103) + ($101))|0;
     $105 = ($104*20)|0;
     $106 = (($src$026) + 2|0);
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = (($108) + ($101))|0;
     $110 = Math_imul($109, -5)|0;
     $111 = (($src$026) + 3|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = (($101) + 16)|0;
     $115 = (($114) + ($105))|0;
     $116 = (($115) + ($113))|0;
     $117 = (($116) + ($110))|0;
     $118 = $117 >> 5;
     $$lobit5 = $118 >>> 31;
     $119 = (($$lobit5) + 255)|0;
     $120 = ($118|0)>(255);
     $121 = $120 ? 255 : $118;
     $122 = $119 & $121;
     $123 = $122&255;
     $124 = (($63) + 1|0);
     HEAP8[$124>>0] = $123;
     $125 = HEAP8[$71>>0]|0;
     $126 = (($63) + 2|0);
     HEAP8[$126>>0] = $125;
     $127 = HEAP8[$71>>0]|0;
     $128 = $127&255;
     $129 = HEAP8[$106>>0]|0;
     $130 = $129&255;
     $131 = (($130) + ($128))|0;
     $132 = ($131*20)|0;
     $133 = HEAP8[$src$026>>0]|0;
     $134 = $133&255;
     $135 = HEAP8[$111>>0]|0;
     $136 = $135&255;
     $137 = (($136) + ($134))|0;
     $138 = Math_imul($137, -5)|0;
     $139 = (($src$026) + 4|0);
     $140 = HEAP8[$139>>0]|0;
     $141 = $140&255;
     $142 = (($134) + 16)|0;
     $143 = (($142) + ($132))|0;
     $144 = (($143) + ($141))|0;
     $145 = (($144) + ($138))|0;
     $146 = $145 >> 5;
     $$lobit6 = $146 >>> 31;
     $147 = (($$lobit6) + 255)|0;
     $148 = ($146|0)>(255);
     $149 = $148 ? 255 : $146;
     $150 = $147 & $149;
     $151 = $150&255;
     $152 = (($63) + 3|0);
     HEAP8[$152>>0] = $151;
     $scevgep45$sum = (($smax) + 1)|0;
     $scevgep46 = (($src$026) + ($scevgep45$sum)|0);
     $x$0 = 2;
     while(1) {
      $153 = ($x$0|0)<($33|0);
      $154 = (($src$026) + ($x$0)|0);
      $155 = HEAP8[$154>>0]|0;
      $156 = $x$0 << 1;
      $157 = (($63) + ($156)|0);
      HEAP8[$157>>0] = $155;
      $158 = HEAP8[$154>>0]|0;
      $159 = $158&255;
      $160 = (($x$0) + 1)|0;
      $161 = (($src$026) + ($160)|0);
      $162 = HEAP8[$161>>0]|0;
      $163 = $162&255;
      $164 = (($163) + ($159))|0;
      $165 = ($164*20)|0;
      $166 = (($x$0) + -1)|0;
      $167 = (($src$026) + ($166)|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = $168&255;
      $170 = (($x$0) + 2)|0;
      $171 = (($src$026) + ($170)|0);
      $172 = HEAP8[$171>>0]|0;
      $173 = $172&255;
      $174 = (($173) + ($169))|0;
      $175 = Math_imul($174, -5)|0;
      $176 = (($x$0) + -2)|0;
      $177 = (($src$026) + ($176)|0);
      $178 = HEAP8[$177>>0]|0;
      $179 = $178&255;
      $180 = (($179) + ($165))|0;
      $181 = (($180) + ($175))|0;
      if (!($153)) {
       break;
      }
      $182 = (($x$0) + 3)|0;
      $183 = (($src$026) + ($182)|0);
      $184 = HEAP8[$183>>0]|0;
      $185 = $184&255;
      $186 = (($181) + 16)|0;
      $187 = (($186) + ($185))|0;
      $188 = $187 >> 5;
      $$lobit10 = $188 >>> 31;
      $189 = (($$lobit10) + 255)|0;
      $190 = ($188|0)>(255);
      $191 = $190 ? 255 : $188;
      $192 = $189 & $191;
      $193 = $192&255;
      $194 = $156 | 1;
      $195 = (($63) + ($194)|0);
      HEAP8[$195>>0] = $193;
      $x$0 = $160;
     }
     $scevgep$sum = (($smax) + 2)|0;
     $scevgep42 = (($src$026) + ($scevgep$sum)|0);
     $scevgep43$sum = (($smax) + -1)|0;
     $scevgep44 = (($src$026) + ($scevgep43$sum)|0);
     $scevgep47 = (($src$026) + ($smax)|0);
     $196 = (($173) + 16)|0;
     $197 = (($196) + ($181))|0;
     $198 = $197 >> 5;
     $$lobit7 = $198 >>> 31;
     $199 = (($$lobit7) + 255)|0;
     $200 = ($198|0)>(255);
     $201 = $200 ? 255 : $198;
     $202 = $199 & $201;
     $203 = $202&255;
     $204 = $55 | 1;
     $205 = (($63) + ($204)|0);
     HEAP8[$205>>0] = $203;
     $206 = HEAP8[$scevgep46>>0]|0;
     $207 = $smax << 1;
     $208 = (($207) + 2)|0;
     $209 = (($63) + ($208)|0);
     HEAP8[$209>>0] = $206;
     $210 = HEAP8[$scevgep46>>0]|0;
     $211 = $210&255;
     $212 = HEAP8[$scevgep42>>0]|0;
     $213 = $212&255;
     $214 = (($213) + ($211))|0;
     $215 = ($214*20)|0;
     $216 = HEAP8[$scevgep47>>0]|0;
     $217 = $216&255;
     $218 = (($217) + ($213))|0;
     $219 = Math_imul($218, -5)|0;
     $220 = HEAP8[$scevgep44>>0]|0;
     $221 = $220&255;
     $222 = (($213) + 16)|0;
     $223 = (($222) + ($215))|0;
     $224 = (($223) + ($221))|0;
     $225 = (($224) + ($219))|0;
     $226 = $225 >> 5;
     $$lobit8 = $226 >>> 31;
     $227 = (($$lobit8) + 255)|0;
     $228 = ($226|0)>(255);
     $229 = $228 ? 255 : $226;
     $230 = $227 & $229;
     $231 = $230&255;
     $232 = $208 | 1;
     $233 = (($63) + ($232)|0);
     HEAP8[$233>>0] = $231;
     $234 = HEAP8[$scevgep42>>0]|0;
     $235 = $smax << 1;
     $236 = (($235) + 4)|0;
     $237 = (($63) + ($236)|0);
     HEAP8[$237>>0] = $234;
     $238 = HEAP8[$scevgep42>>0]|0;
     $239 = $238&255;
     $240 = ($239*36)|0;
     $241 = HEAP8[$scevgep46>>0]|0;
     $242 = $241&255;
     $243 = Math_imul($242, -5)|0;
     $244 = HEAP8[$scevgep47>>0]|0;
     $245 = $244&255;
     $246 = (($240) + 16)|0;
     $247 = (($246) + ($243))|0;
     $248 = (($247) + ($245))|0;
     $249 = $248 >> 5;
     $$lobit9 = $249 >>> 31;
     $250 = (($$lobit9) + 255)|0;
     $251 = ($249|0)>(255);
     $252 = $251 ? 255 : $249;
     $253 = $250 & $252;
     $254 = $253&255;
     $255 = $236 | 1;
     $256 = (($63) + ($255)|0);
     HEAP8[$256>>0] = $254;
     $257 = (($src$026) + ($34)|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = (($55) + 6)|0;
     $260 = (($63) + ($259)|0);
     HEAP8[$260>>0] = $258;
     $261 = HEAP8[$257>>0]|0;
     $262 = $261&255;
     $263 = ($262*31)|0;
     $264 = (($src$026) + ($35)|0);
     $265 = HEAP8[$264>>0]|0;
     $266 = $265&255;
     $267 = (($266) + 16)|0;
     $268 = (($267) + ($263))|0;
     $269 = $268 >>> 5;
     $270 = ($268>>>0)>(8191);
     $271 = $269&255;
     $272 = $270 ? -1 : $271;
     $273 = $259 | 1;
     $274 = (($63) + ($273)|0);
     HEAP8[$274>>0] = $272;
     $275 = (($55) + 8)|0;
     $276 = (($63) + ($275)|0);
     $277 = HEAP8[$257>>0]|0;
     _memset(($276|0),($277|0),($36|0))|0;
     $278 = ($y$021|0)>(-1);
     $279 = (($y$021) + 1)|0;
     $280 = ($279|0)<($16|0);
     $or$cond = $278 & $280;
     if ($or$cond) {
      $281 = HEAP32[$37>>2]|0;
      $282 = (($src$026) + ($281)|0);
      $src$1 = $282;
     } else {
      $src$1 = $src$026;
     }
    } else {
     $src$1 = $src$026;
    }
    $283 = ($y$021|0)<($38|0);
    do {
     if ($283) {
      $dst$1 = $dst$024;
     } else {
      $284 = ($y$021|0)<(1);
      $285 = ($y$021|0)>($43|0);
      $or$cond49 = $284 | $285;
      if ($or$cond49) {
       $286 = (($dst$024) + ($40)|0);
       $287 = (($y$021) + 5)|0;
       $288 = $287 & 7;
       $289 = ((($state) + ($288<<2)|0) + 628|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = (($290) + ($40)|0);
       _memcpy(($286|0),($291|0),($42|0))|0;
       $292 = HEAP32[$17>>2]|0;
       $$sum2 = (($292) - ($39))|0;
       $293 = (($dst$024) + ($$sum2)|0);
       $294 = HEAP32[$289>>2]|0;
       $295 = (($294) + ($40)|0);
       _memcpy(($293|0),($295|0),($42|0))|0;
       $296 = HEAP32[$17>>2]|0;
       $$sum3 = (($296) + ($292))|0;
       $297 = (($dst$024) + ($$sum3)|0);
       $dst$1 = $297;
       break;
      }
      $298 = (($y$021) + 3)|0;
      $299 = $298 & 7;
      $300 = ((($state) + ($299<<2)|0) + 628|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = (($y$021) + 4)|0;
      $303 = $302 & 7;
      $304 = ((($state) + ($303<<2)|0) + 628|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = (($y$021) + 5)|0;
      $307 = $306 & 7;
      $308 = ((($state) + ($307<<2)|0) + 628|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = (($y$021) + 6)|0;
      $311 = $310 & 7;
      $312 = ((($state) + ($311<<2)|0) + 628|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = (($y$021) + 7)|0;
      $315 = $314 & 7;
      $316 = ((($state) + ($315<<2)|0) + 628|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = $y$021 & 7;
      $319 = ((($state) + ($318<<2)|0) + 628|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = (($dst$024) + ($45)|0);
      $322 = (($309) + ($45)|0);
      _memcpy(($321|0),($322|0),($47|0))|0;
      $323 = HEAP32[$17>>2]|0;
      if ($52) {
       $x$120 = $49;
       while(1) {
        $324 = (($309) + ($x$120)|0);
        $325 = HEAP8[$324>>0]|0;
        $326 = $325&255;
        $327 = (($313) + ($x$120)|0);
        $328 = HEAP8[$327>>0]|0;
        $329 = $328&255;
        $330 = (($329) + ($326))|0;
        $331 = ($330*20)|0;
        $332 = (($305) + ($x$120)|0);
        $333 = HEAP8[$332>>0]|0;
        $334 = $333&255;
        $335 = (($317) + ($x$120)|0);
        $336 = HEAP8[$335>>0]|0;
        $337 = $336&255;
        $338 = (($337) + ($334))|0;
        $339 = Math_imul($338, -5)|0;
        $340 = (($301) + ($x$120)|0);
        $341 = HEAP8[$340>>0]|0;
        $342 = $341&255;
        $343 = (($320) + ($x$120)|0);
        $344 = HEAP8[$343>>0]|0;
        $345 = $344&255;
        $346 = (($331) + 16)|0;
        $347 = (($346) + ($342))|0;
        $348 = (($347) + ($339))|0;
        $349 = (($348) + ($345))|0;
        $350 = $349 >> 5;
        $$lobit = $350 >>> 31;
        $351 = (($$lobit) + 255)|0;
        $352 = ($350|0)>(255);
        $353 = $352 ? 255 : $350;
        $354 = $351 & $353;
        $355 = $354&255;
        $$sum1 = (($x$120) + ($323))|0;
        $356 = (($dst$024) + ($$sum1)|0);
        HEAP8[$356>>0] = $355;
        $357 = (($x$120) + 1)|0;
        $exitcond = ($357|0)==($57|0);
        if ($exitcond) {
         break;
        } else {
         $x$120 = $357;
        }
       }
      }
      $358 = HEAP32[$17>>2]|0;
      $$sum = (($358) + ($323))|0;
      $359 = (($dst$024) + ($$sum)|0);
      $dst$1 = $359;
     }
    } while(0);
    $360 = (($y$021) + 1)|0;
    $exitcond48 = ($360|0)==($59|0);
    if ($exitcond48) {
     break;
    } else {
     $dst$024 = $dst$1;$src$026 = $src$1;$y$021 = $360;
    }
   }
  }
  $361 = (($pli$030) + 1)|0;
  $362 = HEAP32[$0>>2]|0;
  $363 = ($361|0)<($362|0);
  if ($363) {
   $pli$030 = $361;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _od_state_pred_block_from_setup($state,$buf,$ystride,$ref,$pli,$vx,$vy,$oc,$s,$log_mvb_sz) {
 $state = $state|0;
 $buf = $buf|0;
 $ystride = $ystride|0;
 $ref = $ref|0;
 $pli = $pli|0;
 $vx = $vx|0;
 $vy = $vy|0;
 $oc = $oc|0;
 $s = $s|0;
 $log_mvb_sz = $log_mvb_sz|0;
 var $$sum = 0, $$sum1 = 0, $$sum1$1 = 0, $$sum1$2 = 0, $$sum1$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $etype$0 = 0, $etype$1 = 0, $grid = 0, $mvx = 0, $mvy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $grid = sp + 32|0;
 $mvx = sp + 16|0;
 $mvy = sp;
 $0 = ((($state) + ($ref<<2)|0) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((155088 + ($oc<<4)|0) + ($s<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((155152 + ($oc<<4)|0) + ($s<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($state) + 672|0);
 $7 = (((($state) + (($1*76)|0)|0) + ($pli<<4)|0) + 176|0);
 $8 = (((($state) + (($1*76)|0)|0) + ($pli<<4)|0) + 177|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = $9 << $log_mvb_sz;
 $11 = (($10) + ($vy))|0;
 $12 = HEAP32[$6>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = $15 << $log_mvb_sz;
 $$sum1 = (($16) + ($vx))|0;
 $17 = (($14) + (($$sum1*12)|0)|0);
 HEAP32[$grid>>2] = $17;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP8[$7>>0]|0;
 $20 = $19&255;
 $21 = (14 - ($20))|0;
 $22 = $18 << $21;
 HEAP32[$mvx>>2] = $22;
 $23 = HEAP32[$grid>>2]|0;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP8[$8>>0]|0;
 $27 = $26&255;
 $28 = (14 - ($27))|0;
 $29 = $25 << $28;
 HEAP32[$mvy>>2] = $29;
 $30 = (($5) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 << $log_mvb_sz;
 $33 = (($32) + ($vy))|0;
 $34 = HEAP32[$6>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($3) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 << $log_mvb_sz;
 $$sum1$1 = (($39) + ($vx))|0;
 $40 = (($36) + (($$sum1$1*12)|0)|0);
 $41 = (($grid) + 4|0);
 HEAP32[$41>>2] = $40;
 $42 = HEAP32[$40>>2]|0;
 $43 = HEAP8[$7>>0]|0;
 $44 = $43&255;
 $45 = (14 - ($44))|0;
 $46 = $42 << $45;
 $47 = (($mvx) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$41>>2]|0;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP8[$8>>0]|0;
 $52 = $51&255;
 $53 = (14 - ($52))|0;
 $54 = $50 << $53;
 $55 = (($mvy) + 4|0);
 HEAP32[$55>>2] = $54;
 $56 = (($5) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 << $log_mvb_sz;
 $59 = (($58) + ($vy))|0;
 $60 = HEAP32[$6>>2]|0;
 $61 = (($60) + ($59<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($3) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 << $log_mvb_sz;
 $$sum1$2 = (($65) + ($vx))|0;
 $66 = (($62) + (($$sum1$2*12)|0)|0);
 $67 = (($grid) + 8|0);
 HEAP32[$67>>2] = $66;
 $68 = HEAP32[$66>>2]|0;
 $69 = HEAP8[$7>>0]|0;
 $70 = $69&255;
 $71 = (14 - ($70))|0;
 $72 = $68 << $71;
 $73 = (($mvx) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = HEAP32[$67>>2]|0;
 $75 = (($74) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP8[$8>>0]|0;
 $78 = $77&255;
 $79 = (14 - ($78))|0;
 $80 = $76 << $79;
 $81 = (($mvy) + 8|0);
 HEAP32[$81>>2] = $80;
 $82 = (($5) + 12|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 << $log_mvb_sz;
 $85 = (($84) + ($vy))|0;
 $86 = HEAP32[$6>>2]|0;
 $87 = (($86) + ($85<<2)|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($3) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 << $log_mvb_sz;
 $$sum1$3 = (($91) + ($vx))|0;
 $92 = (($88) + (($$sum1$3*12)|0)|0);
 $93 = (($grid) + 12|0);
 HEAP32[$93>>2] = $92;
 $94 = HEAP32[$92>>2]|0;
 $95 = HEAP8[$7>>0]|0;
 $96 = $95&255;
 $97 = (14 - ($96))|0;
 $98 = $94 << $97;
 $99 = (($mvx) + 12|0);
 HEAP32[$99>>2] = $98;
 $100 = HEAP32[$93>>2]|0;
 $101 = (($100) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = HEAP8[$8>>0]|0;
 $104 = $103&255;
 $105 = (14 - ($104))|0;
 $106 = $102 << $105;
 $107 = (($mvy) + 12|0);
 HEAP32[$107>>2] = $106;
 $108 = HEAP32[$grid>>2]|0;
 $109 = (($108) + 8|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = ($110&255) >>> 1;
 $112 = $111 & 1;
 $113 = $112&255;
 $114 = (($grid) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + 8|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = ($117&255) >>> 2;
 $119 = $118 & 1;
 $120 = $119&255;
 $121 = $120 << 1;
 $122 = (($grid) + 12|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) + 8|0);
 $125 = HEAP8[$124>>0]|0;
 $126 = ($125&255) >>> 1;
 $127 = $126 & 1;
 $128 = $127&255;
 $129 = $128 << 2;
 $130 = ($110&255) >>> 2;
 $131 = $130 & 1;
 $132 = $131&255;
 $133 = $132 << 3;
 $134 = $133 | $113;
 $135 = $134 | $121;
 $136 = $135 | $129;
 $137 = $s & 1;
 $138 = ($137|0)==(0);
 if ($138) {
  $139 = (($oc) + 1)|0;
  $140 = $139 & 3;
  $141 = 1 << $140;
  $142 = $141 ^ -1;
  $143 = $136 & $142;
  $144 = $143 << 4;
  $145 = $144 | $143;
  $146 = $145 >> 3;
  $147 = $146 & $141;
  $148 = $147 | $143;
  $149 = 1 << $oc;
  $150 = $148 & $149;
  $151 = ($150|0)==(0);
  if ($151) {
   $etype$0 = $148;
  } else {
   $152 = (($mvx) + ($oc<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($mvx) + ($140<<2)|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + ($153))|0;
   $157 = $156 >> 1;
   HEAP32[$154>>2] = $157;
   $158 = (($mvy) + ($oc<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($mvy) + ($140<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + ($159))|0;
   $163 = $162 >> 1;
   HEAP32[$160>>2] = $163;
   $etype$0 = $148;
  }
 } else {
  $etype$0 = $136;
 }
 $164 = $s & 2;
 $165 = ($164|0)==(0);
 if ($165) {
  $166 = (($oc) + 2)|0;
  $167 = $166 & 3;
  $168 = 1 << $167;
  $169 = $168 ^ -1;
  $170 = $etype$0 & $169;
  $171 = $170 << 4;
  $172 = $171 | $170;
  $173 = $172 >> 1;
  $174 = $173 & $168;
  $175 = $174 | $170;
  $176 = (0 - ($oc))|0;
  $177 = $176 & 3;
  $178 = 8 >>> $177;
  $179 = $175 & $178;
  $180 = ($179|0)==(0);
  if ($180) {
   $etype$1 = $175;
  } else {
   $181 = (($mvx) + ($oc<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($oc) + 3)|0;
   $184 = $183 & 3;
   $185 = (($mvx) + ($184<<2)|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + ($182))|0;
   $188 = $187 >> 1;
   HEAP32[$185>>2] = $188;
   $189 = (($mvy) + ($oc<<2)|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($mvy) + ($184<<2)|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = (($192) + ($190))|0;
   $194 = $193 >> 1;
   HEAP32[$191>>2] = $194;
   $etype$1 = $175;
  }
 } else {
  $etype$1 = $etype$0;
 }
 $195 = (($vx) + -2)|0;
 $196 = (((($state) + (($1*76)|0)|0) + ($pli<<4)|0) + 176|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197&255;
 $199 = (3 - ($198))|0;
 $200 = $195 << $199;
 $201 = (($vy) + -2)|0;
 $202 = (((($state) + (($1*76)|0)|0) + ($pli<<4)|0) + 177|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = (3 - ($204))|0;
 $206 = $201 << $205;
 $207 = (((($state) + (($1*76)|0)|0) + ($pli<<4)|0) + 172|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = (((($state) + (($1*76)|0)|0) + ($pli<<4)|0) + 184|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = Math_imul($206, $210)|0;
 $$sum = (($211) + ($200))|0;
 $212 = (($208) + ($$sum)|0);
 $213 = (($log_mvb_sz) + 2)|0;
 $214 = (($213) - ($198))|0;
 $215 = (($213) - ($204))|0;
 _od_mc_predict8($state,$buf,$ystride,$212,$210,$mvx,$mvy,$etype$1,$oc,$s,$214,$215);
 STACKTOP = sp;return;
}
function _od_state_pred_block($state,$buf,$ystride,$ref,$pli,$vx,$vy,$log_mvb_sz) {
 $state = $state|0;
 $buf = $buf|0;
 $ystride = $ystride|0;
 $ref = $ref|0;
 $pli = $pli|0;
 $vx = $vx|0;
 $vy = $vy|0;
 $log_mvb_sz = $log_mvb_sz|0;
 var $$ = 0, $$in = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0;
 var $9 = 0, $buf$tr15 = 0, $buf$tr4 = 0, $buf$tr5 = 0, $log_mvb_sz$tr13 = 0, $log_mvb_sz$tr14 = 0, $log_mvb_sz$tr18 = 0, $oc$1 = 0, $s$0 = 0, $vx$tr16 = 0, $vx$tr7 = 0, $vx$tr8 = 0, $vy$tr10 = 0, $vy$tr11 = 0, $vy$tr17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($log_mvb_sz|0)>(0);
 L1: do {
  if ($0) {
   $1 = (($state) + 672|0);
   $2 = ((($state) + ($ref<<2)|0) + 156|0);
   $buf$tr15 = $buf;$log_mvb_sz$tr18 = $log_mvb_sz;$vx$tr16 = $vx;$vy$tr17 = $vy;
   while(1) {
    $$in = 1 << $log_mvb_sz$tr18;
    $3 = $$in >> 1;
    $4 = (($3) + ($vx$tr16))|0;
    $5 = (($3) + ($vy$tr17))|0;
    $6 = HEAP32[$1>>2]|0;
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($8) + (($4*12)|0)|0) + 8|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10 & 1;
    $12 = ($11<<24>>24)==(0);
    if ($12) {
     break;
    }
    $13 = HEAP32[$2>>2]|0;
    $14 = (($log_mvb_sz$tr18) + 1)|0;
    $15 = (((($state) + (($13*76)|0)|0) + ($pli<<4)|0) + 176|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = (($14) - ($17))|0;
    $19 = 1 << $18;
    $20 = (((($state) + (($13*76)|0)|0) + ($pli<<4)|0) + 177|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($14) - ($22))|0;
    $24 = (($log_mvb_sz$tr18) + -1)|0;
    _od_state_pred_block($state,$buf$tr15,$ystride,$ref,$pli,$vx$tr16,$vy$tr17,$24);
    $25 = (($buf$tr15) + ($19)|0);
    _od_state_pred_block($state,$25,$ystride,$ref,$pli,$4,$vy$tr17,$24);
    $26 = $ystride << $23;
    $27 = (($buf$tr15) + ($26)|0);
    _od_state_pred_block($state,$27,$ystride,$ref,$pli,$vx$tr16,$5,$24);
    $$sum2 = (($26) + ($19))|0;
    $28 = (($buf$tr15) + ($$sum2)|0);
    $29 = ($24|0)>(0);
    if ($29) {
     $buf$tr15 = $28;$log_mvb_sz$tr18 = $24;$vx$tr16 = $4;$vy$tr17 = $5;
    } else {
     $buf$tr5 = $28;$log_mvb_sz$tr14 = $24;$vx$tr8 = $4;$vy$tr11 = $5;
     break L1;
    }
   }
   $30 = ($log_mvb_sz$tr18|0)<(2);
   if ($30) {
    $buf$tr5 = $buf$tr15;$log_mvb_sz$tr14 = $log_mvb_sz$tr18;$vx$tr8 = $vx$tr16;$vy$tr11 = $vy$tr17;
   } else {
    $buf$tr4 = $buf$tr15;$log_mvb_sz$tr13 = $log_mvb_sz$tr18;$oc$1 = 0;$s$0 = 3;$vx$tr7 = $vx$tr16;$vy$tr10 = $vy$tr17;
    _od_state_pred_block_from_setup($state,$buf$tr4,$ystride,$ref,$pli,$vx$tr7,$vy$tr10,$oc$1,$s$0,$log_mvb_sz$tr13);
    STACKTOP = sp;return;
   }
  } else {
   $buf$tr5 = $buf;$log_mvb_sz$tr14 = $log_mvb_sz;$vx$tr8 = $vx;$vy$tr11 = $vy;
  }
 } while(0);
 $31 = (($log_mvb_sz$tr14) + 1)|0;
 $32 = 1 << $31;
 $33 = (($32) + -1)|0;
 $34 = $33 & $vx$tr8;
 $35 = ($34|0)!=(0);
 $36 = $35&1;
 $37 = $33 & $vy$tr11;
 $38 = ($37|0)==(0);
 $39 = $36 ^ 3;
 $$ = $38 ? $36 : $39;
 $40 = (($$) + 1)|0;
 $41 = $40 & 3;
 $$sum = (($41) + 1)|0;
 $42 = (155000 + ($$sum<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 << $log_mvb_sz$tr14;
 $45 = (($44) + ($vx$tr8))|0;
 $46 = (155000 + ($41<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 << $log_mvb_sz$tr14;
 $49 = (($48) + ($vy$tr11))|0;
 $50 = (($$) + 3)|0;
 $51 = $50 & 3;
 $$sum1 = (($51) + 1)|0;
 $52 = (155000 + ($$sum1<<2)|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 << $log_mvb_sz$tr14;
 $55 = (($54) + ($vx$tr8))|0;
 $56 = (155000 + ($51<<2)|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 << $log_mvb_sz$tr14;
 $59 = (($58) + ($vy$tr11))|0;
 $60 = (($state) + 672|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + ($49<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63) + (($45*12)|0)|0) + 8|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 & 1;
 $67 = $66&255;
 $68 = (($61) + ($59<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69) + (($55*12)|0)|0) + 8|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71 & 1;
 $73 = $72&255;
 $74 = $73 << 1;
 $75 = $74 | $67;
 $buf$tr4 = $buf$tr5;$log_mvb_sz$tr13 = $log_mvb_sz$tr14;$oc$1 = $$;$s$0 = $75;$vx$tr7 = $vx$tr8;$vy$tr10 = $vy$tr11;
 _od_state_pred_block_from_setup($state,$buf$tr4,$ystride,$ref,$pli,$vx$tr7,$vy$tr10,$oc$1,$s$0,$log_mvb_sz$tr13);
 STACKTOP = sp;return;
}
function _od_state_mc_predict($state,$ref) {
 $state = $state|0;
 $ref = $ref|0;
 var $$blk_w$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $blk_h$0 = 0, $blk_h$1 = 0, $blk_w$0 = 0, $blk_x$0 = 0, $blk_y$0 = 0, $buf = 0, $p$0 = 0, $p$1 = 0;
 var $p$21 = 0, $pli$03 = 0, $vx$07 = 0, $vy$09 = 0, $y$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $buf = sp;
 $0 = (($state) + 676|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 2;
 $3 = (($2) + 4)|0;
 $4 = (($state) + 680|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 2;
 $7 = (($6) + 4)|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ($3|0)>(0);
 $10 = (($state) + 540|0);
 $11 = (($state) + 544|0);
 $12 = (($state) + 548|0);
 $vy$09 = 0;
 while(1) {
  if ($9) {
   $13 = (($vy$09) + -2)|0;
   $vx$07 = 0;
   while(1) {
    $14 = HEAP32[$10>>2]|0;
    $15 = ($14|0)>(0);
    if ($15) {
     $16 = (($vx$07) + -2)|0;
     $pli$03 = 0;
     while(1) {
      _od_state_pred_block($state,$buf,16,$ref,$pli$03,$vx$07,$vy$09,2);
      $17 = ((($state) + ($pli$03<<4)|0) + 480|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = $18&255;
      $20 = 16 >>> $19;
      $21 = ((($state) + ($pli$03<<4)|0) + 481|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = $22&255;
      $24 = 16 >>> $23;
      $25 = (2 - ($19))|0;
      $26 = $16 << $25;
      $27 = (2 - ($23))|0;
      $28 = $13 << $27;
      $29 = ($26|0)<(0);
      if ($29) {
       $30 = (($26) + ($20))|0;
       $31 = (0 - ($26))|0;
       $32 = (($buf) + ($31)|0);
       $blk_w$0 = $30;$blk_x$0 = 0;$p$0 = $32;
      } else {
       $blk_w$0 = $20;$blk_x$0 = $26;$p$0 = $buf;
      }
      $33 = ($28|0)<(0);
      if ($33) {
       $34 = (($28) + ($24))|0;
       $35 = $28 << 4;
       $36 = (0 - ($35))|0;
       $37 = (($p$0) + ($36)|0);
       $blk_h$0 = $34;$blk_y$0 = 0;$p$1 = $37;
      } else {
       $blk_h$0 = $24;$blk_y$0 = $28;$p$1 = $p$0;
      }
      $38 = (($blk_x$0) + ($blk_w$0))|0;
      $39 = HEAP32[$11>>2]|0;
      $40 = HEAP8[$17>>0]|0;
      $41 = $40&255;
      $42 = $39 >> $41;
      $43 = ($38|0)>($42|0);
      $44 = (($42) - ($blk_x$0))|0;
      $$blk_w$0 = $43 ? $44 : $blk_w$0;
      $45 = (($blk_y$0) + ($blk_h$0))|0;
      $46 = HEAP32[$12>>2]|0;
      $47 = HEAP8[$21>>0]|0;
      $48 = $47&255;
      $49 = $46 >> $48;
      $50 = ($45|0)>($49|0);
      $51 = (($49) - ($blk_y$0))|0;
      $blk_h$1 = $50 ? $51 : $blk_h$0;
      $52 = (($blk_h$1) + ($blk_y$0))|0;
      $53 = ($blk_h$1|0)>(0);
      if ($53) {
       $54 = ((($state) + ($pli$03<<4)|0) + 476|0);
       $55 = ((($state) + ($pli$03<<4)|0) + 488|0);
       $p$21 = $p$1;$y$02 = $blk_y$0;
       while(1) {
        $56 = HEAP32[$54>>2]|0;
        $57 = HEAP32[$55>>2]|0;
        $58 = Math_imul($57, $y$02)|0;
        $$sum = (($58) + ($blk_x$0))|0;
        $59 = (($56) + ($$sum)|0);
        _memcpy(($59|0),($p$21|0),($$blk_w$0|0))|0;
        $60 = (($p$21) + 16|0);
        $61 = (($y$02) + 1)|0;
        $62 = ($61|0)<($52|0);
        if ($62) {
         $p$21 = $60;$y$02 = $61;
        } else {
         break;
        }
       }
      }
      $63 = (($pli$03) + 1)|0;
      $64 = HEAP32[$10>>2]|0;
      $65 = ($63|0)<($64|0);
      if ($65) {
       $pli$03 = $63;
      } else {
       break;
      }
     }
    }
    $66 = (($vx$07) + 4)|0;
    $67 = ($66|0)<($3|0);
    if ($67) {
     $vx$07 = $66;
    } else {
     break;
    }
   }
  }
  $68 = (($vy$09) + 4)|0;
  $69 = ($68|0)<($7|0);
  if ($69) {
   $vy$09 = $68;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _od_state_init_border($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond16 = 0;
 var $i$012 = 0, $indvar = 0, $indvar$next = 0, $scevgep = 0, $scevgep13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 684|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($state) + 688|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($state) + 692|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($state) + 696|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1 << 2;
 $9 = (($8) + 4)|0;
 $10 = ($9|0)>(-4);
 if ($10) {
  $11 = $3 << 2;
  $12 = $3 << 2;
  $13 = (($12) + 4)|0;
  $14 = ($11|0)<($13|0);
  $15 = $1 << 2;
  $i$012 = -4;
  while(1) {
   $26 = Math_imul($7, -4)|0;
   $27 = (($26) + ($i$012))|0;
   $28 = (($5) + ($27)|0);
   HEAP8[$28>>0] = 2;
   $29 = Math_imul($7, -3)|0;
   $30 = (($29) + ($i$012))|0;
   $31 = (($5) + ($30)|0);
   HEAP8[$31>>0] = 2;
   $32 = Math_imul($7, -2)|0;
   $33 = (($32) + ($i$012))|0;
   $34 = (($5) + ($33)|0);
   HEAP8[$34>>0] = 2;
   $35 = (($i$012) - ($7))|0;
   $36 = (($5) + ($35)|0);
   HEAP8[$36>>0] = 2;
   if ($14) {
    $37 = Math_imul($11, $7)|0;
    $38 = (($37) + ($i$012))|0;
    $39 = (($5) + ($38)|0);
    HEAP8[$39>>0] = 2;
    $40 = $11 | 1;
    $41 = Math_imul($40, $7)|0;
    $42 = (($41) + ($i$012))|0;
    $43 = (($5) + ($42)|0);
    HEAP8[$43>>0] = 2;
    $44 = (($40) + 1)|0;
    $45 = Math_imul($44, $7)|0;
    $46 = (($45) + ($i$012))|0;
    $47 = (($5) + ($46)|0);
    HEAP8[$47>>0] = 2;
    $48 = $11 | 3;
    $49 = Math_imul($48, $7)|0;
    $50 = (($49) + ($i$012))|0;
    $51 = (($5) + ($50)|0);
    HEAP8[$51>>0] = 2;
   }
   $52 = (($i$012) + 1)|0;
   $53 = $15 | 3;
   $exitcond16 = ($i$012|0)==($53|0);
   if ($exitcond16) {
    break;
   } else {
    $i$012 = $52;
   }
  }
 }
 $16 = $3 << 2;
 $17 = (($16) + 4)|0;
 $18 = ($17|0)>(-4);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $1 << 2;
 $20 = ($19|0)<($9|0);
 $21 = $7 << 2;
 $22 = (-4 - ($21))|0;
 $23 = $1 << 2;
 $24 = (($23) - ($21))|0;
 $25 = $3 << 2;
 $indvar = 0;
 while(1) {
  $54 = Math_imul($7, $indvar)|0;
  $55 = (($22) + ($54))|0;
  $scevgep = (($5) + ($55)|0);
  HEAP8[$scevgep>>0]=33686018&255;HEAP8[$scevgep+1>>0]=(33686018>>8)&255;HEAP8[$scevgep+2>>0]=(33686018>>16)&255;HEAP8[$scevgep+3>>0]=33686018>>24;
  if ($20) {
   $56 = (($24) + ($54))|0;
   $scevgep13 = (($5) + ($56)|0);
   HEAP8[$scevgep13>>0]=33686018&255;HEAP8[$scevgep13+1>>0]=(33686018>>8)&255;HEAP8[$scevgep13+2>>0]=(33686018>>16)&255;HEAP8[$scevgep13+3>>0]=33686018>>24;
  }
  $indvar$next = (($indvar) + 1)|0;
  $57 = (($25) + 7)|0;
  $exitcond = ($indvar|0)==($57|0);
  if ($exitcond) {
   break;
  } else {
   $indvar = $indvar$next;
  }
 }
 STACKTOP = sp;return;
}
function _od_tf_up_h_lp($dst,$dstride,$src,$sstride,$dx,$n) {
 $dst = $dst|0;
 $dstride = $dstride|0;
 $src = $src|0;
 $sstride = $sstride|0;
 $dx = $dx|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond4 = 0, $x$01 = 0, $y$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = $n >> 1;
 $2 = ($1|0)>(0);
 $y$02 = 0;
 while(1) {
  if ($2) {
   $3 = Math_imul($y$02, $sstride)|0;
   $4 = Math_imul($y$02, $dstride)|0;
   $x$01 = 0;
   while(1) {
    $5 = (($x$01) + ($3))|0;
    $6 = (($src) + ($5<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($5) + ($dx))|0;
    $9 = (($src) + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($7) - ($10))|0;
    $12 = (($11|0) / 2)&-1;
    $13 = (($7) - ($12))|0;
    $14 = $x$01 & 1;
    $15 = $x$01 << 1;
    $16 = (($15) + ($4))|0;
    $17 = (($16) + ($14))|0;
    $18 = (($dst) + ($17<<2)|0);
    HEAP32[$18>>2] = $13;
    $19 = $14 ^ 1;
    $20 = (($19) + ($16))|0;
    $21 = (($dst) + ($20<<2)|0);
    HEAP32[$21>>2] = $11;
    $22 = (($x$01) + 1)|0;
    $exitcond = ($22|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $x$01 = $22;
    }
   }
  }
  $23 = (($y$02) + 1)|0;
  $exitcond4 = ($23|0)==($n|0);
  if ($exitcond4) {
   break;
  } else {
   $y$02 = $23;
  }
 }
 STACKTOP = sp;return;
}
function _od_tf_up_v_lp($dst,$dstride,$src,$sstride,$dy,$n) {
 $dst = $dst|0;
 $dstride = $dstride|0;
 $src = $src|0;
 $sstride = $sstride|0;
 $dy = $dy|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $x$01 = 0, $y$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = ($n|0)>(0);
 $y$02 = 0;
 while(1) {
  $3 = $y$02 & 1;
  if ($2) {
   $4 = Math_imul($y$02, $sstride)|0;
   $5 = (($y$02) + ($dy))|0;
   $6 = Math_imul($5, $sstride)|0;
   $7 = $y$02 << 1;
   $8 = $7 | $3;
   $9 = Math_imul($8, $dstride)|0;
   $10 = $7 | 1;
   $11 = (($10) - ($3))|0;
   $12 = Math_imul($11, $dstride)|0;
   $x$01 = 0;
   while(1) {
    $13 = (($x$01) + ($4))|0;
    $14 = (($src) + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($x$01) + ($6))|0;
    $17 = (($src) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) - ($18))|0;
    $20 = (($19|0) / 2)&-1;
    $21 = (($15) - ($20))|0;
    $22 = (($x$01) + ($9))|0;
    $23 = (($dst) + ($22<<2)|0);
    HEAP32[$23>>2] = $21;
    $24 = (($x$01) + ($12))|0;
    $25 = (($dst) + ($24<<2)|0);
    HEAP32[$25>>2] = $19;
    $26 = (($x$01) + 1)|0;
    $exitcond = ($26|0)==($n|0);
    if ($exitcond) {
     break;
    } else {
     $x$01 = $26;
    }
   }
  }
  $27 = (($y$02) + 1)|0;
  $exitcond6 = ($27|0)==($0|0);
  if ($exitcond6) {
   break;
  } else {
   $y$02 = $27;
  }
 }
 STACKTOP = sp;return;
}
function _od_tf_up_hv_lp($dst,$dstride,$src,$sstride,$dx,$dy,$n) {
 $dst = $dst|0;
 $dstride = $dstride|0;
 $src = $src|0;
 $sstride = $sstride|0;
 $dx = $dx|0;
 $dy = $dy|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $x$01 = 0, $y$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = ($0|0)>(0);
 if ($1) {
  $y$02 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = $y$02 & 1;
  $3 = Math_imul($y$02, $sstride)|0;
  $4 = (($y$02) + ($dy))|0;
  $5 = Math_imul($4, $sstride)|0;
  $6 = $y$02 << 1;
  $7 = $6 | $2;
  $8 = Math_imul($7, $dstride)|0;
  $9 = $6 | 1;
  $10 = (($9) - ($2))|0;
  $11 = Math_imul($10, $dstride)|0;
  $x$01 = 0;
  while(1) {
   $12 = (($x$01) + ($3))|0;
   $13 = (($src) + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + ($dx))|0;
   $16 = (($src) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($x$01) + ($5))|0;
   $19 = (($src) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + ($dx))|0;
   $22 = (($src) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($17) + ($14))|0;
   $25 = (($23) - ($20))|0;
   $26 = (($24) - ($25))|0;
   $27 = $26 >> 1;
   $28 = (($27) - ($20))|0;
   $29 = (($27) - ($17))|0;
   $30 = (($24) - ($28))|0;
   $31 = (($29) + ($25))|0;
   $32 = $x$01 & 1;
   $33 = $x$01 << 1;
   $34 = (($33) + ($8))|0;
   $35 = (($34) + ($32))|0;
   $36 = (($dst) + ($35<<2)|0);
   HEAP32[$36>>2] = $30;
   $37 = $32 ^ 1;
   $38 = (($37) + ($34))|0;
   $39 = (($dst) + ($38<<2)|0);
   HEAP32[$39>>2] = $29;
   $40 = (($33) + ($11))|0;
   $41 = (($40) + ($32))|0;
   $42 = (($dst) + ($41<<2)|0);
   HEAP32[$42>>2] = $28;
   $43 = $32 ^ 1;
   $44 = (($43) + ($40))|0;
   $45 = (($dst) + ($44<<2)|0);
   HEAP32[$45>>2] = $31;
   $46 = (($x$01) + 1)|0;
   $exitcond = ($46|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $x$01 = $46;
   }
  }
  $47 = (($y$02) + 1)|0;
  $exitcond6 = ($47|0)==($0|0);
  if ($exitcond6) {
   break;
  } else {
   $y$02 = $47;
  }
 }
 STACKTOP = sp;return;
}
function _od_tf_down_hv($dst,$dstride,$src,$sstride,$n) {
 $dst = $dst|0;
 $dstride = $dstride|0;
 $src = $src|0;
 $sstride = $sstride|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $x$01 = 0, $y$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = ($0|0)>(0);
 if ($1) {
  $y$02 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = $y$02 & 1;
  $3 = $y$02 << 1;
  $4 = $3 | $2;
  $5 = Math_imul($4, $sstride)|0;
  $6 = $3 | 1;
  $7 = (($6) - ($2))|0;
  $8 = Math_imul($7, $sstride)|0;
  $9 = Math_imul($y$02, $dstride)|0;
  $10 = (($y$02) + ($0))|0;
  $11 = Math_imul($10, $dstride)|0;
  $x$01 = 0;
  while(1) {
   $12 = $x$01 & 1;
   $13 = $x$01 << 1;
   $14 = (($13) + ($5))|0;
   $15 = (($14) + ($12))|0;
   $16 = (($src) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $12 ^ 1;
   $19 = (($18) + ($14))|0;
   $20 = (($src) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($13) + ($8))|0;
   $23 = (($22) + ($12))|0;
   $24 = (($src) + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $12 ^ 1;
   $27 = (($26) + ($22))|0;
   $28 = (($src) + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($25) + ($17))|0;
   $31 = (($29) - ($21))|0;
   $32 = (($30) - ($31))|0;
   $33 = $32 >> 1;
   $34 = (($33) - ($21))|0;
   $35 = (($33) - ($25))|0;
   $36 = (($30) - ($34))|0;
   $37 = (($35) + ($31))|0;
   $38 = (($x$01) + ($9))|0;
   $39 = (($dst) + ($38<<2)|0);
   HEAP32[$39>>2] = $36;
   $40 = (($38) + ($0))|0;
   $41 = (($dst) + ($40<<2)|0);
   HEAP32[$41>>2] = $34;
   $42 = (($x$01) + ($11))|0;
   $43 = (($dst) + ($42<<2)|0);
   HEAP32[$43>>2] = $35;
   $44 = (($42) + ($0))|0;
   $45 = (($dst) + ($44<<2)|0);
   HEAP32[$45>>2] = $37;
   $46 = (($x$01) + 1)|0;
   $exitcond = ($46|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $x$01 = $46;
   }
  }
  $47 = (($y$02) + 1)|0;
  $exitcond6 = ($47|0)==($0|0);
  if ($exitcond6) {
   break;
  } else {
   $y$02 = $47;
  }
 }
 STACKTOP = sp;return;
}
function _od_tf_filter_inv_2d($dst,$dstride,$src,$sstride,$n) {
 $dst = $dst|0;
 $dstride = $dstride|0;
 $src = $src|0;
 $sstride = $sstride|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond11 = 0;
 var $exitcond12 = 0, $exitcond14 = 0, $i$06 = 0, $i$13 = 0, $j$010 = 0, $j$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dst|0)==($src|0);
 if (!($0)) {
  $1 = ($n|0)>(0);
  if ($1) {
   $j$010 = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $2 = Math_imul($j$010, $sstride)|0;
   $3 = Math_imul($j$010, $dstride)|0;
   $i$06 = 0;
   while(1) {
    $5 = (($i$06) + ($2))|0;
    $6 = (($src) + ($5<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($i$06) + ($3))|0;
    $9 = (($dst) + ($8<<2)|0);
    HEAP32[$9>>2] = $7;
    $10 = (($i$06) + 1)|0;
    $exitcond12 = ($10|0)==($n|0);
    if ($exitcond12) {
     break;
    } else {
     $i$06 = $10;
    }
   }
   $11 = (($j$010) + 1)|0;
   $exitcond14 = ($11|0)==($n|0);
   if ($exitcond14) {
    break;
   } else {
    $j$010 = $11;
   }
  }
 }
 $4 = ($n|0)>(0);
 if ($4) {
  $i$13 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $13 = (($dst) + ($i$13<<2)|0);
  _od_tf_filter_inv($13,$dstride,$n);
  $14 = (($i$13) + 1)|0;
  $exitcond11 = ($14|0)==($n|0);
  if ($exitcond11) {
   break;
  } else {
   $i$13 = $14;
  }
 }
 $12 = ($n|0)>(0);
 if ($12) {
  $j$11 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = Math_imul($j$11, $dstride)|0;
  $16 = (($dst) + ($15<<2)|0);
  _od_tf_filter_inv($16,1,$n);
  $17 = (($j$11) + 1)|0;
  $exitcond = ($17|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $j$11 = $17;
  }
 }
 STACKTOP = sp;return;
}
function _od_tf_filter_inv($dst,$dstride,$n) {
 $dst = $dst|0;
 $dstride = $dstride|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $u$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = (($0) + -1)|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($n) + -1)|0;
 $4 = Math_imul($3, $dstride)|0;
 $5 = (($dst) + ($4<<2)|0);
 $6 = $dstride << 1;
 $7 = (0 - ($6))|0;
 $8 = (($0) + -1)|0;
 $i$01 = 0;$u$02 = $5;
 while(1) {
  $9 = (($u$02) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >> 1;
  $12 = HEAP32[$u$02>>2]|0;
  $13 = (($12) + ($11))|0;
  HEAP32[$u$02>>2] = $13;
  $14 = $13 >> 1;
  $15 = HEAP32[$9>>2]|0;
  $16 = (($15) - ($14))|0;
  HEAP32[$9>>2] = $16;
  $17 = (($i$01) + 1)|0;
  $exitcond = ($17|0)==($8|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $17;$u$02 = $9;
  }
 }
 STACKTOP = sp;return;
}
function _od_convert_block_down($dst,$dstride,$src,$sstride,$curr_size,$dest_size,$filter) {
 $dst = $dst|0;
 $dstride = $dstride|0;
 $src = $src|0;
 $sstride = $sstride|0;
 $curr_size = $curr_size|0;
 $dest_size = $dest_size|0;
 $filter = $filter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond16 = 0, $exitcond23 = 0, $i$01 = 0, $j$03 = 0, $j$113 = 0, $or$cond = 0;
 var $scevgep = 0, $scevgep21 = 0, $scratch = 0, $scratch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $scratch = sp + 1024|0;
 $scratch2 = sp;
 $0 = (($curr_size) + 2)|0;
 $1 = 1 << $0;
 $2 = ($curr_size|0)==($dest_size|0);
 if ($2) {
  $5 = ($dst|0)!=($src|0);
  $6 = ($1|0)>(0);
  $or$cond = $5 & $6;
  if ($or$cond) {
   $j$03 = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $7 = Math_imul($j$03, $sstride)|0;
   $8 = Math_imul($j$03, $dstride)|0;
   $i$01 = 0;
   while(1) {
    $9 = (($i$01) + ($7))|0;
    $10 = (($src) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($i$01) + ($8))|0;
    $13 = (($dst) + ($12<<2)|0);
    HEAP32[$13>>2] = $11;
    $14 = (($i$01) + 1)|0;
    $exitcond = ($14|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $i$01 = $14;
    }
   }
   $15 = (($j$03) + 1)|0;
   $exitcond16 = ($15|0)==($1|0);
   if ($exitcond16) {
    break;
   } else {
    $j$03 = $15;
   }
  }
  STACKTOP = sp;return;
 }
 $3 = ($1|0)>(0);
 if ($3) {
  $4 = $1 << 2;
  $j$113 = 0;
  while(1) {
   $16 = Math_imul($j$113, $sstride)|0;
   $17 = $j$113 << 4;
   $scevgep21 = (($src) + ($16<<2)|0);
   $scevgep = (($scratch) + ($17<<2)|0);
   _memcpy(($scevgep|0),($scevgep21|0),($4|0))|0;
   $18 = (($j$113) + 1)|0;
   $exitcond23 = ($18|0)==($1|0);
   if ($exitcond23) {
    break;
   } else {
    $j$113 = $18;
   }
  }
 }
 $19 = ($filter|0)==(0);
 if (!($19)) {
  _od_tf_filter_inv_2d($scratch,16,$scratch,16,$1);
 }
 $20 = (($curr_size) + -1)|0;
 $21 = ($20|0)==($dest_size|0);
 if ($21) {
  _od_tf_down_hv($dst,$dstride,$scratch,16,$1);
  STACKTOP = sp;return;
 } else {
  _od_tf_down_hv($scratch2,16,$scratch,16,$1);
  $22 = $1 >> 1;
  $23 = Math_imul($22, $dstride)|0;
  $24 = $22 << 4;
  _od_convert_block_down($dst,$dstride,$scratch2,16,$20,$dest_size,$filter);
  $25 = (($dst) + ($22<<2)|0);
  $26 = (($scratch2) + ($22<<2)|0);
  _od_convert_block_down($25,$dstride,$26,16,$20,$dest_size,$filter);
  $27 = (($dst) + ($23<<2)|0);
  $28 = (($scratch2) + ($24<<2)|0);
  _od_convert_block_down($27,$dstride,$28,16,$20,$dest_size,$filter);
  $29 = (($22) + ($23))|0;
  $30 = (($dst) + ($29<<2)|0);
  $31 = (($22) + ($24))|0;
  $32 = (($scratch2) + ($31<<2)|0);
  _od_convert_block_down($30,$dstride,$32,16,$20,$dest_size,$filter);
  STACKTOP = sp;return;
 }
}
function _ogg_page_version($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _ogg_page_continued($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($0) + 5|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 & 1;
 STACKTOP = sp;return ($4|0);
}
function _ogg_page_bos($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($0) + 5|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 & 2;
 STACKTOP = sp;return ($4|0);
}
function _ogg_page_eos($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($0) + 5|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 & 4;
 STACKTOP = sp;return ($4|0);
}
function _ogg_page_granulepos($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($0) + 13|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,8)|0);
 $5 = tempRet0;
 $6 = (($0) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $4 | $8;
 $10 = (_bitshift64Shl(($9|0),($5|0),8)|0);
 $11 = tempRet0;
 $12 = (($0) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $10 | $14;
 $16 = (_bitshift64Shl(($15|0),($11|0),8)|0);
 $17 = tempRet0;
 $18 = (($0) + 10|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $16 | $20;
 $22 = (_bitshift64Shl(($21|0),($17|0),8)|0);
 $23 = tempRet0;
 $24 = (($0) + 9|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $22 | $26;
 $28 = (_bitshift64Shl(($27|0),($23|0),8)|0);
 $29 = tempRet0;
 $30 = (($0) + 8|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $28 | $32;
 $34 = (_bitshift64Shl(($33|0),($29|0),8)|0);
 $35 = tempRet0;
 $36 = (($0) + 7|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $34 | $38;
 $40 = (_bitshift64Shl(($39|0),($35|0),8)|0);
 $41 = tempRet0;
 $42 = (($0) + 6|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $40 | $44;
 tempRet0 = $41;
 STACKTOP = sp;return ($45|0);
}
function _ogg_page_serialno($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($0) + 14|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (($0) + 15|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $7 | $3;
 $9 = (($0) + 16|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 16;
 $13 = $8 | $12;
 $14 = (($0) + 17|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = $13 | $17;
 STACKTOP = sp;return ($18|0);
}
function _ogg_page_pageno($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($0) + 18|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (($0) + 19|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $7 | $3;
 $9 = (($0) + 20|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 16;
 $13 = $8 | $12;
 $14 = (($0) + 21|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = $13 | $17;
 STACKTOP = sp;return ($18|0);
}
function _ogg_stream_init($os,$serialno) {
 $os = $os|0;
 $serialno = $serialno|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($os|0),0,360)|0;
 $1 = (($os) + 4|0);
 HEAP32[$1>>2] = 16384;
 $2 = (($os) + 24|0);
 HEAP32[$2>>2] = 1024;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_malloc($3)|0);
 HEAP32[$os>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = $5 << 2;
 $7 = (_malloc($6)|0);
 $8 = (($os) + 16|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$2>>2]|0;
 $10 = $9 << 3;
 $11 = (_malloc($10)|0);
 $12 = (($os) + 20|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$os>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = HEAP32[$8>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = ($11|0)==(0|0);
  $or$cond = $16 | $17;
  if (!($or$cond)) {
   $18 = (($os) + 336|0);
   HEAP32[$18>>2] = $serialno;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 (_ogg_stream_clear($os)|0);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _ogg_stream_clear($os) {
 $os = $os|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return 0;
 }
 $1 = HEAP32[$os>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = (($os) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 $6 = (($os) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
 }
 _memset(($os|0),0,360)|0;
 STACKTOP = sp;return 0;
}
function _ogg_stream_check($os) {
 $os = $os|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return -1;
 } else {
  $1 = HEAP32[$os>>2]|0;
  $2 = ($1|0)==(0|0);
  $$ = $2 << 31 >> 31;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _ogg_page_checksum_set($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc_reg$0$lcssa = 0, $crc_reg$03 = 0, $crc_reg$1$lcssa = 0;
 var $crc_reg$11 = 0, $i$04 = 0, $i$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($og|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$og>>2]|0;
 $2 = (($1) + 22|0);
 HEAP8[$2>>0] = 0;
 $3 = HEAP32[$og>>2]|0;
 $4 = (($3) + 23|0);
 HEAP8[$4>>0] = 0;
 $5 = HEAP32[$og>>2]|0;
 $6 = (($5) + 24|0);
 HEAP8[$6>>0] = 0;
 $7 = HEAP32[$og>>2]|0;
 $8 = (($7) + 25|0);
 HEAP8[$8>>0] = 0;
 $9 = (($og) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$og>>2]|0;
  $13 = HEAP32[$9>>2]|0;
  $crc_reg$03 = 0;$i$04 = 0;
  while(1) {
   $20 = $crc_reg$03 << 8;
   $21 = $crc_reg$03 >>> 24;
   $22 = (($12) + ($i$04)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $24 ^ $21;
   $26 = (155808 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 ^ $20;
   $29 = (($i$04) + 1)|0;
   $30 = ($29|0)<($13|0);
   if ($30) {
    $crc_reg$03 = $28;$i$04 = $29;
   } else {
    $crc_reg$0$lcssa = $28;
    break;
   }
  }
 } else {
  $crc_reg$0$lcssa = 0;
 }
 $14 = (($og) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)>(0);
 if ($16) {
  $17 = (($og) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$14>>2]|0;
  $crc_reg$11 = $crc_reg$0$lcssa;$i$12 = 0;
  while(1) {
   $31 = $crc_reg$11 << 8;
   $32 = $crc_reg$11 >>> 24;
   $33 = (($18) + ($i$12)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 ^ $32;
   $37 = (155808 + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 ^ $31;
   $40 = (($i$12) + 1)|0;
   $41 = ($40|0)<($19|0);
   if ($41) {
    $crc_reg$11 = $39;$i$12 = $40;
   } else {
    $crc_reg$1$lcssa = $39;
    break;
   }
  }
 } else {
  $crc_reg$1$lcssa = $crc_reg$0$lcssa;
 }
 $42 = $crc_reg$1$lcssa&255;
 $43 = HEAP32[$og>>2]|0;
 $44 = (($43) + 22|0);
 HEAP8[$44>>0] = $42;
 $45 = $crc_reg$1$lcssa >>> 8;
 $46 = $45&255;
 $47 = HEAP32[$og>>2]|0;
 $48 = (($47) + 23|0);
 HEAP8[$48>>0] = $46;
 $49 = $crc_reg$1$lcssa >>> 16;
 $50 = $49&255;
 $51 = HEAP32[$og>>2]|0;
 $52 = (($51) + 24|0);
 HEAP8[$52>>0] = $50;
 $53 = $crc_reg$1$lcssa >>> 24;
 $54 = $53&255;
 $55 = HEAP32[$og>>2]|0;
 $56 = (($55) + 25|0);
 HEAP8[$56>>0] = $54;
 STACKTOP = sp;return;
}
function __os_body_expand($os,$needed) {
 $os = $os|0;
 $needed = $needed|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($os) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) - ($needed))|0;
 $3 = (($os) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (2147483647 - ($needed))|0;
 $7 = ($1|0)>($6|0);
 if ($7) {
  (_ogg_stream_clear($os)|0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($1) + ($needed))|0;
 $9 = ($8|0)<(2147482623);
 $10 = (($8) + 1024)|0;
 $$ = $9 ? $10 : $8;
 $11 = HEAP32[$os>>2]|0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  (_ogg_stream_clear($os)|0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$0>>2] = $$;
  HEAP32[$os>>2] = $12;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __os_lacing_expand($os,$needed) {
 $os = $os|0;
 $needed = $needed|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($os) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) - ($needed))|0;
 $3 = (($os) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (2147483647 - ($needed))|0;
 $7 = ($1|0)>($6|0);
 if ($7) {
  (_ogg_stream_clear($os)|0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($1) + ($needed))|0;
 $9 = ($8|0)<(2147483615);
 $10 = (($8) + 32)|0;
 $$ = $9 ? $10 : $8;
 $11 = (($os) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $$ << 2;
 $14 = (_realloc($12,$13)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  (_ogg_stream_clear($os)|0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$11>>2] = $14;
 $16 = (($os) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $$ << 3;
 $19 = (_realloc($17,$18)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  (_ogg_stream_clear($os)|0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$16>>2] = $19;
  HEAP32[$0>>2] = $$;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _ogg_sync_init($oy) {
 $oy = $oy|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oy|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return 0;
 }
 ;HEAP32[$oy+0>>2]=0|0;HEAP32[$oy+4>>2]=0|0;HEAP32[$oy+8>>2]=0|0;HEAP32[$oy+12>>2]=0|0;HEAP32[$oy+16>>2]=0|0;HEAP32[$oy+20>>2]=0|0;HEAP32[$oy+24>>2]=0|0;
 STACKTOP = sp;return 0;
}
function _ogg_sync_clear($oy) {
 $oy = $oy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oy|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return 0;
 }
 $1 = HEAP32[$oy>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 ;HEAP32[$oy+0>>2]=0|0;HEAP32[$oy+4>>2]=0|0;HEAP32[$oy+8>>2]=0|0;HEAP32[$oy+12>>2]=0|0;HEAP32[$oy+16>>2]=0|0;HEAP32[$oy+20>>2]=0|0;HEAP32[$oy+24>>2]=0|0;
 STACKTOP = sp;return 0;
}
function _ogg_sync_check($oy) {
 $oy = $oy|0;
 var $$lobit = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($oy) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $$lobit = $1 >> 31;
 STACKTOP = sp;return ($$lobit|0);
}
function _ogg_sync_buffer($oy,$size) {
 $oy = $oy|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ogg_sync_check($oy)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($oy) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($oy) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) - ($3))|0;
  HEAP32[$5>>2] = $7;
  $8 = ($7|0)>(0);
  if ($8) {
   $9 = HEAP32[$oy>>2]|0;
   $10 = HEAP32[$2>>2]|0;
   $11 = (($9) + ($10)|0);
   _memmove(($9|0),($11|0),($7|0))|0;
  }
  HEAP32[$2>>2] = 0;
 }
 $12 = (($oy) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($oy) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) - ($15))|0;
 $17 = ($16|0)<($size|0);
 do {
  if ($17) {
   $18 = (($size) + 4096)|0;
   $19 = (($18) + ($15))|0;
   $20 = HEAP32[$oy>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $23 = (_malloc($19)|0);
    $ret$0 = $23;
   } else {
    $22 = (_realloc($20,$19)|0);
    $ret$0 = $22;
   }
   $24 = ($ret$0|0)==(0|0);
   if (!($24)) {
    HEAP32[$oy>>2] = $ret$0;
    HEAP32[$12>>2] = $19;
    break;
   }
   (_ogg_sync_clear($oy)|0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $25 = HEAP32[$oy>>2]|0;
 $26 = HEAP32[$14>>2]|0;
 $27 = (($25) + ($26)|0);
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _ogg_sync_wrote($oy,$bytes) {
 $oy = $oy|0;
 $bytes = $bytes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ogg_sync_check($oy)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (($oy) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($bytes))|0;
  $5 = (($oy) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)>($6|0);
  if ($7) {
   $$0 = -1;
  } else {
   HEAP32[$2>>2] = $4;
   $$0 = 0;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ogg_sync_pageseek($oy,$og) {
 $oy = $oy|0;
 $og = $og|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $chksum = 0, $i$06 = 0, $log = 0, $next$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $chksum = sp + 16|0;
 $log = sp;
 $0 = HEAP32[$oy>>2]|0;
 $1 = (($oy) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 $4 = (($oy) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($2))|0;
 $7 = (_ogg_sync_check($oy)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($oy) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($6|0)<(27);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $13 = (_memcmp($3,156832,4)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $$sum4 = (($2) + 26)|0;
   $15 = (($0) + ($$sum4)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = (($17) + 27)|0;
   $19 = ($6|0)<($18|0);
   if ($19) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $20 = HEAP8[$15>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $22 = (($2) + 27)|0;
    $23 = (($oy) + 24|0);
    $i$06 = 0;
    while(1) {
     $$sum5 = (($22) + ($i$06))|0;
     $24 = (($0) + ($$sum5)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = HEAP32[$23>>2]|0;
     $28 = (($27) + ($26))|0;
     HEAP32[$23>>2] = $28;
     $29 = (($i$06) + 1)|0;
     $30 = HEAP8[$15>>0]|0;
     $31 = $30&255;
     $32 = ($29|0)<($31|0);
     if ($32) {
      $i$06 = $29;
     } else {
      break;
     }
    }
   }
   HEAP32[$9>>2] = $18;
   label = 10;
  }
 } else {
  label = 10;
 }
 do {
  if ((label|0) == 10) {
   $33 = (($oy) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$9>>2]|0;
   $36 = (($35) + ($34))|0;
   $37 = ($36|0)>($6|0);
   if ($37) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $$sum = (($2) + 22)|0;
   $38 = (($0) + ($$sum)|0);
   $39 = HEAPU8[$38>>0]|(HEAPU8[$38+1>>0]<<8)|(HEAPU8[$38+2>>0]<<16)|(HEAPU8[$38+3>>0]<<24);
   HEAP32[$chksum>>2] = $39;
   HEAP8[$38>>0]=0&255;HEAP8[$38+1>>0]=(0>>8)&255;HEAP8[$38+2>>0]=(0>>16)&255;HEAP8[$38+3>>0]=0>>24;
   HEAP32[$log>>2] = $3;
   $40 = HEAP32[$9>>2]|0;
   $41 = (($log) + 4|0);
   HEAP32[$41>>2] = $40;
   $42 = HEAP32[$9>>2]|0;
   $$sum1 = (($42) + ($2))|0;
   $43 = (($0) + ($$sum1)|0);
   $44 = (($log) + 8|0);
   HEAP32[$44>>2] = $43;
   $45 = HEAP32[$33>>2]|0;
   $46 = (($log) + 12|0);
   HEAP32[$46>>2] = $45;
   _ogg_page_checksum_set($log);
   $47 = (_memcmp($chksum,$38,4)|0);
   $48 = ($47|0)==(0);
   if (!($48)) {
    $49 = HEAP32[$chksum>>2]|0;
    HEAP8[$38>>0]=$49&255;HEAP8[$38+1>>0]=($49>>8)&255;HEAP8[$38+2>>0]=($49>>16)&255;HEAP8[$38+3>>0]=$49>>24;
    break;
   }
   $50 = HEAP32[$oy>>2]|0;
   $51 = HEAP32[$1>>2]|0;
   $52 = ($og|0)==(0|0);
   if (!($52)) {
    $53 = (($50) + ($51)|0);
    HEAP32[$og>>2] = $53;
    $54 = HEAP32[$9>>2]|0;
    $55 = (($og) + 4|0);
    HEAP32[$55>>2] = $54;
    $56 = HEAP32[$9>>2]|0;
    $$sum2 = (($56) + ($51))|0;
    $57 = (($50) + ($$sum2)|0);
    $58 = (($og) + 8|0);
    HEAP32[$58>>2] = $57;
    $59 = HEAP32[$33>>2]|0;
    $60 = (($og) + 12|0);
    HEAP32[$60>>2] = $59;
   }
   $61 = (($oy) + 16|0);
   HEAP32[$61>>2] = 0;
   $62 = HEAP32[$9>>2]|0;
   $63 = HEAP32[$33>>2]|0;
   $64 = (($63) + ($62))|0;
   $65 = HEAP32[$1>>2]|0;
   $66 = (($65) + ($64))|0;
   HEAP32[$1>>2] = $66;
   HEAP32[$9>>2] = 0;
   HEAP32[$33>>2] = 0;
   $$0 = $64;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$9>>2] = 0;
 $67 = (($oy) + 24|0);
 HEAP32[$67>>2] = 0;
 $$sum3 = (($2) + 1)|0;
 $68 = (($0) + ($$sum3)|0);
 $69 = (($6) + -1)|0;
 $70 = (_memchr($68,79,$69)|0);
 $71 = ($70|0)==(0|0);
 if ($71) {
  $72 = HEAP32[$oy>>2]|0;
  $73 = HEAP32[$4>>2]|0;
  $74 = (($72) + ($73)|0);
  $next$0 = $74;
 } else {
  $next$0 = $70;
 }
 $75 = HEAP32[$oy>>2]|0;
 $76 = $next$0;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 HEAP32[$1>>2] = $78;
 $79 = $3;
 $80 = (($79) - ($76))|0;
 $$0 = $80;
 STACKTOP = sp;return ($$0|0);
}
function _ogg_sync_pageout($oy,$og) {
 $oy = $oy|0;
 $og = $og|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ogg_sync_check($oy)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = (($oy) + 16|0);
   while(1) {
    $3 = (_ogg_sync_pageseek($oy,$og)|0);
    $4 = ($3|0)>(0);
    if ($4) {
     $$0 = 1;
     break L1;
    }
    $5 = ($3|0)==(0);
    if ($5) {
     $$0 = 0;
     break L1;
    }
    $6 = HEAP32[$2>>2]|0;
    $7 = ($6|0)==(0);
    if ($7) {
     break;
    }
   }
   HEAP32[$2>>2] = 1;
   $$0 = -1;
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ogg_stream_pagein($os,$og) {
 $os = $os|0;
 $og = $og|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $body$0 = 0, $body$1 = 0, $bodysize$0 = 0, $bodysize$1 = 0, $bos$0 = 0, $bos$1$ph16 = 0, $bos$14 = 0, $i$08 = 0, $or$cond = 0, $saved$0$ph15 = 0, $saved$0$ph18 = 0, $segptr$0 = 0;
 var $segptr$1 = 0, $segptr$2$ph17 = 0, $segptr$25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$og>>2]|0;
 $1 = (($og) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($og) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_ogg_page_version($og)|0);
 $6 = (_ogg_page_continued($og)|0);
 $7 = (_ogg_page_bos($og)|0);
 $8 = (_ogg_page_eos($og)|0);
 $9 = (_ogg_page_granulepos($og)|0);
 $10 = tempRet0;
 $11 = (_ogg_page_serialno($og)|0);
 $12 = (_ogg_page_pageno($og)|0);
 $13 = (($0) + 26|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (_ogg_stream_check($os)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($os) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($os) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = (($os) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - ($21))|0;
  HEAP32[$23>>2] = $25;
  $26 = ($24|0)==($21|0);
  if (!($26)) {
   $27 = HEAP32[$os>>2]|0;
   $28 = (($27) + ($21)|0);
   _memmove(($27|0),($28|0),($25|0))|0;
  }
  HEAP32[$20>>2] = 0;
 }
 $29 = ($19|0)==(0);
 if (!($29)) {
  $30 = (($os) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==($19|0);
  if (!($32)) {
   $33 = (($31) - ($19))|0;
   $34 = (($os) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($19<<2)|0);
   $37 = $33 << 2;
   _memmove(($35|0),($36|0),($37|0))|0;
   $38 = (($os) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($19<<3)|0);
   $41 = HEAP32[$30>>2]|0;
   $42 = (($41) - ($19))|0;
   $43 = $42 << 3;
   _memmove(($39|0),($40|0),($43|0))|0;
  }
  $44 = HEAP32[$30>>2]|0;
  $45 = (($44) - ($19))|0;
  HEAP32[$30>>2] = $45;
  $46 = (($os) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) - ($19))|0;
  HEAP32[$46>>2] = $48;
  HEAP32[$18>>2] = 0;
 }
 $49 = (($os) + 336|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($11|0)!=($50|0);
 $52 = ($5|0)>(0);
 $or$cond = $51 | $52;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($15) + 1)|0;
 $54 = (__os_lacing_expand($os,$53)|0);
 $55 = ($54|0)==(0);
 if (!($55)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $56 = (($os) + 340|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($12|0)==($57|0);
 if (!($58)) {
  $59 = (($os) + 32|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($os) + 28|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60|0)<($62|0);
  if ($63) {
   $64 = (($os) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($os) + 8|0);
   $67 = HEAP32[$61>>2]|0;
   $$promoted = HEAP32[$66>>2]|0;
   $72 = $$promoted;$i$08 = $60;
   while(1) {
    $68 = (($65) + ($i$08<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 255;
    $71 = (($72) - ($70))|0;
    $73 = (($i$08) + 1)|0;
    $74 = ($73|0)<($67|0);
    if ($74) {
     $72 = $71;$i$08 = $73;
    } else {
     break;
    }
   }
   HEAP32[$66>>2] = $71;
  }
  $75 = HEAP32[$59>>2]|0;
  HEAP32[$61>>2] = $75;
  $76 = HEAP32[$56>>2]|0;
  $77 = ($76|0)==(-1);
  if (!($77)) {
   $78 = (($75) + 1)|0;
   HEAP32[$61>>2] = $78;
   $79 = (($os) + 16|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + ($75<<2)|0);
   HEAP32[$81>>2] = 1024;
   $82 = HEAP32[$59>>2]|0;
   $83 = (($82) + 1)|0;
   HEAP32[$59>>2] = $83;
  }
 }
 $84 = ($6|0)==(0);
 L32: do {
  if ($84) {
   $body$1 = $2;$bodysize$1 = $4;$bos$0 = $7;$segptr$1 = 0;
  } else {
   $85 = (($os) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)<(1);
   if ($87) {
    $body$0 = $2;$bodysize$0 = $4;$segptr$0 = 0;
   } else {
    $88 = (($86) + -1)|0;
    $89 = (($os) + 16|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($88<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(1024);
    if ($93) {
     $body$0 = $2;$bodysize$0 = $4;$segptr$0 = 0;
    } else {
     $body$1 = $2;$bodysize$1 = $4;$bos$0 = $7;$segptr$1 = 0;
     break;
    }
   }
   while(1) {
    $94 = ($segptr$0|0)<($15|0);
    if (!($94)) {
     $body$1 = $body$0;$bodysize$1 = $bodysize$0;$bos$0 = 0;$segptr$1 = $segptr$0;
     break L32;
    }
    $95 = (($segptr$0) + 27)|0;
    $96 = (($0) + ($95)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = (($body$0) + ($98)|0);
    $100 = (($bodysize$0) - ($98))|0;
    $101 = ($97<<24>>24)==(-1);
    $102 = (($segptr$0) + 1)|0;
    if ($101) {
     $body$0 = $99;$bodysize$0 = $100;$segptr$0 = $102;
    } else {
     $body$1 = $99;$bodysize$1 = $100;$bos$0 = 0;$segptr$1 = $102;
     break;
    }
   }
  }
 } while(0);
 $103 = ($bodysize$1|0)==(0);
 do {
  if (!($103)) {
   $104 = (__os_body_expand($os,$bodysize$1)|0);
   $105 = ($104|0)==(0);
   if ($105) {
    $106 = HEAP32[$os>>2]|0;
    $107 = (($os) + 8|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($106) + ($108)|0);
    _memcpy(($109|0),($body$1|0),($bodysize$1|0))|0;
    $110 = HEAP32[$107>>2]|0;
    $111 = (($110) + ($bodysize$1))|0;
    HEAP32[$107>>2] = $111;
    break;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $112 = ($segptr$1|0)<($15|0);
 if ($112) {
  $113 = (($os) + 28|0);
  $114 = (($os) + 16|0);
  $115 = (($os) + 20|0);
  $116 = (($os) + 32|0);
  $bos$1$ph16 = $bos$0;$saved$0$ph18 = -1;$segptr$2$ph17 = $segptr$1;
  L48: while(1) {
   $bos$14 = $bos$1$ph16;$segptr$25 = $segptr$2$ph17;
   while(1) {
    $117 = (($segptr$25) + 27)|0;
    $118 = (($0) + ($117)|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $119&255;
    $121 = HEAP32[$113>>2]|0;
    $122 = HEAP32[$114>>2]|0;
    $123 = (($122) + ($121<<2)|0);
    HEAP32[$123>>2] = $120;
    $124 = HEAP32[$113>>2]|0;
    $125 = HEAP32[$115>>2]|0;
    $126 = (($125) + ($124<<3)|0);
    $127 = $126;
    $128 = $127;
    HEAP32[$128>>2] = -1;
    $129 = (($127) + 4)|0;
    $130 = $129;
    HEAP32[$130>>2] = -1;
    $131 = ($bos$14|0)==(0);
    if (!($131)) {
     $132 = HEAP32[$113>>2]|0;
     $133 = HEAP32[$114>>2]|0;
     $134 = (($133) + ($132<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 | 256;
     HEAP32[$134>>2] = $136;
    }
    $137 = ($119<<24>>24)==(-1);
    $138 = HEAP32[$113>>2]|0;
    if (!($137)) {
     break;
    }
    $139 = (($138) + 1)|0;
    HEAP32[$113>>2] = $139;
    $140 = (($segptr$25) + 1)|0;
    $141 = ($140|0)<($15|0);
    if ($141) {
     $bos$14 = 0;$segptr$25 = $140;
    } else {
     $saved$0$ph15 = $saved$0$ph18;
     break L48;
    }
   }
   $142 = HEAP32[$113>>2]|0;
   $143 = (($142) + 1)|0;
   HEAP32[$113>>2] = $143;
   $144 = (($segptr$25) + 1)|0;
   HEAP32[$116>>2] = $143;
   $145 = ($144|0)<($15|0);
   if ($145) {
    $bos$1$ph16 = 0;$saved$0$ph18 = $138;$segptr$2$ph17 = $144;
   } else {
    $saved$0$ph15 = $138;
    break;
   }
  }
  $146 = ($saved$0$ph15|0)==(-1);
  if (!($146)) {
   $147 = (($os) + 20|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($148) + ($saved$0$ph15<<3)|0);
   $150 = $149;
   $151 = $150;
   HEAP32[$151>>2] = $9;
   $152 = (($150) + 4)|0;
   $153 = $152;
   HEAP32[$153>>2] = $10;
  }
 }
 $154 = ($8|0)==(0);
 if (!($154)) {
  $155 = (($os) + 328|0);
  HEAP32[$155>>2] = 1;
  $156 = (($os) + 28|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($157|0)>(0);
  if ($158) {
   $159 = (($157) + -1)|0;
   $160 = (($os) + 16|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + ($159<<2)|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 | 512;
   HEAP32[$162>>2] = $164;
  }
 }
 $165 = (($12) + 1)|0;
 HEAP32[$56>>2] = $165;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ogg_stream_packetout($os,$op) {
 $os = $os|0;
 $op = $op|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ogg_stream_check($os)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (__packetout($os,$op,1)|0);
  $$0 = $2;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function __packetout($os,$op,$adv) {
 $os = $os|0;
 $op = $op|0;
 $adv = $adv|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $bytes$0$lcssa = 0, $bytes$01 = 0, $eos$0$ = 0, $eos$0$lcssa = 0, $eos$02 = 0, $or$cond = 0, $ptr$0$lcssa = 0, $ptr$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($os) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($os) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>($1|0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($os) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1024;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = (($1) + 1)|0;
  HEAP32[$0>>2] = $11;
  $12 = (($os) + 344|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (_i64Add(($15|0),($18|0),1,0)|0);
  $20 = tempRet0;
  $21 = $12;
  $22 = $21;
  HEAP32[$22>>2] = $19;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = ($op|0)!=(0|0);
 $$not = $25 ^ 1;
 $26 = ($adv|0)==(0);
 $or$cond = $26 & $$not;
 if ($or$cond) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = $8 & 255;
 $28 = $8 & 512;
 $29 = $8 & 256;
 $30 = ($27|0)==(255);
 if ($30) {
  $31 = HEAP32[$5>>2]|0;
  $bytes$01 = 255;$eos$02 = $28;$ptr$03 = $1;
  while(1) {
   $32 = (($ptr$03) + 1)|0;
   $33 = (($31) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 & 255;
   $36 = $34 & 512;
   $37 = ($36|0)==(0);
   $eos$0$ = $37 ? $eos$02 : 512;
   $38 = (($35) + ($bytes$01))|0;
   $39 = ($35|0)==(255);
   if ($39) {
    $bytes$01 = $38;$eos$02 = $eos$0$;$ptr$03 = $32;
   } else {
    $bytes$0$lcssa = $38;$eos$0$lcssa = $eos$0$;$ptr$0$lcssa = $32;
    break;
   }
  }
 } else {
  $bytes$0$lcssa = $27;$eos$0$lcssa = $28;$ptr$0$lcssa = $1;
 }
 if ($25) {
  $40 = (($op) + 12|0);
  HEAP32[$40>>2] = $eos$0$lcssa;
  $41 = (($op) + 8|0);
  HEAP32[$41>>2] = $29;
  $42 = HEAP32[$os>>2]|0;
  $43 = (($os) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + ($44)|0);
  HEAP32[$op>>2] = $45;
  $46 = (($os) + 344|0);
  $47 = $46;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($47) + 4)|0;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($op) + 24|0);
  $54 = $53;
  $55 = $54;
  HEAP32[$55>>2] = $49;
  $56 = (($54) + 4)|0;
  $57 = $56;
  HEAP32[$57>>2] = $52;
  $58 = (($os) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($ptr$0$lcssa<<3)|0);
  $61 = $60;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + 4)|0;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($op) + 16|0);
  $68 = $67;
  $69 = $68;
  HEAP32[$69>>2] = $63;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = $66;
  $72 = (($op) + 4|0);
  HEAP32[$72>>2] = $bytes$0$lcssa;
 }
 if ($26) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = (($os) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($bytes$0$lcssa))|0;
 HEAP32[$73>>2] = $75;
 $76 = (($ptr$0$lcssa) + 1)|0;
 HEAP32[$0>>2] = $76;
 $77 = (($os) + 344|0);
 $78 = $77;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (_i64Add(($80|0),($83|0),1,0)|0);
 $85 = tempRet0;
 $86 = $77;
 $87 = $86;
 HEAP32[$87>>2] = $84;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $85;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[156840>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((156840 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((156840 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[156840>>2] = $22;
     } else {
      $23 = HEAP32[((156840 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((156840 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((156840 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((156840 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[156840>>2] = $74;
      } else {
       $75 = HEAP32[((156840 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((156840 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((156840 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((156840 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[156840>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[156840>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((156840 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((156840 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((156840 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((156840 + 8|0))>>2] = $81;
     HEAP32[((156840 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((156840 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((156840 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((156840 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((156840 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((156840 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((156840 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((156840 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((156840 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((156840 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((156840 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((156840 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((156840 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((156840 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[156840>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[156840>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((156840 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((156840 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((156840 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((156840 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((156840 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((156840 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((156840 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((156840 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((156840 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((156840 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((156840 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((156840 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((156840 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((156840 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((156840 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((156840 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((156840 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((156840 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[156840>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[156840>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((156840 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((156840 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((156840 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((156840 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((156840 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((156840 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((156840 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((156840 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((156840 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((156840 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((156840 + 20|0))>>2] = $516;
   HEAP32[((156840 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((156840 + 8|0))>>2] = 0;
   HEAP32[((156840 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((156840 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((156840 + 12|0))>>2] = $530;
  $531 = HEAP32[((156840 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((156840 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[157312>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((157312 + 8|0))>>2] = $540;
    HEAP32[((157312 + 4|0))>>2] = $540;
    HEAP32[((157312 + 12|0))>>2] = -1;
    HEAP32[((157312 + 16|0))>>2] = -1;
    HEAP32[((157312 + 20|0))>>2] = 0;
    HEAP32[((156840 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[157312>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((157312 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((156840 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((156840 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((156840 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((156840 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((156840 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((156840 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((157312 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((156840 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((156840 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((157312 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((156840 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((156840 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((156840 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((156840 + 432|0))>>2] = $633;
  $634 = HEAP32[((156840 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((156840 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((156840 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((156840 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((156840 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((156840 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((156840 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((156840 + 460|0))>>2] = 0;
    $641 = HEAP32[157312>>2]|0;
    HEAP32[((156840 + 36|0))>>2] = $641;
    HEAP32[((156840 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((156840 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((156840 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((156840 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((156840 + 24|0))>>2] = $654;
    HEAP32[((156840 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((157312 + 16|0))>>2]|0;
    HEAP32[((156840 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((156840 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((156840 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((156840 + 24|0))>>2] = $684;
       HEAP32[((156840 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((157312 + 16|0))>>2]|0;
       HEAP32[((156840 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((156840 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((156840 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((156840 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((156840 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((156840 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((156840 + 12|0))>>2] = $732;
        HEAP32[((156840 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((156840 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((156840 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((156840 + 8|0))>>2] = $738;
         HEAP32[((156840 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((156840 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((156840 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[156840>>2]|0;
            $765 = $764 & $763;
            HEAP32[156840>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((156840 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((156840 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((156840 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((156840 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((156840 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((156840 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((156840 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((156840 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((156840 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((156840 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((156840 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[156840>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[156840>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((156840 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((156840 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((156840 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((156840 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((156840 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((156840 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((156840 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((156840 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((156840 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((156840 + 24|0))>>2] = $958;
    HEAP32[((156840 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((157312 + 16|0))>>2]|0;
    HEAP32[((156840 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((156840 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((156840 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((156840 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((156840 + 448|0))+12>>2]|0;
    HEAP32[((156840 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((156840 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((156840 + 460|0))>>2] = 0;
    HEAP32[((156840 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((156840 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[156840>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[156840>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((156840 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((156840 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((156840 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((156840 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((156840 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((156840 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((156840 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((156840 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((156840 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((156840 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((156840 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((156840 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((156840 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((156840 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((156840 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((156840 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[156840>>2]|0;
     $36 = $35 & $34;
     HEAP32[156840>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((156840 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((156840 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((156840 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((156840 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((156840 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((156840 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((156840 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((156840 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((156840 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((156840 + 12|0))>>2] = $122;
   HEAP32[((156840 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((156840 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((156840 + 20|0))>>2] = 0;
   HEAP32[((156840 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((156840 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((156840 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((156840 + 8|0))>>2] = $130;
   HEAP32[((156840 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((156840 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((156840 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[156840>>2]|0;
     $154 = $153 & $152;
     HEAP32[156840>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((156840 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((156840 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((156840 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((156840 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((156840 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((156840 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((156840 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((156840 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((156840 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((156840 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((156840 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((156840 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((156840 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[156840>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[156840>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((156840 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((156840 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((156840 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((156840 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((156840 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((156840 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((156840 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((156840 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((156840 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((156840 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((156840 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((156840 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((156840 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((157312 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((156840 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((156840 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((156840 + 24|0))>>2] = $38;
  HEAP32[((156840 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((156840 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((156840 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((156840 + 8|0))>>2] = $storemerge21;
  HEAP32[((156840 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((156840 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[156840>>2]|0;
    $90 = $89 & $88;
    HEAP32[156840>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((156840 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((156840 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((156840 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((156840 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((156840 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((156840 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((156840 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((156840 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((156840 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((156840 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((156840 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[156840>>2]|0;
     $32 = $31 & $30;
     HEAP32[156840>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((156840 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((156840 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((156840 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((156840 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((156840 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((156840 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((156840 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((156840 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((156840 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((156840 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((156840 + 12|0))>>2] = $117;
   HEAP32[((156840 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((156840 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((156840 + 20|0))>>2] = 0;
   HEAP32[((156840 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((156840 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((156840 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((156840 + 8|0))>>2] = $125;
   HEAP32[((156840 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((156840 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[156840>>2]|0;
     $148 = $147 & $146;
     HEAP32[156840>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((156840 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((156840 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((156840 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((156840 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((156840 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((156840 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((156840 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((156840 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((156840 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((156840 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[156840>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[156840>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((156840 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((156840 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((156840 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((156840 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((156840 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((156840 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((156840 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((156840 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function runPostSets() {
 
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
    }
  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&1]();
    }
  
function b0(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(0); }
  function b1(p0,p1) { p0 = p0|0;p1 = p1|0; abort(1); }
  function b2(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(2); }
  function b3(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(3); }
  function b4() { ; abort(4); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_viiiii = [b0,_od_mc_blend_full8_c];
  var FUNCTION_TABLE_vii = [b1,_od_pre_filter4,_od_pre_filter8,_od_pre_filter16,_od_post_filter4,_od_post_filter8,_od_post_filter16,b1];
  var FUNCTION_TABLE_viiii = [b2,_od_bin_fdct4x4,_od_bin_fdct8x8,_od_bin_fdct16x16,_od_bin_idct4x4,_od_bin_idct8x8,_od_bin_idct16x16,_od_intra_pred4x4_get,_od_intra_pred8x8_get,_od_intra_pred16x16_get,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_viiiiiii = [b3,_od_single_band_decode,_od_32x32_decode,_od_mc_predict1fmv8_c,_od_mc_blend_full_split8_c,b3,b3,b3];
  var FUNCTION_TABLE_v = [b4,_od_restore_fpu_c];

    return { _daala_decode: _daala_decode, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _bitshift64Ashr: _bitshift64Ashr, _get_bitsperframe: _get_bitsperframe, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _get_decode_fps: _get_decode_fps, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _i64Subtract: _i64Subtract, _get_fps: _get_fps, _calloc: _calloc, _llvm_ctlz_i32: _llvm_ctlz_i32, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_v: dynCall_v };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_viiiii": invoke_viiiii, "invoke_vii": invoke_vii, "invoke_viiii": invoke_viiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_v": invoke_v, "_fabs": _fabs, "_sin": _sin, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_yuv_display_stub": _yuv_display_stub, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_cos": _cos, "_puts": _puts, "_mkport": _mkport, "_write": _write, "___errno_location": ___errno_location, "_fputc": _fputc, "_abort": _abort, "_time": _time, "_gettimeofday": _gettimeofday, "_fputs": _fputs, "_sqrt": _sqrt, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity }, buffer);
  var _daala_decode = Module["_daala_decode"] = asm["_daala_decode"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _get_bitsperframe = Module["_get_bitsperframe"] = asm["_get_bitsperframe"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _get_decode_fps = Module["_get_decode_fps"] = asm["_get_decode_fps"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _get_fps = Module["_get_fps"] = asm["_get_fps"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _llvm_ctlz_i32 = Module["_llvm_ctlz_i32"] = asm["_llvm_ctlz_i32"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



